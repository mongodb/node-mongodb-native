dist: xenial
language: node_js

branches:
  only:
    - master
    - next

before_install:
  # we have to intstall mongo-orchestration ourselves to get around permissions issues in subshells
  - sudo pip install --upgrade 'git+git://github.com/mongodb/mongo-orchestration@master'
  - sudo apt-get install -y libsnmp30

  - git clone --depth 1 https://github.com/mongodb-labs/drivers-evergreen-tools
  - export DRIVERS_TOOLS="${PWD}/drivers-evergreen-tools"
  - export MONGO_ORCHESTRATION_HOME="$DRIVERS_TOOLS/.evergreen/orchestration"
  - export MONGODB_BINARIES="$DRIVERS_TOOLS/mongodb/bin"

  # disable ipv6 since its not supported on travis
  - "find ${MONGO_ORCHESTRATION_HOME} -name \"*.json\" -exec sed -i 's/\"ipv6\": true/\"ipv6\": false/g' {} \\;"
  - "find ${MONGO_ORCHESTRATION_HOME} -name \"*.json\" -exec sed -i 's/,::1//g' {} \\;"
  - "find ${MONGO_ORCHESTRATION_HOME} -name \"*.json\" -exec sed -i 's/::1,//g' {} \\;"

  - "echo '{ \"releases\": { \"default\": \"'${MONGODB_BINARIES}'\" } }' > $MONGO_ORCHESTRATION_HOME/orchestration.config"
  - export TOPOLOGY=${MONGODB_ENVIRONMENT}
  - bash ${DRIVERS_TOOLS}/.evergreen/run-orchestration.sh || tail -n +1 ${MONGO_ORCHESTRATION_HOME}/*.log
  - "export MONGODB_URI=$(grep -oP '(?<=MONGODB_URI: \")[^\"]*' mo-expansion.yml)"

after_failure:
  - tail -n +1 ${MONGO_ORCHESTRATION_HOME}/*.log

jobs:
  include:
    - stage: standalone
      node_js: 6
      env:
        - MONGODB_VERSION=2.6
        - MONGODB_ENVIRONMENT=server
    - stage: standalone
      node_js: 6
      env:
        - MONGODB_VERSION=3.0
        - MONGODB_ENVIRONMENT=server
    - stage: standalone
      node_js: 6
      env:
        - MONGODB_VERSION=3.2
        - MONGODB_ENVIRONMENT=server
    - stage: standalone
      node_js: 6
      env:
        - MONGODB_VERSION=3.4
        - MONGODB_ENVIRONMENT=server
    - stage: standalone
      node_js: 6
      env:
        - MONGODB_VERSION=3.6
        - MONGODB_ENVIRONMENT=server
    - stage: standalone
      node_js: 6
      env:
        - MONGODB_VERSION=4.0
        - MONGODB_ENVIRONMENT=server

    - stage: standalone
      node_js: 6
      env:
        - MONGODB_VERSION=4.0
        - MONGODB_ENVIRONMENT=server
    - stage: standalone
      node_js: 8
      env:
        - MONGODB_VERSION=4.0
        - MONGODB_ENVIRONMENT=server
    - stage: standalone
      node_js: 10
      env:
        - MONGODB_VERSION=4.0
        - MONGODB_ENVIRONMENT=server
    - stage: standalone
      node_js: 12
      env:
        - MONGODB_VERSION=4.0
        - MONGODB_ENVIRONMENT=server

    - stage: replicaset
      node_js: 6
      env:
        - MONGODB_VERSION=4.0
        - MONGODB_ENVIRONMENT=replica_set
    - stage: replicaset
      node_js: 6
      env:
        - MONGODB_VERSION=4.2
        - MONGODB_ENVIRONMENT=replica_set
    - stage: sharded
      node_js: 6
      env:
        - MONGODB_VERSION=4.0
        - MONGODB_ENVIRONMENT=sharded_cluster
    - stage: sharded
      node_js: 6
      env:
        - MONGODB_VERSION=4.2
        - MONGODB_ENVIRONMENT=sharded_cluster

    # basic smoke test of the unified topology
    - stage: unified
      node_js: 6
      env:
        - MONGODB_VERSION=4.0
        - MONGODB_UNIFIED_TOPOLOGY=1
        - MONGODB_ENVIRONMENT=server
    - stage: unified
      node_js: 6
      env:
        - MONGODB_VERSION=4.0
        - MONGODB_UNIFIED_TOPOLOGY=1
        - MONGODB_ENVIRONMENT=replica_set
    - stage: unified
      node_js: 6
      env:
        - MONGODB_VERSION=4.0
        - MONGODB_UNIFIED_TOPOLOGY=1
        - MONGODB_ENVIRONMENT=sharded_cluster
    - stage: unified
      node_js: 6
      env:
        - MONGODB_VERSION=4.2
        - MONGODB_UNIFIED_TOPOLOGY=1
        - MONGODB_ENVIRONMENT=replica_set
    - stage: unified
      node_js: 6
      env:
        - MONGODB_VERSION=4.2
        - MONGODB_UNIFIED_TOPOLOGY=1
        - MONGODB_ENVIRONMENT=sharded_cluster
