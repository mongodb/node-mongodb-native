# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourself against rogue test case, or curl gone wild, that runs forever
# Good rule of thumb: the averageish length a task takes, times 5
# That roughly accounts for variable system performance for various buildvariants
exec_timeout_secs: 7200

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: subprocess.exec
    params:
      binary: ls
      args:
        - "-la"

functions:
  "fetch source":
    # Executes git clone and applies the submitted patch, if any
    - command: git.get_project
      params:
        directory: "src"
        shallow_clone: true # speed things up by limiting clone depth to 100

    # Make an evergreen expansion file with dynamic values
    - command: subprocess.exec
      params:
        working_dir: "src"
        binary: bash
        env:
          is_patch: ${is_patch}
          project: ${project}
        args:
          - .evergreen/prepare-shell.sh

    # Load the expansion file to make an evergreen variable with the current unique version
    - command: expansions.update
      params:
        file: src/expansion.yml

  "bootstrap mongo-orchestration":
    - command: subprocess.exec
      params:
        binary: bash
        add_expansions_to_env: true
        env:
          # The following is the settings for how we want to launch mongodb
          MONGODB_VERSION: ${VERSION}
          TOPOLOGY: ${TOPOLOGY}
          AUTH: ${AUTH}
          SSL: ${SSL}
          ORCHESTRATION_FILE: ${ORCHESTRATION_FILE}
          REQUIRE_API_VERSION: ${REQUIRE_API_VERSION}
          LOAD_BALANCER: ${LOAD_BALANCER}
          COMPRESSOR: ${COMPRESSOR}
          # These are paths necessary for launching mongodb
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
          MONGODB_BINARIES: ${MONGODB_BINARIES}
        args:
          - src/.evergreen/run-orchestration.sh

    # run-orchestration generates expansion file with the MONGODB_URI for the cluster
    - command: expansions.update
      params:
        file: mo-expansion.yml

  "stop mongo-orchestration":
    - command: shell.exec
      params:
        script: |
          bash ${DRIVERS_TOOLS}/.evergreen/stop-orchestration.sh

  "bootstrap mongohoused":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          DRIVERS_TOOLS="${DRIVERS_TOOLS}" bash ${DRIVERS_TOOLS}/.evergreen/atlas_data_lake/pull-mongohouse-image.sh
    - command: shell.exec
      params:
        background: true
        script: |
          ${PREPARE_SHELL}
          DRIVERS_TOOLS="${DRIVERS_TOOLS}" bash ${DRIVERS_TOOLS}/.evergreen/atlas_data_lake/run-mongohouse-image.sh
          sleep 1
          docker ps

  "bootstrap kms servers":
    - command: subprocess.exec
      params:
        binary: bash
        working_dir: src
        args:
          - .evergreen/activate-kms-venv.sh
        env:
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
    - command: subprocess.exec
      params:
        background: true
        binary: bash
        working_dir: src
        args:
          - .evergreen/run-kmip-server.sh
        env:
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
    - command: subprocess.exec
      params:
        background: true
        binary: bash
        working_dir: src
        args:
          - .evergreen/run-kms-servers.sh
        env:
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
    - command: subprocess.exec
      params:
        background: true
        working_dir: src
        binary: bash
        args:
          - .evergreen/run-azure-kms-mock-server.sh
        env:
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}

  "run tests":
    - command: ec2.assume_role
      params:
        role_arn: ${DRIVERS_SECRETS_ARN}
    - command: subprocess.exec
      type: test
      params:
        env:
          TEST_CSFLE: "true"
        add_expansions_to_env: true
        working_dir: "src"
        timeout_secs: 300
        binary: bash
        args:
          - .evergreen/run-tests.sh

  "run serverless tests":
    - command: timeout.update
      params:
        exec_timeout_secs: 1800
    - command: ec2.assume_role
      params:
        role_arn: ${DRIVERS_SECRETS_ARN}
    - command: subprocess.exec
      type: test
      params:
        timeout_secs: 300
        working_dir: src
        binary: bash
        env:
          AUTH: 'auth'
          SSL: 'ssl'
        add_expansions_to_env: true
        args:
          - .evergreen/run-serverless-tests.sh

  "start-load-balancer":
    - command: shell.exec
      params:
        script: |
          MONGODB_URI=${MONGODB_URI} bash ${DRIVERS_TOOLS}/.evergreen/run-load-balancer.sh start
    - command: expansions.update
      params:
        file: lb-expansion.yml

  "stop-load-balancer":
    - command: shell.exec
      params:
        script: |
          bash ${DRIVERS_TOOLS}/.evergreen/run-load-balancer.sh stop

  "run-lb-tests":
    - command: subprocess.exec
      type: test
      params:
        add_expansions_to_env: true
        binary: bash
        working_dir: src
        timeout_secs: 300
        args:
          - .evergreen/run-tests.sh

  "run-compression-tests":
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        working_dir: src
        timeout_secs: 300
        add_expansions_to_env: true
        args:
          - .evergreen/run-tests.sh

  "install package":
    - command: shell.exec
      params:
        working_dir: src
        script: |
          source ${DRIVERS_TOOLS}/.evergreen/init-node-and-npm-env.sh
          npm install --force ${PACKAGE}

  "run lint checks":
    - command: subprocess.exec
      type: test
      params:
        working_dir: "src"
        timeout_secs: 60
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
        binary: bash
        args:
          - "${PROJECT_DIRECTORY}/.evergreen/run-lint-checks.sh"

  "run unit tests":
    - command: subprocess.exec
      type: test
      params:
        working_dir: "src"
        timeout_secs: 60
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
        binary: bash
        args:
          - "${PROJECT_DIRECTORY}/.evergreen/run-unit-tests.sh"

  "check types":
    - command: subprocess.exec
      type: test
      params:
        working_dir: "src"
        timeout_secs: 60
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
          TS_VERSION: ${TS_VERSION}
          TS_CHECK: CHECK_TYPES
          TYPES_VERSION: ${TYPES_VERSION}
        binary: bash
        args:
          - "${PROJECT_DIRECTORY}/.evergreen/run-typescript.sh"

  "check resource management":
    - command: subprocess.exec
      type: test
      params:
        working_dir: "src"
        timeout_secs: 60
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
        binary: bash
        args:
          - "${PROJECT_DIRECTORY}/.evergreen/run-resource-management.sh"

  "check resource management feature integration":
    - command: subprocess.exec
      type: test
      params:
        working_dir: "src"
        timeout_secs: 60
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
          MONGODB_URI: ${MONGODB_URI}
        binary: bash
        args:
          - "${PROJECT_DIRECTORY}/.evergreen/run-resource-management-feature-integration.sh"

  "compile driver":
    - command: subprocess.exec
      type: test
      params:
        working_dir: "src"
        timeout_secs: 60
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
          TS_VERSION: ${TS_VERSION}
          TS_CHECK: COMPILE_DRIVER
          TYPES_VERSION: ${TYPES_VERSION}
        binary: bash
        args:
          - "${PROJECT_DIRECTORY}/.evergreen/run-typescript.sh"

  "reset aws instance profile":
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          ${PREPARE_SHELL}
          cd "${DRIVERS_TOOLS}/.evergreen/auth_aws"
          if [ -f "./aws_e2e_setup.json" ]; then
            . ./activate-authawsvenv.sh
            python ./lib/aws_assign_instance_profile.py
          fi

  "cleanup":
    - command: shell.exec
      params:
        silent: true
        script: |
          ${PREPARE_SHELL}
          rm -rf $DRIVERS_TOOLS || true

  "fix absolute paths":
    - command: shell.exec
      params:
        silent: true
        script: |
          ${PREPARE_SHELL}
          for filename in $(find ${DRIVERS_TOOLS} -name \*.json); do
            perl -p -i -e "s|ABSOLUTE_PATH_REPLACEMENT_TOKEN|${DRIVERS_TOOLS}|g" $filename
          done

  "windows fix":
    - command: shell.exec
      params:
        silent: true
        script: |
          ${PREPARE_SHELL}
          # for i in $(find ${DRIVERS_TOOLS}/.evergreen ${PROJECT_DIRECTORY}/.evergreen -name \*.sh); do
          #   cat $i | tr -d '\r' > $i.new
          #   mv $i.new $i
          # done
          # Copy client certificate because symlinks do not work on Windows.
          cp ${DRIVERS_TOOLS}/.evergreen/x509gen/client.pem ${MONGO_ORCHESTRATION_HOME}/lib/client.pem

  "make files executable":
    - command: shell.exec
      params:
        silent: true
        script: |
          ${PREPARE_SHELL}
          for i in $(find ${DRIVERS_TOOLS}/.evergreen ${PROJECT_DIRECTORY}/.evergreen -name \*.sh); do
            chmod +x $i
          done

  "install dependencies":
    - command: subprocess.exec
      type: setup
      params:
        working_dir: "src"
        binary: bash
        add_expansions_to_env: true
        args:
          - .evergreen/install-dependencies.sh

  "remove aws-credential-providers":
    - command: shell.exec
      type: setup
      params:
        shell: bash
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          source $DRIVERS_TOOLS/.evergreen/init-node-and-npm-env.sh
          rm -rf ./node_modules/@aws-sdk/credential-providers

  "run atlas tests":
    # This creates secrets-export.sh, which is later sourced by run-tests.sh
    - command: subprocess.exec
      params:
        working_dir: "src"
        binary: bash
        env:
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
        args:
          - -c
          - ${DRIVERS_TOOLS}/.evergreen/secrets_handling/setup-secrets.sh drivers/atlas_connect
    - command: subprocess.exec
      type: test
      params:
        working_dir: "src"
        binary: bash
        env:
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
          NODE_LTS_VERSION: ${NODE_LTS_VERSION}
        args:
          - .evergreen/run-atlas-tests.sh

  "run socks5 tests":
    - command: ec2.assume_role
      params:
        role_arn: ${DRIVERS_SECRETS_ARN}
    - command: subprocess.exec
      type: test
      params:
        add_expansions_to_env: true
        working_dir: src
        binary: bash
        args:
          - .evergreen/run-socks5-tests.sh

  "run kerberos tests":
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        working_dir: src
        env:
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
        args:
          - .evergreen/run-kerberos-tests.sh

  "run ldap tests":
    - command: ec2.assume_role
      params:
        role_arn: ${DRIVERS_SECRETS_ARN}
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        binary: bash
        env:
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
          NODE_LTS_VERSION: ${NODE_LTS_VERSION}
        args:
          - .evergreen/run-ldap-tests.sh

  "run data lake tests":
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        binary: bash
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
          MONGODB_URI: "mongodb://mhuser:pencil@localhost"
          NODE_LTS_VERSION: ${NODE_LTS_VERSION}
        args:
          - .evergreen/run-data-lake-tests.sh

  "run tls tests":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          export PROJECT_DIRECTORY="$(pwd)"
          export NODE_LTS_VERSION=${NODE_LTS_VERSION}
          export DRIVERS_TOOLS="${DRIVERS_TOOLS}"
          export MONGODB_URI="${MONGODB_URI}"

          bash ${PROJECT_DIRECTORY}/.evergreen/run-tls-tests.sh

  "assume secrets manager rule":
    - command: ec2.assume_role
      params:
        role_arn: ${DRIVERS_SECRETS_ARN}

  "run aws auth test with regular aws credentials":
    - command: subprocess.exec
      type: test
      params:
        include_expansions_in_env:
          - MONGODB_URI
          - DRIVERS_TOOLS
          - MONGODB_AWS_SDK
        env:
          AWS_CREDENTIAL_TYPE: regular
        working_dir: "src"
        binary: bash
        args:
          - .evergreen/run-mongodb-aws-test.sh

  "run aws auth test with assume role credentials":
    - command: subprocess.exec
      type: test
      params:
        include_expansions_in_env:
          - MONGODB_URI
          - DRIVERS_TOOLS
          - MONGODB_AWS_SDK
        env:
          AWS_CREDENTIAL_TYPE: assume-role
        working_dir: "src"
        binary: bash
        args:
          - .evergreen/run-mongodb-aws-test.sh

  "run aws auth test with aws EC2 credentials":
    - command: subprocess.exec
      type: test
      params:
        include_expansions_in_env:
          - MONGODB_URI
          - DRIVERS_TOOLS
          - MONGODB_AWS_SDK
        env:
          AWS_CREDENTIAL_TYPE: ec2
          IS_EC2: 'true'
        working_dir: src
        binary: bash
        args:
          - .evergreen/run-mongodb-aws-test.sh

  "run aws auth test with aws credentials as environment variables":
    - command: subprocess.exec
      type: test
      params:
        include_expansions_in_env:
          - MONGODB_URI
          - DRIVERS_TOOLS
          - MONGODB_AWS_SDK
        env:
          AWS_CREDENTIAL_TYPE: env-creds
        working_dir: "src"
        binary: bash
        args:
          - .evergreen/run-mongodb-aws-test.sh

  "run aws auth test with aws credentials and session token as environment variables":
    - command: subprocess.exec
      type: test
      params:
        include_expansions_in_env:
          - MONGODB_URI
          - DRIVERS_TOOLS
          - MONGODB_AWS_SDK
        env:
          AWS_CREDENTIAL_TYPE: session-creds
        working_dir: "src"
        binary: bash
        args:
          - .evergreen/run-mongodb-aws-test.sh

  "run aws auth test AssumeRoleWithWebIdentity with AWS_ROLE_SESSION_NAME set":
    - command: subprocess.exec
      type: test
      params:
        include_expansions_in_env:
          - MONGODB_URI
          - DRIVERS_TOOLS
          - MONGODB_AWS_SDK
        env:
          AWS_CREDENTIAL_TYPE: web-identity
          AWS_ROLE_SESSION_NAME: test
        working_dir: "src"
        binary: bash
        args:
          - .evergreen/run-mongodb-aws-test.sh

  "run aws auth test AssumeRoleWithWebIdentity with AWS_ROLE_SESSION_NAME unset":
    - command: subprocess.exec
      type: test
      params:
        include_expansions_in_env:
          - MONGODB_URI
          - DRIVERS_TOOLS
          - MONGODB_AWS_SDK
        env:
          AWS_CREDENTIAL_TYPE: web-identity
        working_dir: "src"
        binary: bash
        args:
          - .evergreen/run-mongodb-aws-test.sh

  "run aws ECS auth test":
    - command: subprocess.exec
      type: test
      params:
        include_expansions_in_env:
          - DRIVERS_TOOLS
          - MONGODB_AWS_SDK
          - PROJECT_DIRECTORY
          - MONGODB_BINARIES
        env:
          AWS_CREDENTIAL_TYPE: web-identity
        working_dir: "src"
        binary: bash
        args:
          - .evergreen/prepare-mongodb-aws-ecs-auth.sh

  "run custom csfle tests":
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        add_expansions_to_env: true
        binary: bash
        args:
          - .evergreen/run-custom-csfle-tests.sh

  "run lambda handler example tests":
    - command: subprocess.exec
      params:
        working_dir: "src"
        timeout_secs: 60
        env:
          MONGODB_URI: ${MONGODB_URI}
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
        binary: bash
        args:
          - "${PROJECT_DIRECTORY}/.evergreen/run-lambda-tests.sh"

  "run lambda handler example tests with aws auth":
    - command: subprocess.exec
      type: test
      params:
        include_expansions_in_env:
          - MONGODB_URI
          - DRIVERS_TOOLS
        env:
          AWS_CREDENTIAL_TYPE: env-creds
          MONGODB_AWS_SDK: 'true'
        working_dir: "src"
        binary: bash
        args:
          - .evergreen/run-lambda-aws-tests.sh

  "upload test results":
    # Upload the xunit-format test results.
    - command: attach.xunit_results
      params:
        file: "src/xunit.xml"

  "upload coverage report":
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          npx nyc report --reporter=json
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/coverage/coverage-final.json
        optional: true
        # Upload the coverage report for all tasks in a single build to the same directory.
        # TODO NODE-4707 - change upload directory to ${UPLOAD_BUCKET}
        # This change will require changing the `download and merge coverage` func as well
        remote_file: mongo-node-driver/${revision}/${version_id}/coverage.${build_variant}.${task_name}.json
        bucket: mciuploads
        permissions: public-read
        content_type: application/json
        display_name: "Raw Coverage Report"

  "download and merge coverage":
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          export AWS_ACCESS_KEY_ID=${aws_key}
          export AWS_SECRET_ACCESS_KEY=${aws_secret}

          # Download all the task coverage files.
          # NOTE: All coverage files are too large for V8 to handle the resulting call to
          #       JSON.stringify from within nyc, so with stick to Fermiun to include the
          #       compression tests.
          aws s3 cp --recursive s3://mciuploads/mongo-node-driver/${revision}/${version_id}/ \
            coverage/ \
            --exclude "*rhel80-large*" \
            --include "*fermiun"

          # npx does not recognize the dependency so install it directly.
          npm install @istanbuljs/nyc-config-typescript
          cd coverage
          sed -i'' -e 's/\/data\/mci\/.\{32\}\/src\///g' *
          ls -la
          cd ..
          npx nyc merge coverage/ merged-coverage/coverage.json
          npx nyc report -t merged-coverage/ --reporter=html --report-dir coverage-report

          aws s3 cp coverage-report/ \
            s3://mciuploads/mongo-node-driver/${revision}/${version_id}/coverage/ \
            --recursive \
            --acl public-read \
            --region us-east-1
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/coverage-report/index.html
        remote_file: mongo-node-driver/${revision}/${version_id}/coverage/index.html
        bucket: mciuploads
        permissions: public-read
        content_type: text/html
        display_name: "Coverage Report HTML"

  "run spec driver benchmarks":
    - command: subprocess.exec
      type: test
      params:
        working_dir: "src"
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          MONGODB_URI: ${MONGODB_URI}
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
          MONGODB_CLIENT_OPTIONS: ${MONGODB_CLIENT_OPTIONS}
        binary: bash
        args:
          - ${PROJECT_DIRECTORY}/.evergreen/run-benchmarks.sh

  "run x509 auth tests":
    - command: subprocess.exec
      type: test
      params:
        working_dir: "src"
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          MONGODB_URI: ${MONGODB_URI}
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
        binary: bash
        args:
          - ${PROJECT_DIRECTORY}/.evergreen/run-x509-tests.sh

  install mongodb-client-encryption:
    - command: subprocess.exec
      type: setup
      params:
        working_dir: "src"
        env:
          INSTALL_DIR: mongodb-client-encryption
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
        binary: bash
        args:
          - ${PROJECT_DIRECTORY}/.evergreen/install-mongodb-client-encryption.sh

tasks:
  - name: 'test-atlas-data-lake'
    tags: ["datalake", "mongohouse"]
    commands:
      - func: 'install dependencies'
      - func: 'bootstrap mongohoused'
      - func: 'run data lake tests'

  - name: "test-serverless"
    tags: ["serverless"]
    commands:
      - func: install dependencies
      - func: bootstrap kms servers
      - func: "run serverless tests"

  - name: "test-gcpkms-task"
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - { key: NPM_VERSION, value: "9" }
      - func: "install dependencies"
      # Upload node driver to a GCP instance
      - command: subprocess.exec
        type: setup
        params:
          binary: bash
          env:
            DRIVERS_TOOLS: ${DRIVERS_TOOLS}
          args:
            - src/.evergreen/run-deployed-gcp-kms-tests.sh

  - name: "test-gcpkms-fail-task"
    # test-gcpkms-fail-task runs in a non-GCE environment.
    # It is expected to fail to obtain GCE credentials.
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - { key: NPM_VERSION, value: "9" }
            - { key: VERSION, value: latest }
            - { key: TOPOLOGY, value: server }
            - { key: AUTH, value: noauth }
      - func: "install dependencies"
      - func: bootstrap mongo-orchestration
      - command: subprocess.exec
        type: test
        params:
          binary: bash
          env:
            EXPECTED_GCPKMS_OUTCOME: "failure"
          args:
            - src/.evergreen/run-gcp-kms-tests.sh

  - name: "test-azurekms-task"
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - { key: NPM_VERSION, value: "9" }
      - func: "install dependencies"
      - command: subprocess.exec
        type: setup
        params:
          binary: bash
          env:
            DRIVERS_TOOLS: ${DRIVERS_TOOLS}
          args:
            - src/.evergreen/run-deployed-azure-kms-tests.sh

  - name: "test-azurekms-fail-task"
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - { key: NPM_VERSION, value: "9" }
            - { key: VERSION, value: latest }
            - { key: TOPOLOGY, value: server }
            - { key: AUTH, value: noauth }
      - func: "install dependencies"
      - func: bootstrap mongo-orchestration
      - command: subprocess.exec
        type: test
        params:
          binary: bash
          env:
            EXPECTED_AZUREKMS_OUTCOME: "failure"
          args:
            - src/.evergreen/run-azure-kms-tests.sh

  - name: "oidc-auth-test-k8s-latest-eks"
    commands:
      - func: "install dependencies"
      - command: subprocess.exec
        type: test
        params:
          working_dir: src
          binary: bash
          env:
            DRIVERS_TOOLS: ${DRIVERS_TOOLS}
            PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
            ENVIRONMENT: k8s
            K8S_VARIANT: eks
            SCRIPT: run-oidc-prose-tests.sh
          include_expansions_in_env: ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN"]
          args:
            - .evergreen/run-oidc-tests-k8s.sh

  - name: "oidc-auth-test-k8s-latest-gke"
    commands:
      - func: "install dependencies"
      - command: subprocess.exec
        type: test
        params:
          working_dir: src
          binary: bash
          env:
            DRIVERS_TOOLS: ${DRIVERS_TOOLS}
            PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
            ENVIRONMENT: k8s
            K8S_VARIANT: gke
            SCRIPT: run-oidc-prose-tests.sh
          include_expansions_in_env: ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN"]
          args:
            - .evergreen/run-oidc-tests-k8s.sh

  - name: "oidc-auth-test-k8s-latest-aks"
    commands:
      - func: "install dependencies"
      - command: subprocess.exec
        type: test
        params:
          working_dir: src
          binary: bash
          env:
            DRIVERS_TOOLS: ${DRIVERS_TOOLS}
            PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
            ENVIRONMENT: k8s
            K8S_VARIANT: aks
            SCRIPT: run-oidc-prose-tests.sh
          include_expansions_in_env: ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN"]
          args:
            - .evergreen/run-oidc-tests-k8s.sh

  - name: "oidc-auth-test-azure-latest"
    commands:
      - func: "install dependencies"
      - command: subprocess.exec
        type: test
        params:
          working_dir: src
          binary: bash
          env:
            DRIVERS_TOOLS: ${DRIVERS_TOOLS}
            PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
            ENVIRONMENT: azure
            SCRIPT: run-oidc-prose-tests.sh
          args:
            - .evergreen/run-oidc-tests-azure.sh
      - command: subprocess.exec
        type: test
        params:
          working_dir: src
          binary: bash
          env:
            DRIVERS_TOOLS: ${DRIVERS_TOOLS}
            PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
            ENVIRONMENT: azure
            SCRIPT: run-oidc-unified-tests.sh
          args:
            - .evergreen/run-oidc-tests-azure.sh

  - name: "oidc-auth-test-test-latest"
    commands:
      - func: "install dependencies"
      - command: subprocess.exec
        type: test
        params:
          working_dir: src
          binary: bash
          env:
            DRIVERS_TOOLS: ${DRIVERS_TOOLS}
            PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
            ENVIRONMENT: test
            SCRIPT: run-oidc-prose-tests.sh
          args:
            - .evergreen/run-oidc-tests-test.sh
      - command: subprocess.exec
        type: test
        params:
          working_dir: src
          binary: bash
          env:
            DRIVERS_TOOLS: ${DRIVERS_TOOLS}
            PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
            ENVIRONMENT: test
            SCRIPT: run-oidc-unified-tests.sh
          args:
            - .evergreen/run-oidc-tests-test.sh

  - name: "oidc-auth-test-gcp-latest"
    commands:
      - func: "install dependencies"
      - command: subprocess.exec
        type: test
        params:
          working_dir: src
          binary: bash
          env:
            DRIVERS_TOOLS: ${DRIVERS_TOOLS}
            PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
            ENVIRONMENT: gcp
            SCRIPT: run-oidc-prose-tests.sh
          args:
            - .evergreen/run-oidc-tests-gcp.sh

  - name: "test-aws-lambda-deployed"
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - { key: NPM_VERSION, value: "9" }
      - func: "install dependencies"
      - command: ec2.assume_role
        params:
          role_arn: ${LAMBDA_AWS_ROLE_ARN}
          duration_seconds: 3600
      - command: subprocess.exec
        params:
          working_dir: src
          binary: bash
          add_expansions_to_env: true
          env:
            LAMBDA_STACK_NAME: dbx-node-lambda
            TEST_LAMBDA_DIRECTORY: ${PROJECT_DIRECTORY}/test/lambda
            AWS_REGION: us-east-1
          args:
            - ${DRIVERS_TOOLS}/.evergreen/aws_lambda/run-deployed-lambda-aws-tests.sh

  - name: test-search-index-helpers
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - { key: NODE_LTS_VERSION, value: "20" }
      - func: install dependencies
      - command: subprocess.exec
        type: test
        params:
          working_dir: src
          binary: bash
          add_expansions_to_env: true
          args:
            - .evergreen/run-search-index-management-tests.sh

task_groups:
  - name: serverless_task_group
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800 # 30 minutes
    setup_group:
      - func: "fetch source"
      - command: subprocess.exec
        params:
          working_dir: "src"
          binary: bash
          env:
            DRIVERS_TOOLS: ${DRIVERS_TOOLS}
          args:
            - .evergreen/setup-serverless.sh

    teardown_group:
      - func: "upload test results"
      - command: subprocess.exec
        params:
          working_dir: "src"
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/serverless/delete-instance.sh

    tasks:
      - ".serverless"

  - name: test_gcpkms_task_group
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800 # 30 minutes
    setup_group:
      - func: fetch source
      - command: subprocess.exec
        params:
          working_dir: "src"
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/csfle/gcpkms/setup.sh

    teardown_group:
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/csfle/gcpkms/teardown.sh
    tasks:
      - test-gcpkms-task

  - name: test_azurekms_task_group
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800 # 30 minutes
    setup_group:
      - func: fetch source
      - command: subprocess.exec
        params:
          working_dir: "src"
          binary: bash
          env:
            AZUREKMS_VMNAME_PREFIX: "NODE_DRIVER"
          args:
            - ${DRIVERS_TOOLS}/.evergreen/csfle/azurekms/setup.sh

    teardown_group:
      # Load expansions again. The setup task may have failed before running `expansions.update`.
      - command: expansions.update
        params:
          file: testazurekms-expansions.yml
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/csfle/azurekms/teardown.sh
    tasks:
      - test-azurekms-task

  - name: testk8soidc_task_group_eks
    setup_group:
      - func: fetch source
      - command: ec2.assume_role
        params:
          role_arn: ${DRIVERS_SECRETS_ARN}
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/k8s/setup.sh
    teardown_task:
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/k8s/teardown.sh
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - oidc-auth-test-k8s-latest-eks

  - name: testk8soidc_task_group_gke
    setup_group:
      - func: fetch source
      - command: ec2.assume_role
        params:
          role_arn: ${DRIVERS_SECRETS_ARN}
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/k8s/setup.sh
    teardown_task:
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/k8s/teardown.sh
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - oidc-auth-test-k8s-latest-gke

  - name: testk8soidc_task_group_aks
    setup_group:
      - func: fetch source
      - command: ec2.assume_role
        params:
          role_arn: ${DRIVERS_SECRETS_ARN}
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/k8s/setup.sh
    teardown_task:
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/k8s/teardown.sh
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - oidc-auth-test-k8s-latest-aks

  - name: testtestoidc_task_group
    setup_group:
      - func: fetch source
      - command: ec2.assume_role
        params:
          role_arn: ${DRIVERS_SECRETS_ARN}
      - command: subprocess.exec
        params:
          binary: bash
          include_expansions_in_env: ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN"]
          env:
            MONGODB_VERSION: "8.0"
          args:
          - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/setup.sh
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - oidc-auth-test-test-latest

  - name: testazureoidc_task_group
    setup_group:
      - func: fetch source
      - command: shell.exec
        params:
          shell: bash
          script: |-
            set -o errexit
            ${PREPARE_SHELL}
            export AZUREOIDC_VMNAME_PREFIX="NODE_DRIVER"
            $DRIVERS_TOOLS/.evergreen/auth_oidc/azure/setup.sh
    teardown_task:
      - command: shell.exec
        params:
          shell: bash
          script: |-
            ${PREPARE_SHELL}
            $DRIVERS_TOOLS/.evergreen/auth_oidc/azure/teardown.sh
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - oidc-auth-test-azure-latest

  - name: testgcpoidc_task_group
    setup_group:
      - func: fetch source
      - command: shell.exec
        params:
          shell: bash
          script: |-
            set -o errexit
            ${PREPARE_SHELL}
            export GCPOIDC_VMNAME_PREFIX="NODE_DRIVER"
            $DRIVERS_TOOLS/.evergreen/auth_oidc/gcp/setup.sh
    teardown_task:
      - command: shell.exec
        params:
          shell: bash
          script: |-
            ${PREPARE_SHELL}
            $DRIVERS_TOOLS/.evergreen/auth_oidc/gcp/teardown.sh
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - oidc-auth-test-gcp-latest

  - name: test_atlas_task_group
    setup_group:
      - func: fetch source
      - command: subprocess.exec
        params:
          working_dir: src
          binary: bash
          env:
            MONGODB_VERSION: "7.0"
            LAMBDA_STACK_NAME: dbx-node-lambda
            CLUSTER_PREFIX: dbx-node-lambda
          args:
            - ${DRIVERS_TOOLS}/.evergreen/atlas/setup-atlas-cluster.sh
            - atlas
      - command: expansions.update
        params:
          file: src/atlas-expansion.yml
    teardown_task:
      - command: subprocess.exec
        params:
          working_dir: src
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/atlas/teardown-atlas-cluster.sh
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - test-aws-lambda-deployed

  - name: test_atlas_task_group_search_indexes
    setup_group:
      - func: fetch source
      - command: subprocess.exec
        params:
          working_dir: src
          binary: bash
          env:
            MONGODB_VERSION: "7.0"
            CLUSTER_PREFIX: dbx-node-search-indexes
          args:
            - ${DRIVERS_TOOLS}/.evergreen/atlas/setup-atlas-cluster.sh
      - command: expansions.update
        params:
          file: src/atlas-expansion.yml
    teardown_task:
      - command: subprocess.exec
        params:
          working_dir: src
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/atlas/teardown-atlas-cluster.sh
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - test-search-index-helpers

pre:
  - func: "fetch source"
  - func: "windows fix"
  - func: "fix absolute paths"
  - func: "make files executable"

post:
  - func: "reset aws instance profile"
  - func: "upload test results"
  - func: "stop mongo-orchestration"
  - func: "upload coverage report"
  - func: "cleanup"

ignore:
  - "*.md"
