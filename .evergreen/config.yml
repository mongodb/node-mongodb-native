stepback: true
command_type: system
exec_timeout_secs: 1200
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la
functions:
  fetch source:
    - command: git.get_project
      params:
        directory: src
        shallow_clone: true
    - command: shell.exec
      params:
        working_dir: src
        script: |
          # Get the current unique version of this checkout
          if [ "${is_patch}" = "true" ]; then
             CURRENT_VERSION=$(git describe)-patch-${version_id}
          else
             CURRENT_VERSION=latest
          fi

          export DRIVERS_TOOLS="$(pwd)/../drivers-tools"

          export PROJECT_DIRECTORY="$(pwd)"
          export MONGO_ORCHESTRATION_HOME="$DRIVERS_TOOLS/.evergreen/orchestration"
          export MONGODB_BINARIES="$DRIVERS_TOOLS/mongodb/bin"
          export UPLOAD_BUCKET="${project}"

          # fix paths on windows
          if [ "Windows_NT" = "$OS" ]; then
            export DRIVERS_TOOLS=$(cygpath -m -a $DRIVERS_TOOLS)
            export MONGO_ORCHESTRATION_HOME=$(cygpath -m -a $MONGO_ORCHESTRATION_HOME)
            export MONGODB_BINARIES=$(cygpath -m -a $MONGODB_BINARIES)
            export PROJECT_DIRECTORY=$(cygpath -m -a $PROJECT_DIRECTORY)
          fi

          cat <<EOT > expansion.yml
          CURRENT_VERSION: "$CURRENT_VERSION"
          DRIVERS_TOOLS: "$DRIVERS_TOOLS"
          MONGO_ORCHESTRATION_HOME: "$MONGO_ORCHESTRATION_HOME"
          MONGODB_BINARIES: "$MONGODB_BINARIES"
          UPLOAD_BUCKET: "$UPLOAD_BUCKET"
          PROJECT_DIRECTORY: "$PROJECT_DIRECTORY"
          PREPARE_SHELL: |
             set -o errexit
             set -o xtrace
             export DRIVERS_TOOLS="$DRIVERS_TOOLS"
             export MONGO_ORCHESTRATION_HOME="$MONGO_ORCHESTRATION_HOME"
             export MONGODB_BINARIES="$MONGODB_BINARIES"
             export UPLOAD_BUCKET="$UPLOAD_BUCKET"
             export PROJECT_DIRECTORY="$PROJECT_DIRECTORY"

             export TMPDIR="$MONGO_ORCHESTRATION_HOME/db"
             export PATH="$MONGODB_BINARIES:$PATH"
             export PROJECT="${project}"
          EOT
          # See what we've done
          cat expansion.yml
    - command: expansions.update
      params:
        file: src/expansion.yml
  prepare resources:
    - command: shell.exec
      params:
        script: >
          ${PREPARE_SHELL}

          git clone --depth 1 https://github.com/mongodb-labs/drivers-evergreen-tools.git $DRIVERS_TOOLS

          echo "{ \"releases\": { \"default\": \"$MONGODB_BINARIES\" }}" >
          $MONGO_ORCHESTRATION_HOME/orchestration.config
  bootstrap mongo-orchestration:
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          MONGODB_VERSION=${VERSION} TOPOLOGY=${TOPOLOGY} \
          AUTH=${AUTH} SSL=${SSL} \
          ORCHESTRATION_FILE=${ORCHESTRATION_FILE} \
          REQUIRE_API_VERSION=${REQUIRE_API_VERSION} \
          LOAD_BALANCER=${LOAD_BALANCER} \
          bash ${DRIVERS_TOOLS}/.evergreen/run-orchestration.sh
    - command: expansions.update
      params:
        file: mo-expansion.yml
  bootstrap mongohoused:
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          DRIVERS_TOOLS="${DRIVERS_TOOLS}" bash ${DRIVERS_TOOLS}/.evergreen/atlas_data_lake/build-mongohouse-local.sh
    - command: shell.exec
      params:
        background: true
        script: |
          ${PREPARE_SHELL}
          DRIVERS_TOOLS="${DRIVERS_TOOLS}" bash ${DRIVERS_TOOLS}/.evergreen/atlas_data_lake/run-mongohouse-local.sh
  bootstrap kms servers:
    - command: subprocess.exec
      params:
        background: true
        working_dir: src
        binary: bash
        args:
          - .evergreen/run-kms-servers.sh
        env:
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
  run tests:
    - command: shell.exec
      type: test
      params:
        silent: true
        working_dir: src
        script: |
          if [ -n "${CLIENT_ENCRYPTION}" ]; then
            cat <<EOT > prepare_client_encryption.sh
            export CLIENT_ENCRYPTION=${CLIENT_ENCRYPTION}
            export CSFLE_KMS_PROVIDERS='${CSFLE_KMS_PROVIDERS}'
            export AWS_ACCESS_KEY_ID='${AWS_ACCESS_KEY_ID}'
            export AWS_SECRET_ACCESS_KEY='${AWS_SECRET_ACCESS_KEY}'
            export AWS_DEFAULT_REGION='us-east-1'
            export KMIP_TLS_CA_FILE="${DRIVERS_TOOLS}/.evergreen/x509gen/ca.pem"
            export KMIP_TLS_CERT_FILE="${DRIVERS_TOOLS}/.evergreen/x509gen/client.pem"
          EOT
          fi
    - command: shell.exec
      type: test
      params:
        working_dir: src
        timeout_secs: 300
        script: |
          ${PREPARE_SHELL}

          if [ -n "${CLIENT_ENCRYPTION}" ]; then
            # Disable xtrace (just in case it was accidentally set).
            set +x
            . ./prepare_client_encryption.sh
            rm -f ./prepare_client_encryption.sh
          fi

          MONGODB_URI="${MONGODB_URI}" \
          AUTH=${AUTH} SSL=${SSL} UNIFIED=${UNIFIED} \
          MONGODB_API_VERSION="${MONGODB_API_VERSION}" \
          NODE_VERSION=${NODE_VERSION} SKIP_DEPS=${SKIP_DEPS|1} NO_EXIT=${NO_EXIT|1} \
            bash ${PROJECT_DIRECTORY}/.evergreen/run-tests.sh
  run serverless tests:
    - command: timeout.update
      params:
        exec_timeout_secs: 1800
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          # Disable xtrace (just in case it was accidentally set).
          set +x

          export MONGODB_API_VERSION="${MONGODB_API_VERSION}"
          export AUTH="auth"
          export SSL="ssl"
          export SERVERLESS="1"
          export SERVERLESS_ATLAS_USER="${SERVERLESS_ATLAS_USER}"
          export SERVERLESS_ATLAS_PASSWORD="${SERVERLESS_ATLAS_PASSWORD}"

          export SINGLE_ATLASPROXY_SERVERLESS_URI="${SINGLE_ATLASPROXY_SERVERLESS_URI}"
          export MULTI_ATLASPROXY_SERVERLESS_URI="${MULTI_ATLASPROXY_SERVERLESS_URI}"

          export MONGODB_URI="${SINGLE_ATLASPROXY_SERVERLESS_URI}"
          export SINGLE_MONGOS_LB_URI="${SINGLE_ATLASPROXY_SERVERLESS_URI}"

          # Setting MULTI_MONGOS to the SINGLE_ATLAS is intentional
          # LB tests pick one host out of the comma separated list
          # so just passing the one host is equivalent
          export MULTI_MONGOS_LB_URI="${SINGLE_ATLASPROXY_SERVERLESS_URI}"

          bash ${PROJECT_DIRECTORY}/.evergreen/run-serverless-tests.sh
  start-load-balancer:
    - command: shell.exec
      params:
        script: |
          MONGODB_URI=${MONGODB_URI} bash ${DRIVERS_TOOLS}/.evergreen/run-load-balancer.sh start
    - command: expansions.update
      params:
        file: lb-expansion.yml
  stop-load-balancer:
    - command: shell.exec
      params:
        script: |
          bash ${DRIVERS_TOOLS}/.evergreen/run-load-balancer.sh stop
  run-lb-tests:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        timeout_secs: 300
        script: |
          ${PREPARE_SHELL}

          MONGODB_URI="${MONGODB_URI}" \
          AUTH=${AUTH} \
          SSL=${SSL} \
          UNIFIED=${UNIFIED} \
          MONGODB_API_VERSION="${MONGODB_API_VERSION}" \
          NODE_VERSION=${NODE_VERSION} \
          SINGLE_MONGOS_LB_URI="${SINGLE_MONGOS_LB_URI}" \
          MULTI_MONGOS_LB_URI="${MULTI_MONGOS_LB_URI}" \
          TOPOLOGY="${TOPOLOGY}" \
          SKIP_DEPS=${SKIP_DEPS|1} \
          NO_EXIT=${NO_EXIT|1} \
          LOAD_BALANCER="${LOAD_BALANCER}" \
            bash ${PROJECT_DIRECTORY}/.evergreen/run-tests.sh
  run checks:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          bash ${PROJECT_DIRECTORY}/.evergreen/run-checks.sh
  run mongosh integration tests:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          export DISTRO_ID=${distro_id}
          bash ${PROJECT_DIRECTORY}/.evergreen/run-mongosh-integration-tests.sh
  cleanup:
    - command: shell.exec
      params:
        silent: true
        script: |
          ${PREPARE_SHELL}
          rm -rf $DRIVERS_TOOLS || true
  fix absolute paths:
    - command: shell.exec
      params:
        silent: true
        script: |
          ${PREPARE_SHELL}
          for filename in $(find ${DRIVERS_TOOLS} -name \*.json); do
            perl -p -i -e "s|ABSOLUTE_PATH_REPLACEMENT_TOKEN|${DRIVERS_TOOLS}|g" $filename
          done
  windows fix:
    - command: shell.exec
      params:
        silent: true
        script: |
          ${PREPARE_SHELL}
          # for i in $(find ${DRIVERS_TOOLS}/.evergreen ${PROJECT_DIRECTORY}/.evergreen -name \*.sh); do
          #   cat $i | tr -d '\r' > $i.new
          #   mv $i.new $i
          # done
          # Copy client certificate because symlinks do not work on Windows.
          cp ${DRIVERS_TOOLS}/.evergreen/x509gen/client.pem ${MONGO_ORCHESTRATION_HOME}/lib/client.pem
  make files executable:
    - command: shell.exec
      params:
        silent: true
        script: |
          ${PREPARE_SHELL}
          for i in $(find ${DRIVERS_TOOLS}/.evergreen ${PROJECT_DIRECTORY}/.evergreen -name \*.sh); do
            chmod +x $i
          done
  install dependencies:
    - command: shell.exec
      type: setup
      params:
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          NODE_LTS_NAME=${NODE_LTS_NAME} MSVS_VERSION=${MSVS_VERSION} \
            bash ${PROJECT_DIRECTORY}/.evergreen/install-dependencies.sh
    - command: expansions.update
      params:
        file: src/deps-expansion.yml
  run atlas tests:
    - command: shell.exec
      type: test
      params:
        silent: true
        working_dir: src
        script: |
          cat <<EOT > prepare_atlas_connectivity.sh
          export ATLAS_CONNECTIVITY='${ATLAS_CONNECTIVITY}'
          EOT
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          # Disable xtrace (just in case it was accidentally set).
          set +x
          . ./prepare_atlas_connectivity.sh
          rm -f ./prepare_atlas_connectivity.sh

          export PROJECT_DIRECTORY="$(pwd)"
          export NODE_LTS_NAME='${NODE_LTS_NAME}'

          bash ${PROJECT_DIRECTORY}/.evergreen/run-atlas-tests.sh
  run socks5 tests:
    - command: shell.exec
      type: test
      params:
        silent: true
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          cat <<EOT > prepare_client_encryption.sh
          export CLIENT_ENCRYPTION=${CLIENT_ENCRYPTION}
          export CSFLE_KMS_PROVIDERS='${CSFLE_KMS_PROVIDERS}'
          export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
          export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
          export CSFLE_GIT_REF="${CSFLE_GIT_REF}"
          export CDRIVER_GIT_REF="${CDRIVER_GIT_REF}"
          EOT
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: >
          ${PREPARE_SHELL}


          export PYTHON_BINARY=$([ "Windows_NT" = "$OS" ] && echo "/cygdrive/c/python/python38/python.exe" || echo
          "/opt/mongodbtoolchain/v3/bin/python3")

          export PROJECT_DIRECTORY="$(pwd)"

          export DRIVERS_TOOLS="${DRIVERS_TOOLS}"

          export NODE_LTS_NAME='${NODE_LTS_NAME}'

          export MONGODB_URI="${MONGODB_URI}"

          export SSL="${SSL}"


          # Disable xtrace (just in case it was accidentally set).

          set +x

          . ./prepare_client_encryption.sh

          rm -f ./prepare_client_encryption.sh


          bash ${PROJECT_DIRECTORY}/.evergreen/run-socks5-tests.sh
  run kerberos tests:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          export PROJECT_DIRECTORY="$(pwd)"
          export KRB5_KEYTAB='${gssapi_auth_keytab_base64}'
          export KRB5_PRINCIPAL='${gssapi_auth_principal}'
          export MONGODB_URI='${gssapi_auth_mongodb_uri}'
          export NODE_LTS_NAME='${NODE_LTS_NAME}'

          bash ${PROJECT_DIRECTORY}/.evergreen/run-kerberos-tests.sh
  run ldap tests:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          export PROJECT_DIRECTORY="$(pwd)"
          export MONGODB_URI='${plain_auth_mongodb_uri}'
          export NODE_LTS_NAME='${NODE_LTS_NAME}'

          bash ${PROJECT_DIRECTORY}/.evergreen/run-ldap-tests.sh
  run data lake tests:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          export PROJECT_DIRECTORY="$(pwd)"
          export MONGODB_URI='mongodb://mhuser:pencil@localhost'
          export NODE_LTS_NAME='${NODE_LTS_NAME}'

          bash ${PROJECT_DIRECTORY}/.evergreen/run-data-lake-tests.sh
  run tls tests:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          export PROJECT_DIRECTORY="$(pwd)"
          export NODE_LTS_NAME=${NODE_LTS_NAME}
          export DRIVERS_TOOLS="${DRIVERS_TOOLS}"
          export SSL_CA_FILE="${SSL_CA_FILE}"
          export SSL_KEY_FILE="${SSL_KEY_FILE}"
          export MONGODB_URI="${MONGODB_URI}"

          bash ${PROJECT_DIRECTORY}/.evergreen/run-tls-tests.sh
  add aws auth variables to file:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        silent: true
        script: |
          cat <<EOF > ${DRIVERS_TOOLS}/.evergreen/auth_aws/aws_e2e_setup.json
          {
              "iam_auth_ecs_account" : "${iam_auth_ecs_account}",
              "iam_auth_ecs_secret_access_key" : "${iam_auth_ecs_secret_access_key}",
              "iam_auth_ecs_account_arn": "arn:aws:iam::557821124784:user/authtest_fargate_user",
              "iam_auth_ecs_cluster": "${iam_auth_ecs_cluster}",
              "iam_auth_ecs_task_definition": "${iam_auth_ecs_task_definition}",
              "iam_auth_ecs_subnet_a": "${iam_auth_ecs_subnet_a}",
              "iam_auth_ecs_subnet_b": "${iam_auth_ecs_subnet_b}",
              "iam_auth_ecs_security_group": "${iam_auth_ecs_security_group}",
              "iam_auth_assume_aws_account" : "${iam_auth_assume_aws_account}",
              "iam_auth_assume_aws_secret_access_key" : "${iam_auth_assume_aws_secret_access_key}",
              "iam_auth_assume_role_name" : "${iam_auth_assume_role_name}",
              "iam_auth_ec2_instance_account" : "${iam_auth_ec2_instance_account}",
              "iam_auth_ec2_instance_secret_access_key" : "${iam_auth_ec2_instance_secret_access_key}",
              "iam_auth_ec2_instance_profile" : "${iam_auth_ec2_instance_profile}"
          }
          EOF
  setup aws env:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws
          . ./activate_venv.sh
          cd -
  run aws auth test with regular aws credentials:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws
          . ./activate_venv.sh
          ${MONGODB_BINARIES}/mongo aws_e2e_regular_aws.js
    - command: shell.exec
      type: test
      params:
        working_dir: src
        silent: true
        script: |
          cat <<'EOF' > "${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh"
            alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1])"'
            USER=$(urlencode ${iam_auth_ecs_account})
            PASS=$(urlencode ${iam_auth_ecs_secret_access_key})
            export MONGODB_URI="mongodb://$USER:$PASS@localhost:27017/aws?authMechanism=MONGODB-AWS"
          EOF
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          ${PROJECT_DIRECTORY}/.evergreen/run-mongodb-aws-test.sh
  run aws auth test with assume role credentials:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws
          . ./activate_venv.sh
          ${MONGODB_BINARIES}/mongo aws_e2e_assume_role.js
    - command: shell.exec
      type: test
      params:
        working_dir: src
        silent: true
        script: |
          cat <<'EOF' > "${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh"
            alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1])"'
            USER=$(jq -r '.AccessKeyId' ${DRIVERS_TOOLS}/.evergreen/auth_aws/creds.json)
            USER=$(urlencode $USER)
            PASS=$(jq -r '.SecretAccessKey' ${DRIVERS_TOOLS}/.evergreen/auth_aws/creds.json)
            PASS=$(urlencode $PASS)
            SESSION_TOKEN=$(jq -r '.SessionToken' ${DRIVERS_TOOLS}/.evergreen/auth_aws/creds.json)
            SESSION_TOKEN=$(urlencode $SESSION_TOKEN)
            export MONGODB_URI="mongodb://$USER:$PASS@localhost:27017/aws?authMechanism=MONGODB-AWS&authMechanismProperties=AWS_SESSION_TOKEN:$SESSION_TOKEN"
          EOF
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          ${PROJECT_DIRECTORY}/.evergreen/run-mongodb-aws-test.sh
  run aws auth test with aws EC2 credentials:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws
          . ./activate_venv.sh
          ${MONGODB_BINARIES}/mongo aws_e2e_ec2.js
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          ${PROJECT_DIRECTORY}/.evergreen/run-mongodb-aws-test.sh
  run aws auth test with aws credentials as environment variables:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        silent: true
        script: |
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws
          ${MONGODB_BINARIES}/mongo --verbose aws_e2e_regular_aws.js
          cd -
          cat <<EOF > "${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh"
            export AWS_ACCESS_KEY_ID=${iam_auth_ecs_account}
            export AWS_SECRET_ACCESS_KEY=${iam_auth_ecs_secret_access_key}
            export MONGODB_URI="mongodb://localhost:27017/aws?authMechanism=MONGODB-AWS"
          EOF
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          ${PROJECT_DIRECTORY}/.evergreen/run-mongodb-aws-test.sh
  run aws auth test with aws credentials and session token as environment variables:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        silent: true
        script: |
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws
          ${MONGODB_BINARIES}/mongo --verbose aws_e2e_assume_role.js
          cd -
          cat <<'EOF' > "${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh"
            export AWS_ACCESS_KEY_ID=$(jq -r '.AccessKeyId' ${DRIVERS_TOOLS}/.evergreen/auth_aws/creds.json)
            export AWS_SECRET_ACCESS_KEY=$(jq -r '.SecretAccessKey' ${DRIVERS_TOOLS}/.evergreen/auth_aws/creds.json)
            export AWS_SESSION_TOKEN=$(jq -r '.SessionToken' ${DRIVERS_TOOLS}/.evergreen/auth_aws/creds.json)
            export MONGODB_URI="mongodb://localhost:27017/aws?authMechanism=MONGODB-AWS"
          EOF
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          ${PROJECT_DIRECTORY}/.evergreen/run-mongodb-aws-test.sh
  run aws ECS auth test:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          AUTH_AWS_DIR=${DRIVERS_TOOLS}/.evergreen/auth_aws
          ECS_SRC_DIR=$AUTH_AWS_DIR/src

          # fix issue with `TestData` in SERVER-46340
          sed -i '1s+^+TestData = {};\n+' $AUTH_AWS_DIR/lib/ecs_hosted_test.js

          # pack up project directory to ssh it to the container
          mkdir -p $ECS_SRC_DIR/.evergreen
          cp $PROJECT_DIRECTORY/.evergreen/run-mongodb-aws-ecs-test.sh $ECS_SRC_DIR/.evergreen
          tar -czf $ECS_SRC_DIR/src.tgz -C $PROJECT_DIRECTORY .

          cd $AUTH_AWS_DIR
          cat <<EOF > setup.js
            const mongo_binaries = "$MONGODB_BINARIES";
            const project_dir = "$ECS_SRC_DIR";
          EOF

          cat setup.js
          . ./activate_venv.sh
          ${MONGODB_BINARIES}/mongo --nodb setup.js aws_e2e_ecs.js
  run-ocsp-test:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          ${PREPARE_SHELL}

          UNIFIED=${UNIFIED} \
          CA_FILE="$DRIVERS_TOOLS/.evergreen/ocsp/rsa/ca.pem" \
          OCSP_TLS_SHOULD_SUCCEED="${OCSP_TLS_SHOULD_SUCCEED}" \
          bash ${PROJECT_DIRECTORY}/.evergreen/run-ocsp-tests.sh
  run-valid-ocsp-server:
    - command: shell.exec
      params:
        script: >
          cd ${DRIVERS_TOOLS}/.evergreen/ocsp

          export PYTHON_BINARY=$([ "Windows_NT" = "$OS" ] && echo "/cygdrive/c/python/python38/python.exe" || echo
          "/opt/mongodbtoolchain/v3/bin/python3")

          export PYTHON_VENV_PATH=$([ "Windows_NT" = "$OS" ] && echo "./venv/Scripts" || echo "./venv/bin")


          $PYTHON_BINARY -m venv ./venv

          $PYTHON_VENV_PATH/pip3 install -r ${DRIVERS_TOOLS}/.evergreen/ocsp/mock-ocsp-responder-requirements.txt
    - command: shell.exec
      params:
        background: true
        script: |
          cd ${DRIVERS_TOOLS}/.evergreen/ocsp
          nohup $PYTHON_VENV_PATH/python3 ocsp_mock.py \
            --ca_file rsa/ca.pem \
            --ocsp_responder_cert rsa/ca.crt \
            --ocsp_responder_key rsa/ca.key \
            -p 8100 -v
  run-revoked-ocsp-server:
    - command: shell.exec
      params:
        script: >
          cd ${DRIVERS_TOOLS}/.evergreen/ocsp


          export PYTHON_BINARY=$([ "Windows_NT" = "$OS" ] && echo "/cygdrive/c/python/python38/python.exe" || echo
          "/opt/mongodbtoolchain/v3/bin/python3")

          export PYTHON_VENV_PATH=$([ "Windows_NT" = "$OS" ] && echo "./venv/Scripts" || echo "./venv/bin")


          $PYTHON_BINARY -m venv ./venv

          $PYTHON_VENV_PATH/pip3 install -r ${DRIVERS_TOOLS}/.evergreen/ocsp/mock-ocsp-responder-requirements.txt
    - command: shell.exec
      params:
        background: true
        script: |
          cd ${DRIVERS_TOOLS}/.evergreen/ocsp
          nohup $PYTHON_VENV_PATH/python3 ocsp_mock.py \
            --ca_file rsa/ca.pem \
            --ocsp_responder_cert rsa/ca.crt \
            --ocsp_responder_key rsa/ca.key \
            -p 8100 \
            -v \
            --fault revoked
  run custom csfle tests:
    - command: shell.exec
      type: test
      params:
        silent: true
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          cat <<EOT > prepare_client_encryption.sh
          export CLIENT_ENCRYPTION=${CLIENT_ENCRYPTION}
          export CSFLE_KMS_PROVIDERS='${CSFLE_KMS_PROVIDERS}'
          export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
          export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
          export CSFLE_GIT_REF="${CSFLE_GIT_REF}"
          export CDRIVER_GIT_REF="${CDRIVER_GIT_REF}"
          EOT
    - command: shell.exec
      type: test
      params:
        working_dir: src
        timeout_secs: 60
        script: |
          ${PREPARE_SHELL}

          # Disable xtrace (just in case it was accidentally set).
          set +x
          . ./prepare_client_encryption.sh
          rm -f ./prepare_client_encryption.sh

          MONGODB_URI="${MONGODB_URI}" bash ${PROJECT_DIRECTORY}/.evergreen/run-custom-csfle-tests.sh
  run custom snappy tests:
    - command: subprocess.exec
      params:
        working_dir: src
        timeout_secs: 60
        env:
          MONGODB_URI: ${MONGODB_URI}
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
        binary: bash
        args:
          - ${PROJECT_DIRECTORY}/.evergreen/run-snappy-version-test.sh
  run bson-ext test:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        timeout_secs: 60
        script: |
          ${PREPARE_SHELL}

          MONGODB_URI="${MONGODB_URI}" bash ${PROJECT_DIRECTORY}/.evergreen/run-bson-ext-test.sh
  upload test results:
    - command: attach.xunit_results
      params:
        file: src/xunit.xml
  upload coverage report:
    - command: shell.exec
      params:
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          npx nyc report --reporter=json
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/coverage/coverage-final.json
        optional: true
        remote_file: mongo-node-driver/${revision}/${version_id}/coverage.${build_variant}.${task_name}.json
        bucket: mciuploads
        permissions: public-read
        content_type: application/json
        display_name: Raw Coverage Report
  download and merge coverage:
    - command: shell.exec
      params:
        silent: true
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          export AWS_ACCESS_KEY_ID=${aws_key}
          export AWS_SECRET_ACCESS_KEY=${aws_secret}
          # Download all the task coverage files.
          # TODO NODE-3897 - finish this function.  the code below this point is untested because
          #   aws s3 cp fails due to permissions errors
          aws s3 cp --recursive s3://mciuploads/mongo-node-driver/${revision}/${version_id}/ coverage/

          npx nyc merge coverage/ merged-coverage/coverage.json
          npx nyc report -t merged-coverage --reporter=html --report-dir output

          aws s3 cp output/lcov-report s3://mciuploads/mongo-node-driver/${revision}/${version_id}//lcov-report/
tasks:
  - name: test-serverless
    tags:
      - serverless
    commands:
      - func: run serverless tests
  - name: test-latest-server
    tags:
      - latest
      - server
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: latest
          TOPOLOGY: server
          AUTH: auth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-latest-replica_set
    tags:
      - latest
      - replica_set
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: latest
          TOPOLOGY: replica_set
          AUTH: auth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-latest-sharded_cluster
    tags:
      - latest
      - sharded_cluster
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: latest
          TOPOLOGY: sharded_cluster
          AUTH: auth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-5.0-server
    tags:
      - '5.0'
      - server
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '5.0'
          TOPOLOGY: server
          AUTH: auth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-5.0-replica_set
    tags:
      - '5.0'
      - replica_set
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '5.0'
          TOPOLOGY: replica_set
          AUTH: auth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-5.0-sharded_cluster
    tags:
      - '5.0'
      - sharded_cluster
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '5.0'
          TOPOLOGY: sharded_cluster
          AUTH: auth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.4-server
    tags:
      - '4.4'
      - server
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.4'
          TOPOLOGY: server
          AUTH: auth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.4-replica_set
    tags:
      - '4.4'
      - replica_set
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.4'
          TOPOLOGY: replica_set
          AUTH: auth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.4-sharded_cluster
    tags:
      - '4.4'
      - sharded_cluster
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.4'
          TOPOLOGY: sharded_cluster
          AUTH: auth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.2-server
    tags:
      - '4.2'
      - server
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.2'
          TOPOLOGY: server
          AUTH: auth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.2-replica_set
    tags:
      - '4.2'
      - replica_set
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.2'
          TOPOLOGY: replica_set
          AUTH: auth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.2-sharded_cluster
    tags:
      - '4.2'
      - sharded_cluster
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.2'
          TOPOLOGY: sharded_cluster
          AUTH: auth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.0-server
    tags:
      - '4.0'
      - server
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.0'
          TOPOLOGY: server
          AUTH: auth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.0-replica_set
    tags:
      - '4.0'
      - replica_set
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.0'
          TOPOLOGY: replica_set
          AUTH: auth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.0-sharded_cluster
    tags:
      - '4.0'
      - sharded_cluster
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.0'
          TOPOLOGY: sharded_cluster
          AUTH: auth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-3.6-server
    tags:
      - '3.6'
      - server
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '3.6'
          TOPOLOGY: server
          AUTH: auth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-3.6-replica_set
    tags:
      - '3.6'
      - replica_set
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '3.6'
          TOPOLOGY: replica_set
          AUTH: auth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-3.6-sharded_cluster
    tags:
      - '3.6'
      - sharded_cluster
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '3.6'
          TOPOLOGY: sharded_cluster
          AUTH: auth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-latest-server-v1-api
    tags:
      - latest
      - server
      - v1-api
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: latest
          TOPOLOGY: server
          REQUIRE_API_VERSION: '1'
          AUTH: auth
      - func: bootstrap kms servers
      - func: run tests
        vars:
          MONGODB_API_VERSION: '1'
          NO_EXIT: ''
  - name: test-atlas-connectivity
    tags:
      - atlas-connect
    commands:
      - func: install dependencies
      - func: run atlas tests
  - name: test-atlas-data-lake
    commands:
      - func: install dependencies
      - func: bootstrap mongohoused
      - func: run data lake tests
  - name: test-load-balancer
    tags:
      - latest
      - sharded_cluster
      - load_balancer
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: latest
          TOPOLOGY: sharded_cluster
          AUTH: auth
          LOAD_BALANCER: 'true'
      - func: start-load-balancer
      - func: run-lb-tests
      - func: stop-load-balancer
  - name: test-auth-kerberos
    tags:
      - auth
      - kerberos
    commands:
      - func: install dependencies
      - func: run kerberos tests
  - name: test-auth-ldap
    tags:
      - auth
      - ldap
    commands:
      - func: install dependencies
      - func: run ldap tests
  - name: test-socks5
    tags: []
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: latest
          TOPOLOGY: replica_set
      - func: bootstrap kms servers
      - func: run socks5 tests
  - name: test-socks5-tls
    tags: []
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          SSL: ssl
          VERSION: latest
          TOPOLOGY: replica_set
      - func: run socks5 tests
        vars:
          SSL: ssl
  - name: test-ocsp-valid-cert-server-staples
    tags:
      - ocsp
    commands:
      - func: run-valid-ocsp-server
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-mustStaple.json
          VERSION: latest
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 1
  - name: test-ocsp-invalid-cert-server-staples
    tags:
      - ocsp
    commands:
      - func: run-revoked-ocsp-server
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-mustStaple.json
          VERSION: latest
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 0
  - name: test-ocsp-valid-cert-server-does-not-staple
    tags:
      - ocsp
    commands:
      - func: run-valid-ocsp-server
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-disableStapling.json
          VERSION: latest
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 1
  - name: test-ocsp-invalid-cert-server-does-not-staple
    tags:
      - ocsp
    commands:
      - func: run-revoked-ocsp-server
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-disableStapling.json
          VERSION: latest
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 0
  - name: test-ocsp-soft-fail
    tags:
      - ocsp
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-disableStapling.json
          VERSION: latest
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 1
  - name: test-ocsp-malicious-invalid-cert-mustStaple-server-does-not-staple
    tags:
      - ocsp
    commands:
      - func: run-revoked-ocsp-server
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-mustStaple-disableStapling.json
          VERSION: latest
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 0
  - name: test-ocsp-malicious-no-responder-mustStaple-server-does-not-staple
    tags:
      - ocsp
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-mustStaple-disableStapling.json
          VERSION: latest
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 0
  - name: test-tls-support-latest
    tags:
      - tls-support
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: latest
          SSL: ssl
          TOPOLOGY: server
      - func: run tls tests
  - name: test-tls-support-5.0
    tags:
      - tls-support
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '5.0'
          SSL: ssl
          TOPOLOGY: server
      - func: run tls tests
  - name: test-tls-support-4.4
    tags:
      - tls-support
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.4'
          SSL: ssl
          TOPOLOGY: server
      - func: run tls tests
  - name: test-tls-support-4.2
    tags:
      - tls-support
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.2'
          SSL: ssl
          TOPOLOGY: server
      - func: run tls tests
  - name: test-latest-ocsp-valid-cert-server-staples
    tags:
      - ocsp
    commands:
      - func: run-valid-ocsp-server
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-mustStaple.json
          VERSION: latest
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 1
  - name: test-latest-ocsp-invalid-cert-server-staples
    tags:
      - ocsp
    commands:
      - func: run-revoked-ocsp-server
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-mustStaple.json
          VERSION: latest
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 0
  - name: test-latest-ocsp-valid-cert-server-does-not-staple
    tags:
      - ocsp
    commands:
      - func: run-valid-ocsp-server
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-disableStapling.json
          VERSION: latest
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 1
  - name: test-latest-ocsp-invalid-cert-server-does-not-staple
    tags:
      - ocsp
    commands:
      - func: run-revoked-ocsp-server
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-disableStapling.json
          VERSION: latest
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 0
  - name: test-latest-ocsp-soft-fail
    tags:
      - ocsp
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-disableStapling.json
          VERSION: latest
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 1
  - name: test-latest-ocsp-malicious-invalid-cert-mustStaple-server-does-not-staple
    tags:
      - ocsp
    commands:
      - func: run-revoked-ocsp-server
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-mustStaple-disableStapling.json
          VERSION: latest
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 0
  - name: test-latest-ocsp-malicious-no-responder-mustStaple-server-does-not-staple
    tags:
      - ocsp
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-mustStaple-disableStapling.json
          VERSION: latest
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 0
  - name: test-5.0-ocsp-valid-cert-server-staples
    tags:
      - ocsp
    commands:
      - func: run-valid-ocsp-server
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-mustStaple.json
          VERSION: '5.0'
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 1
  - name: test-5.0-ocsp-invalid-cert-server-staples
    tags:
      - ocsp
    commands:
      - func: run-revoked-ocsp-server
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-mustStaple.json
          VERSION: '5.0'
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 0
  - name: test-5.0-ocsp-valid-cert-server-does-not-staple
    tags:
      - ocsp
    commands:
      - func: run-valid-ocsp-server
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-disableStapling.json
          VERSION: '5.0'
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 1
  - name: test-5.0-ocsp-invalid-cert-server-does-not-staple
    tags:
      - ocsp
    commands:
      - func: run-revoked-ocsp-server
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-disableStapling.json
          VERSION: '5.0'
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 0
  - name: test-5.0-ocsp-soft-fail
    tags:
      - ocsp
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-disableStapling.json
          VERSION: '5.0'
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 1
  - name: test-5.0-ocsp-malicious-invalid-cert-mustStaple-server-does-not-staple
    tags:
      - ocsp
    commands:
      - func: run-revoked-ocsp-server
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-mustStaple-disableStapling.json
          VERSION: '5.0'
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 0
  - name: test-5.0-ocsp-malicious-no-responder-mustStaple-server-does-not-staple
    tags:
      - ocsp
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-mustStaple-disableStapling.json
          VERSION: '5.0'
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 0
  - name: test-4.4-ocsp-valid-cert-server-staples
    tags:
      - ocsp
    commands:
      - func: run-valid-ocsp-server
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-mustStaple.json
          VERSION: '4.4'
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 1
  - name: test-4.4-ocsp-invalid-cert-server-staples
    tags:
      - ocsp
    commands:
      - func: run-revoked-ocsp-server
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-mustStaple.json
          VERSION: '4.4'
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 0
  - name: test-4.4-ocsp-valid-cert-server-does-not-staple
    tags:
      - ocsp
    commands:
      - func: run-valid-ocsp-server
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-disableStapling.json
          VERSION: '4.4'
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 1
  - name: test-4.4-ocsp-invalid-cert-server-does-not-staple
    tags:
      - ocsp
    commands:
      - func: run-revoked-ocsp-server
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-disableStapling.json
          VERSION: '4.4'
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 0
  - name: test-4.4-ocsp-soft-fail
    tags:
      - ocsp
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-disableStapling.json
          VERSION: '4.4'
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 1
  - name: test-4.4-ocsp-malicious-invalid-cert-mustStaple-server-does-not-staple
    tags:
      - ocsp
    commands:
      - func: run-revoked-ocsp-server
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-mustStaple-disableStapling.json
          VERSION: '4.4'
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 0
  - name: test-4.4-ocsp-malicious-no-responder-mustStaple-server-does-not-staple
    tags:
      - ocsp
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          ORCHESTRATION_FILE: rsa-basic-tls-ocsp-mustStaple-disableStapling.json
          VERSION: '4.4'
          TOPOLOGY: server
          AUTH: auth
      - func: run-ocsp-test
        vars:
          OCSP_TLS_SHOULD_SUCCEED: 0
  - name: aws-latest-auth-test-run-aws-auth-test-with-regular-aws-credentials
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: latest
          AUTH: auth
          ORCHESTRATION_FILE: auth-aws.json
          TOPOLOGY: server
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with regular aws credentials
  - name: aws-latest-auth-test-run-aws-auth-test-with-assume-role-credentials
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: latest
          AUTH: auth
          ORCHESTRATION_FILE: auth-aws.json
          TOPOLOGY: server
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with assume role credentials
  - name: aws-latest-auth-test-run-aws-auth-test-with-aws-EC2-credentials
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: latest
          AUTH: auth
          ORCHESTRATION_FILE: auth-aws.json
          TOPOLOGY: server
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws EC2 credentials
  - name: aws-latest-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: latest
          AUTH: auth
          ORCHESTRATION_FILE: auth-aws.json
          TOPOLOGY: server
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws credentials as environment variables
  - name: aws-latest-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: latest
          AUTH: auth
          ORCHESTRATION_FILE: auth-aws.json
          TOPOLOGY: server
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws credentials and session token as environment variables
  - name: aws-latest-auth-test-run-aws-ECS-auth-test
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: latest
          AUTH: auth
          ORCHESTRATION_FILE: auth-aws.json
          TOPOLOGY: server
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws ECS auth test
  - name: aws-5.0-auth-test-run-aws-auth-test-with-regular-aws-credentials
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '5.0'
          AUTH: auth
          ORCHESTRATION_FILE: auth-aws.json
          TOPOLOGY: server
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with regular aws credentials
  - name: aws-5.0-auth-test-run-aws-auth-test-with-assume-role-credentials
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '5.0'
          AUTH: auth
          ORCHESTRATION_FILE: auth-aws.json
          TOPOLOGY: server
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with assume role credentials
  - name: aws-5.0-auth-test-run-aws-auth-test-with-aws-EC2-credentials
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '5.0'
          AUTH: auth
          ORCHESTRATION_FILE: auth-aws.json
          TOPOLOGY: server
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws EC2 credentials
  - name: aws-5.0-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '5.0'
          AUTH: auth
          ORCHESTRATION_FILE: auth-aws.json
          TOPOLOGY: server
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws credentials as environment variables
  - name: aws-5.0-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '5.0'
          AUTH: auth
          ORCHESTRATION_FILE: auth-aws.json
          TOPOLOGY: server
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws credentials and session token as environment variables
  - name: aws-5.0-auth-test-run-aws-ECS-auth-test
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '5.0'
          AUTH: auth
          ORCHESTRATION_FILE: auth-aws.json
          TOPOLOGY: server
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws ECS auth test
  - name: aws-4.4-auth-test-run-aws-auth-test-with-regular-aws-credentials
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.4'
          AUTH: auth
          ORCHESTRATION_FILE: auth-aws.json
          TOPOLOGY: server
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with regular aws credentials
  - name: aws-4.4-auth-test-run-aws-auth-test-with-assume-role-credentials
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.4'
          AUTH: auth
          ORCHESTRATION_FILE: auth-aws.json
          TOPOLOGY: server
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with assume role credentials
  - name: aws-4.4-auth-test-run-aws-auth-test-with-aws-EC2-credentials
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.4'
          AUTH: auth
          ORCHESTRATION_FILE: auth-aws.json
          TOPOLOGY: server
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws EC2 credentials
  - name: aws-4.4-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.4'
          AUTH: auth
          ORCHESTRATION_FILE: auth-aws.json
          TOPOLOGY: server
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws credentials as environment variables
  - name: aws-4.4-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.4'
          AUTH: auth
          ORCHESTRATION_FILE: auth-aws.json
          TOPOLOGY: server
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws credentials and session token as environment variables
  - name: aws-4.4-auth-test-run-aws-ECS-auth-test
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.4'
          AUTH: auth
          ORCHESTRATION_FILE: auth-aws.json
          TOPOLOGY: server
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws ECS auth test
  - name: run-checks
    tags:
      - run-checks
    commands:
      - func: install dependencies
        vars:
          NODE_LTS_NAME: erbium
      - func: run checks
  - name: run-mongosh-integration-tests
    tags:
      - run-mongosh-integration-tests
    exec_timeout_secs: 3600
    commands:
      - func: install dependencies
        vars:
          NODE_LTS_NAME: fermium
      - func: run mongosh integration tests
  - name: run-custom-snappy-tests
    tags:
      - run-custom-dependency-tests
    commands:
      - func: install dependencies
        vars:
          NODE_LTS_NAME: erbium
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '5.0'
          TOPOLOGY: server
          AUTH: auth
      - func: run custom snappy tests
  - name: run-bson-ext-test
    tags:
      - run-custom-dependency-tests
    commands:
      - func: install dependencies
        vars:
          NODE_LTS_NAME: erbium
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '5.0'
          TOPOLOGY: server
          AUTH: auth
      - func: run bson-ext test
        vars:
          NODE_LTS_NAME: erbium
  - name: run-custom-csfle-tests
    tags:
      - run-custom-dependency-tests
    commands:
      - func: install dependencies
        vars:
          NODE_LTS_NAME: erbium
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: latest
          TOPOLOGY: server
      - func: bootstrap kms servers
      - func: run custom csfle tests
  - name: test-latest-server-noauth
    tags:
      - latest
      - server
      - noauth
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: latest
          TOPOLOGY: server
          AUTH: noauth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-latest-replica_set-noauth
    tags:
      - latest
      - replica_set
      - noauth
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: latest
          TOPOLOGY: replica_set
          AUTH: noauth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-latest-sharded_cluster-noauth
    tags:
      - latest
      - sharded_cluster
      - noauth
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: latest
          TOPOLOGY: sharded_cluster
          AUTH: noauth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-5.0-server-noauth
    tags:
      - '5.0'
      - server
      - noauth
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '5.0'
          TOPOLOGY: server
          AUTH: noauth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-5.0-replica_set-noauth
    tags:
      - '5.0'
      - replica_set
      - noauth
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '5.0'
          TOPOLOGY: replica_set
          AUTH: noauth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-5.0-sharded_cluster-noauth
    tags:
      - '5.0'
      - sharded_cluster
      - noauth
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '5.0'
          TOPOLOGY: sharded_cluster
          AUTH: noauth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.4-server-noauth
    tags:
      - '4.4'
      - server
      - noauth
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.4'
          TOPOLOGY: server
          AUTH: noauth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.4-replica_set-noauth
    tags:
      - '4.4'
      - replica_set
      - noauth
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.4'
          TOPOLOGY: replica_set
          AUTH: noauth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.4-sharded_cluster-noauth
    tags:
      - '4.4'
      - sharded_cluster
      - noauth
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.4'
          TOPOLOGY: sharded_cluster
          AUTH: noauth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.2-server-noauth
    tags:
      - '4.2'
      - server
      - noauth
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.2'
          TOPOLOGY: server
          AUTH: noauth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.2-replica_set-noauth
    tags:
      - '4.2'
      - replica_set
      - noauth
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.2'
          TOPOLOGY: replica_set
          AUTH: noauth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.2-sharded_cluster-noauth
    tags:
      - '4.2'
      - sharded_cluster
      - noauth
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.2'
          TOPOLOGY: sharded_cluster
          AUTH: noauth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.0-server-noauth
    tags:
      - '4.0'
      - server
      - noauth
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.0'
          TOPOLOGY: server
          AUTH: noauth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.0-replica_set-noauth
    tags:
      - '4.0'
      - replica_set
      - noauth
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.0'
          TOPOLOGY: replica_set
          AUTH: noauth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.0-sharded_cluster-noauth
    tags:
      - '4.0'
      - sharded_cluster
      - noauth
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '4.0'
          TOPOLOGY: sharded_cluster
          AUTH: noauth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-3.6-server-noauth
    tags:
      - '3.6'
      - server
      - noauth
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '3.6'
          TOPOLOGY: server
          AUTH: noauth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-3.6-replica_set-noauth
    tags:
      - '3.6'
      - replica_set
      - noauth
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '3.6'
          TOPOLOGY: replica_set
          AUTH: noauth
      - func: bootstrap kms servers
      - func: run tests
  - name: test-3.6-sharded_cluster-noauth
    tags:
      - '3.6'
      - sharded_cluster
      - noauth
    commands:
      - func: install dependencies
      - func: bootstrap mongo-orchestration
        vars:
          VERSION: '3.6'
          TOPOLOGY: sharded_cluster
          AUTH: noauth
      - func: bootstrap kms servers
      - func: run tests
task_groups:
  - name: serverless_task_group
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    setup_group:
      - func: fetch source
      - func: prepare resources
      - command: shell.exec
        params:
          shell: bash
          script: |
            ${PREPARE_SHELL}
            set +o xtrace
            LOADBALANCED=ON \
            SERVERLESS_DRIVERS_GROUP=${SERVERLESS_DRIVERS_GROUP} \
            SERVERLESS_API_PUBLIC_KEY=${SERVERLESS_API_PUBLIC_KEY} \
            SERVERLESS_API_PRIVATE_KEY=${SERVERLESS_API_PRIVATE_KEY} \
              bash ${DRIVERS_TOOLS}/.evergreen/serverless/create-instance.sh
      - command: expansions.update
        params:
          file: serverless-expansion.yml
    teardown_group:
      - func: upload test results
      - command: shell.exec
        params:
          script: |
            ${PREPARE_SHELL}
            set +o xtrace
            SERVERLESS_DRIVERS_GROUP=${SERVERLESS_DRIVERS_GROUP} \
            SERVERLESS_API_PUBLIC_KEY=${SERVERLESS_API_PUBLIC_KEY} \
            SERVERLESS_API_PRIVATE_KEY=${SERVERLESS_API_PRIVATE_KEY} \
            SERVERLESS_INSTANCE_NAME=${SERVERLESS_INSTANCE_NAME} \
              bash ${DRIVERS_TOOLS}/.evergreen/serverless/delete-instance.sh
    tasks:
      - .serverless
pre:
  - func: fetch source
  - func: prepare resources
  - func: windows fix
  - func: fix absolute paths
  - func: make files executable
post:
  - func: upload test results
  - func: upload coverage report
  - func: cleanup
ignore:
  - '*.md'
buildvariants:
  - name: macos-1014-erbium
    display_name: macOS 10.14 Node Erbium
    run_on: macos-1014
    expansions:
      NODE_LTS_NAME: erbium
      CLIENT_ENCRYPTION: true
    tasks: &ref_0
      - test-latest-server
      - test-latest-replica_set
      - test-latest-sharded_cluster
      - test-5.0-server
      - test-5.0-replica_set
      - test-5.0-sharded_cluster
      - test-4.4-server
      - test-4.4-replica_set
      - test-4.4-sharded_cluster
      - test-4.2-server
      - test-4.2-replica_set
      - test-4.2-sharded_cluster
      - test-4.0-server
      - test-4.0-replica_set
      - test-4.0-sharded_cluster
      - test-3.6-server
      - test-3.6-replica_set
      - test-3.6-sharded_cluster
      - test-latest-server-v1-api
      - test-atlas-connectivity
      - test-atlas-data-lake
      - test-auth-kerberos
      - test-auth-ldap
      - test-socks5
      - test-socks5-tls
      - test-ocsp-valid-cert-server-staples
      - test-ocsp-invalid-cert-server-staples
      - test-ocsp-valid-cert-server-does-not-staple
      - test-ocsp-invalid-cert-server-does-not-staple
      - test-ocsp-soft-fail
      - test-ocsp-malicious-invalid-cert-mustStaple-server-does-not-staple
      - test-ocsp-malicious-no-responder-mustStaple-server-does-not-staple
      - test-tls-support-latest
      - test-tls-support-5.0
      - test-tls-support-4.4
      - test-tls-support-4.2
      - test-latest-ocsp-valid-cert-server-staples
      - test-latest-ocsp-invalid-cert-server-staples
      - test-latest-ocsp-valid-cert-server-does-not-staple
      - test-latest-ocsp-invalid-cert-server-does-not-staple
      - test-latest-ocsp-soft-fail
      - test-latest-ocsp-malicious-invalid-cert-mustStaple-server-does-not-staple
      - test-latest-ocsp-malicious-no-responder-mustStaple-server-does-not-staple
      - test-5.0-ocsp-valid-cert-server-staples
      - test-5.0-ocsp-invalid-cert-server-staples
      - test-5.0-ocsp-valid-cert-server-does-not-staple
      - test-5.0-ocsp-invalid-cert-server-does-not-staple
      - test-5.0-ocsp-soft-fail
      - test-5.0-ocsp-malicious-invalid-cert-mustStaple-server-does-not-staple
      - test-5.0-ocsp-malicious-no-responder-mustStaple-server-does-not-staple
      - test-4.4-ocsp-valid-cert-server-staples
      - test-4.4-ocsp-invalid-cert-server-staples
      - test-4.4-ocsp-valid-cert-server-does-not-staple
      - test-4.4-ocsp-invalid-cert-server-does-not-staple
      - test-4.4-ocsp-soft-fail
      - test-4.4-ocsp-malicious-invalid-cert-mustStaple-server-does-not-staple
      - test-4.4-ocsp-malicious-no-responder-mustStaple-server-does-not-staple
  - name: macos-1014-fermium
    display_name: macOS 10.14 Node Fermium
    run_on: macos-1014
    expansions:
      NODE_LTS_NAME: fermium
      CLIENT_ENCRYPTION: true
    tasks: *ref_0
  - name: ubuntu-18.04-erbium
    display_name: Ubuntu 18.04 Node Erbium
    run_on: ubuntu1804-large
    expansions:
      NODE_LTS_NAME: erbium
      CLIENT_ENCRYPTION: true
    tasks: &ref_1
      - test-latest-server
      - test-latest-replica_set
      - test-latest-sharded_cluster
      - test-5.0-server
      - test-5.0-replica_set
      - test-5.0-sharded_cluster
      - test-4.4-server
      - test-4.4-replica_set
      - test-4.4-sharded_cluster
      - test-4.2-server
      - test-4.2-replica_set
      - test-4.2-sharded_cluster
      - test-4.0-server
      - test-4.0-replica_set
      - test-4.0-sharded_cluster
      - test-3.6-server
      - test-3.6-replica_set
      - test-3.6-sharded_cluster
      - test-latest-server-v1-api
      - test-atlas-connectivity
      - test-atlas-data-lake
      - test-load-balancer
      - test-auth-kerberos
      - test-auth-ldap
      - test-socks5
      - test-socks5-tls
      - test-ocsp-valid-cert-server-staples
      - test-ocsp-invalid-cert-server-staples
      - test-ocsp-valid-cert-server-does-not-staple
      - test-ocsp-invalid-cert-server-does-not-staple
      - test-ocsp-soft-fail
      - test-ocsp-malicious-invalid-cert-mustStaple-server-does-not-staple
      - test-ocsp-malicious-no-responder-mustStaple-server-does-not-staple
      - test-tls-support-latest
      - test-tls-support-5.0
      - test-tls-support-4.4
      - test-tls-support-4.2
      - test-latest-ocsp-valid-cert-server-staples
      - test-latest-ocsp-invalid-cert-server-staples
      - test-latest-ocsp-valid-cert-server-does-not-staple
      - test-latest-ocsp-invalid-cert-server-does-not-staple
      - test-latest-ocsp-soft-fail
      - test-latest-ocsp-malicious-invalid-cert-mustStaple-server-does-not-staple
      - test-latest-ocsp-malicious-no-responder-mustStaple-server-does-not-staple
      - test-5.0-ocsp-valid-cert-server-staples
      - test-5.0-ocsp-invalid-cert-server-staples
      - test-5.0-ocsp-valid-cert-server-does-not-staple
      - test-5.0-ocsp-invalid-cert-server-does-not-staple
      - test-5.0-ocsp-soft-fail
      - test-5.0-ocsp-malicious-invalid-cert-mustStaple-server-does-not-staple
      - test-5.0-ocsp-malicious-no-responder-mustStaple-server-does-not-staple
      - test-4.4-ocsp-valid-cert-server-staples
      - test-4.4-ocsp-invalid-cert-server-staples
      - test-4.4-ocsp-valid-cert-server-does-not-staple
      - test-4.4-ocsp-invalid-cert-server-does-not-staple
      - test-4.4-ocsp-soft-fail
      - test-4.4-ocsp-malicious-invalid-cert-mustStaple-server-does-not-staple
      - test-4.4-ocsp-malicious-no-responder-mustStaple-server-does-not-staple
  - name: ubuntu-18.04-fermium
    display_name: Ubuntu 18.04 Node Fermium
    run_on: ubuntu1804-large
    expansions:
      NODE_LTS_NAME: fermium
      CLIENT_ENCRYPTION: true
    tasks: *ref_1
  - name: windows-64-vs2019-erbium
    display_name: Windows (VS2019) Node Erbium
    run_on: windows-64-vs2019-large
    expansions:
      NODE_LTS_NAME: erbium
      MSVS_VERSION: 2019
    tasks: &ref_2
      - test-latest-server
      - test-latest-replica_set
      - test-latest-sharded_cluster
      - test-5.0-server
      - test-5.0-replica_set
      - test-5.0-sharded_cluster
      - test-4.4-server
      - test-4.4-replica_set
      - test-4.4-sharded_cluster
      - test-4.2-server
      - test-4.2-replica_set
      - test-4.2-sharded_cluster
      - test-4.0-server
      - test-4.0-replica_set
      - test-4.0-sharded_cluster
      - test-3.6-server
      - test-3.6-replica_set
      - test-3.6-sharded_cluster
      - test-latest-server-v1-api
      - test-atlas-data-lake
      - test-socks5
      - test-socks5-tls
      - test-ocsp-valid-cert-server-staples
      - test-ocsp-invalid-cert-server-staples
      - test-ocsp-valid-cert-server-does-not-staple
      - test-ocsp-invalid-cert-server-does-not-staple
      - test-ocsp-soft-fail
      - test-ocsp-malicious-invalid-cert-mustStaple-server-does-not-staple
      - test-ocsp-malicious-no-responder-mustStaple-server-does-not-staple
      - test-tls-support-latest
      - test-tls-support-5.0
      - test-tls-support-4.4
      - test-tls-support-4.2
      - test-latest-ocsp-valid-cert-server-staples
      - test-latest-ocsp-invalid-cert-server-staples
      - test-latest-ocsp-valid-cert-server-does-not-staple
      - test-latest-ocsp-invalid-cert-server-does-not-staple
      - test-latest-ocsp-soft-fail
      - test-latest-ocsp-malicious-invalid-cert-mustStaple-server-does-not-staple
      - test-latest-ocsp-malicious-no-responder-mustStaple-server-does-not-staple
      - test-5.0-ocsp-valid-cert-server-staples
      - test-5.0-ocsp-invalid-cert-server-staples
      - test-5.0-ocsp-valid-cert-server-does-not-staple
      - test-5.0-ocsp-invalid-cert-server-does-not-staple
      - test-5.0-ocsp-soft-fail
      - test-5.0-ocsp-malicious-invalid-cert-mustStaple-server-does-not-staple
      - test-5.0-ocsp-malicious-no-responder-mustStaple-server-does-not-staple
      - test-4.4-ocsp-valid-cert-server-staples
      - test-4.4-ocsp-invalid-cert-server-staples
      - test-4.4-ocsp-valid-cert-server-does-not-staple
      - test-4.4-ocsp-invalid-cert-server-does-not-staple
      - test-4.4-ocsp-soft-fail
      - test-4.4-ocsp-malicious-invalid-cert-mustStaple-server-does-not-staple
      - test-4.4-ocsp-malicious-no-responder-mustStaple-server-does-not-staple
  - name: windows-64-vs2019-fermium
    display_name: Windows (VS2019) Node Fermium
    run_on: windows-64-vs2019-large
    expansions:
      NODE_LTS_NAME: fermium
      MSVS_VERSION: 2019
    tasks: *ref_2
  - name: lint
    display_name: lint
    run_on: ubuntu1804-large
    tasks:
      - run-checks
  - name: mongosh_integration_tests
    display_name: mongosh integration tests
    run_on: ubuntu1804-test
    tasks:
      - run-mongosh-integration-tests
  - name: ubuntu1804-test-mongodb-aws
    display_name: MONGODB-AWS Auth test
    run_on: ubuntu1804-test
    expansions:
      NODE_LTS_NAME: erbium
    tasks:
      - aws-latest-auth-test-run-aws-auth-test-with-regular-aws-credentials
      - aws-latest-auth-test-run-aws-auth-test-with-assume-role-credentials
      - aws-latest-auth-test-run-aws-auth-test-with-aws-EC2-credentials
      - aws-latest-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables
      - aws-latest-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables
      - aws-latest-auth-test-run-aws-ECS-auth-test
      - aws-5.0-auth-test-run-aws-auth-test-with-regular-aws-credentials
      - aws-5.0-auth-test-run-aws-auth-test-with-assume-role-credentials
      - aws-5.0-auth-test-run-aws-auth-test-with-aws-EC2-credentials
      - aws-5.0-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables
      - aws-5.0-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables
      - aws-5.0-auth-test-run-aws-ECS-auth-test
      - aws-4.4-auth-test-run-aws-auth-test-with-regular-aws-credentials
      - aws-4.4-auth-test-run-aws-auth-test-with-assume-role-credentials
      - aws-4.4-auth-test-run-aws-auth-test-with-aws-EC2-credentials
      - aws-4.4-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables
      - aws-4.4-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables
      - aws-4.4-auth-test-run-aws-ECS-auth-test
  - name: ubuntu1804-custom-dependency-tests
    display_name: Custom Dependency Version Test
    run_on: ubuntu1804-large
    tasks:
      - run-custom-snappy-tests
      - run-bson-ext-test
      - run-custom-csfle-tests
  - name: ubuntu1804-test-serverless
    display_name: Serverless Test
    run_on: ubuntu1804-test
    expansions:
      NODE_LTS_NAME: erbium
    tasks:
      - serverless_task_group
  - name: no-auth-tests
    display_name: No Auth Tests
    run_on: ubuntu1804-test
    tasks:
      - test-latest-server-noauth
      - test-latest-replica_set-noauth
      - test-latest-sharded_cluster-noauth
      - test-5.0-server-noauth
      - test-5.0-replica_set-noauth
      - test-5.0-sharded_cluster-noauth
      - test-4.4-server-noauth
      - test-4.4-replica_set-noauth
      - test-4.4-sharded_cluster-noauth
      - test-4.2-server-noauth
      - test-4.2-replica_set-noauth
      - test-4.2-sharded_cluster-noauth
      - test-4.0-server-noauth
      - test-4.0-replica_set-noauth
      - test-4.0-sharded_cluster-noauth
      - test-3.6-server-noauth
      - test-3.6-replica_set-noauth
      - test-3.6-sharded_cluster-noauth
