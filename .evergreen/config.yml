stepback: true
command_type: system
exec_timeout_secs: 2100
timeout:
  - command: subprocess.exec
    params:
      binary: ls
      args:
        - '-la'
functions:
  fetch source:
    - command: git.get_project
      params:
        directory: src
        shallow_clone: true
    - command: subprocess.exec
      params:
        working_dir: src
        binary: bash
        env:
          is_patch: ${is_patch}
          project: ${project}
        args:
          - .evergreen/prepare-shell.sh
    - command: expansions.update
      params:
        file: src/expansion.yml
  bootstrap mongo-orchestration:
    - command: subprocess.exec
      params:
        binary: bash
        add_expansions_to_env: true
        env:
          MONGODB_VERSION: ${VERSION}
          TOPOLOGY: ${TOPOLOGY}
          AUTH: ${AUTH}
          SSL: ${SSL}
          ORCHESTRATION_FILE: ${ORCHESTRATION_FILE}
          REQUIRE_API_VERSION: ${REQUIRE_API_VERSION}
          LOAD_BALANCER: ${LOAD_BALANCER}
          COMPRESSOR: ${COMPRESSOR}
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
          MONGODB_BINARIES: ${MONGODB_BINARIES}
        args:
          - src/.evergreen/run-orchestration.sh
    - command: expansions.update
      params:
        file: mo-expansion.yml
  stop mongo-orchestration:
    - command: shell.exec
      params:
        script: |
          bash ${DRIVERS_TOOLS}/.evergreen/stop-orchestration.sh
  bootstrap mongohoused:
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          DRIVERS_TOOLS="${DRIVERS_TOOLS}" bash ${DRIVERS_TOOLS}/.evergreen/atlas_data_lake/pull-mongohouse-image.sh
    - command: shell.exec
      params:
        background: true
        script: |
          ${PREPARE_SHELL}
          DRIVERS_TOOLS="${DRIVERS_TOOLS}" bash ${DRIVERS_TOOLS}/.evergreen/atlas_data_lake/run-mongohouse-image.sh
          sleep 1
          docker ps
  bootstrap kms servers:
    - command: subprocess.exec
      params:
        binary: bash
        working_dir: src
        args:
          - .evergreen/activate-kms-venv.sh
        env:
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
    - command: subprocess.exec
      params:
        background: true
        binary: bash
        working_dir: src
        args:
          - .evergreen/run-kmip-server.sh
        env:
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
    - command: subprocess.exec
      params:
        background: true
        binary: bash
        working_dir: src
        args:
          - .evergreen/run-kms-servers.sh
        env:
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
    - command: subprocess.exec
      params:
        background: true
        working_dir: src
        binary: bash
        args:
          - .evergreen/run-azure-kms-mock-server.sh
        env:
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
  run tests:
    - command: ec2.assume_role
      params:
        role_arn: ${OIDC_AWS_ROLE_ARN}
    - command: subprocess.exec
      type: test
      params:
        env:
          TEST_CSFLE: 'true'
        add_expansions_to_env: true
        working_dir: src
        timeout_secs: 300
        binary: bash
        args:
          - .evergreen/run-tests.sh
  run serverless tests:
    - command: timeout.update
      params:
        exec_timeout_secs: 1800
    - command: ec2.assume_role
      params:
        role_arn: ${OIDC_AWS_ROLE_ARN}
    - command: subprocess.exec
      type: test
      params:
        timeout_secs: 300
        working_dir: src
        binary: bash
        env:
          AUTH: auth
          SSL: ssl
        add_expansions_to_env: true
        args:
          - .evergreen/run-serverless-tests.sh
  start-load-balancer:
    - command: shell.exec
      params:
        script: |
          MONGODB_URI=${MONGODB_URI} bash ${DRIVERS_TOOLS}/.evergreen/run-load-balancer.sh start
    - command: expansions.update
      params:
        file: lb-expansion.yml
  stop-load-balancer:
    - command: shell.exec
      params:
        script: |
          bash ${DRIVERS_TOOLS}/.evergreen/run-load-balancer.sh stop
  run-lb-tests:
    - command: subprocess.exec
      type: test
      params:
        add_expansions_to_env: true
        binary: bash
        working_dir: src
        timeout_secs: 300
        args:
          - .evergreen/run-tests.sh
  run-compression-tests:
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        working_dir: src
        timeout_secs: 300
        add_expansions_to_env: true
        args:
          - .evergreen/run-tests.sh
  install package:
    - command: shell.exec
      params:
        working_dir: src
        script: |
          source ${DRIVERS_TOOLS}/.evergreen/init-node-and-npm-env.sh
          npm install --force ${PACKAGE}
  run lint checks:
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        timeout_secs: 60
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
        binary: bash
        args:
          - ${PROJECT_DIRECTORY}/.evergreen/run-lint-checks.sh
  run unit tests:
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        timeout_secs: 60
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
        binary: bash
        args:
          - ${PROJECT_DIRECTORY}/.evergreen/run-unit-tests.sh
  check types:
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        timeout_secs: 60
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
          TS_VERSION: ${TS_VERSION}
          TS_CHECK: CHECK_TYPES
          TYPES_VERSION: ${TYPES_VERSION}
        binary: bash
        args:
          - ${PROJECT_DIRECTORY}/.evergreen/run-typescript.sh
  check resource management:
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        timeout_secs: 60
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
        binary: bash
        args:
          - ${PROJECT_DIRECTORY}/.evergreen/run-resource-management.sh
  check resource management feature integration:
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        timeout_secs: 60
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
          MONGODB_URI: ${MONGODB_URI}
        binary: bash
        args:
          - ${PROJECT_DIRECTORY}/.evergreen/run-resource-management-feature-integration.sh
  compile driver:
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        timeout_secs: 60
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
          TS_VERSION: ${TS_VERSION}
          TS_CHECK: COMPILE_DRIVER
          TYPES_VERSION: ${TYPES_VERSION}
        binary: bash
        args:
          - ${PROJECT_DIRECTORY}/.evergreen/run-typescript.sh
  reset aws instance profile:
    - command: shell.exec
      params:
        shell: bash
        script: |
          ${PREPARE_SHELL}
          cd "${DRIVERS_TOOLS}/.evergreen/auth_aws"
          if [ -f "./aws_e2e_setup.json" ]; then
            . ./activate-authawsvenv.sh
            python ./lib/aws_assign_instance_profile.py
          fi
  cleanup:
    - command: shell.exec
      params:
        silent: true
        script: |
          ${PREPARE_SHELL}
          rm -rf $DRIVERS_TOOLS || true
  fix absolute paths:
    - command: shell.exec
      params:
        silent: true
        script: |
          ${PREPARE_SHELL}
          for filename in $(find ${DRIVERS_TOOLS} -name \*.json); do
            perl -p -i -e "s|ABSOLUTE_PATH_REPLACEMENT_TOKEN|${DRIVERS_TOOLS}|g" $filename
          done
  windows fix:
    - command: shell.exec
      params:
        silent: true
        script: |
          ${PREPARE_SHELL}
          # for i in $(find ${DRIVERS_TOOLS}/.evergreen ${PROJECT_DIRECTORY}/.evergreen -name \*.sh); do
          #   cat $i | tr -d '\r' > $i.new
          #   mv $i.new $i
          # done
          # Copy client certificate because symlinks do not work on Windows.
          cp ${DRIVERS_TOOLS}/.evergreen/x509gen/client.pem ${MONGO_ORCHESTRATION_HOME}/lib/client.pem
  make files executable:
    - command: shell.exec
      params:
        silent: true
        script: |
          ${PREPARE_SHELL}
          for i in $(find ${DRIVERS_TOOLS}/.evergreen ${PROJECT_DIRECTORY}/.evergreen -name \*.sh); do
            chmod +x $i
          done
  install dependencies:
    - command: subprocess.exec
      type: setup
      params:
        working_dir: src
        binary: bash
        add_expansions_to_env: true
        args:
          - .evergreen/install-dependencies.sh
  remove aws-credential-providers:
    - command: shell.exec
      type: setup
      params:
        shell: bash
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          source $DRIVERS_TOOLS/.evergreen/init-node-and-npm-env.sh
          rm -rf ./node_modules/@aws-sdk/credential-providers
  run atlas tests:
    - command: subprocess.exec
      params:
        working_dir: src
        binary: bash
        env:
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
        args:
          - '-c'
          - ${DRIVERS_TOOLS}/.evergreen/secrets_handling/setup-secrets.sh drivers/atlas_connect
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        binary: bash
        env:
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
          NODE_LTS_VERSION: ${NODE_LTS_VERSION}
        args:
          - .evergreen/run-atlas-tests.sh
  run socks5 tests:
    - command: ec2.assume_role
      params:
        role_arn: ${OIDC_AWS_ROLE_ARN}
    - command: subprocess.exec
      type: test
      params:
        add_expansions_to_env: true
        working_dir: src
        binary: bash
        args:
          - .evergreen/run-socks5-tests.sh
  run kerberos tests:
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        working_dir: src
        env:
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
        args:
          - .evergreen/run-kerberos-tests.sh
  run ldap tests:
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        binary: bash
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
          MONGODB_URI: ${plain_auth_mongodb_uri}
          NODE_LTS_VERSION: ${NODE_LTS_VERSION}
        args:
          - .evergreen/run-ldap-tests.sh
  run data lake tests:
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        binary: bash
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
          MONGODB_URI: mongodb://mhuser:pencil@localhost
          NODE_LTS_VERSION: ${NODE_LTS_VERSION}
        args:
          - .evergreen/run-data-lake-tests.sh
  run tls tests:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          export PROJECT_DIRECTORY="$(pwd)"
          export NODE_LTS_VERSION=${NODE_LTS_VERSION}
          export DRIVERS_TOOLS="${DRIVERS_TOOLS}"
          export MONGODB_URI="${MONGODB_URI}"

          bash ${PROJECT_DIRECTORY}/.evergreen/run-tls-tests.sh
  add aws auth variables to file:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        silent: true
        script: |
          cat <<EOF > ${DRIVERS_TOOLS}/.evergreen/auth_aws/aws_e2e_setup.json
          {
              "iam_auth_ecs_account" : "${iam_auth_ecs_account}",
              "iam_auth_ecs_secret_access_key" : "${iam_auth_ecs_secret_access_key}",
              "iam_auth_ecs_account_arn": "arn:aws:iam::557821124784:user/authtest_fargate_user",
              "iam_auth_ecs_cluster": "${iam_auth_ecs_cluster}",
              "iam_auth_ecs_task_definition": "${iam_auth_ecs_task_definition_ubuntu2004}",
              "iam_auth_ecs_subnet_a": "${iam_auth_ecs_subnet_a}",
              "iam_auth_ecs_subnet_b": "${iam_auth_ecs_subnet_b}",
              "iam_auth_ecs_security_group": "${iam_auth_ecs_security_group}",
              "iam_auth_assume_aws_account" : "${iam_auth_assume_aws_account}",
              "iam_auth_assume_aws_secret_access_key" : "${iam_auth_assume_aws_secret_access_key}",
              "iam_auth_assume_role_name" : "${iam_auth_assume_role_name}",
              "iam_auth_ec2_instance_account" : "${iam_auth_ec2_instance_account}",
              "iam_auth_ec2_instance_secret_access_key" : "${iam_auth_ec2_instance_secret_access_key}",
              "iam_auth_ec2_instance_profile" : "${iam_auth_ec2_instance_profile}",
              "iam_auth_assume_web_role_name": "${iam_auth_assume_web_role_name}",
              "iam_web_identity_issuer": "${iam_web_identity_issuer}",
              "iam_web_identity_rsa_key": "${iam_web_identity_rsa_key}",
              "iam_web_identity_jwks_uri": "${iam_web_identity_jwks_uri}",
              "iam_web_identity_token_file": "${iam_web_identity_token_file}"
          }
          EOF
  setup aws env:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        shell: bash
        script: |
          ${PREPARE_SHELL}
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws
          . ./activate-authawsvenv.sh
          cd -
  run aws auth test with regular aws credentials:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        shell: bash
        script: |
          ${PREPARE_SHELL}
          set -ex
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws
          . ./activate-authawsvenv.sh
          python aws_tester.py regular
    - command: shell.exec
      type: test
      params:
        working_dir: src
        silent: true
        script: |
          cat <<'EOF' > "${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh"
            alias urlencode='python3 -c "import sys, urllib.parse as ulp; sys.stdout.write(ulp.quote_plus(sys.argv[1]))"'
            USER=$(urlencode ${iam_auth_ecs_account})
            PASS=$(urlencode ${iam_auth_ecs_secret_access_key})
            export MONGODB_URI="mongodb://$USER:$PASS@localhost:27017/aws?authMechanism=MONGODB-AWS"
          EOF
    - command: shell.exec
      type: test
      params:
        env:
          MONGODB_AWS_SDK: ${MONGODB_AWS_SDK}
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          ${PROJECT_DIRECTORY}/.evergreen/run-mongodb-aws-test.sh
  run aws auth test with assume role credentials:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        shell: bash
        script: |
          ${PREPARE_SHELL}
          set -ex
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws
          . ./activate-authawsvenv.sh
          python aws_tester.py assume-role
    - command: shell.exec
      type: test
      params:
        working_dir: src
        silent: true
        script: |
          cat <<'EOF' > "${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh"
            alias urlencode='python3 -c "import sys, urllib.parse as ulp; sys.stdout.write(ulp.quote_plus(sys.argv[1]))"'
            alias jsonkey='python3 -c "import json,sys;sys.stdout.write(json.load(sys.stdin)[sys.argv[1]])" < ${DRIVERS_TOOLS}/.evergreen/auth_aws/creds.json'
            USER=$(jsonkey AccessKeyId)
            USER=$(urlencode $USER)
            PASS=$(jsonkey SecretAccessKey)
            PASS=$(urlencode $PASS)
            SESSION_TOKEN=$(jsonkey SessionToken)
            SESSION_TOKEN=$(urlencode $SESSION_TOKEN)
            export MONGODB_URI="mongodb://$USER:$PASS@localhost:27017/aws?authMechanism=MONGODB-AWS&authMechanismProperties=AWS_SESSION_TOKEN:$SESSION_TOKEN"
          EOF
    - command: shell.exec
      type: test
      params:
        env:
          MONGODB_AWS_SDK: ${MONGODB_AWS_SDK}
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          ${PROJECT_DIRECTORY}/.evergreen/run-mongodb-aws-test.sh
  run aws auth test with aws EC2 credentials:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        shell: bash
        script: |
          ${PREPARE_SHELL}
          # Write an empty prepare_mongodb_aws so no auth environment variables
          # are set.
          echo "" > "${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh"
          set -ex
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws
          . ./activate-authawsvenv.sh
          python aws_tester.py ec2
    - command: shell.exec
      type: test
      params:
        env:
          MONGODB_AWS_SDK: ${MONGODB_AWS_SDK}
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          export IS_EC2=true
          ${PROJECT_DIRECTORY}/.evergreen/run-mongodb-aws-test.sh
  run aws auth test with aws credentials as environment variables:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        silent: true
        shell: bash
        script: |
          set -ex
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws
          . ./activate-authawsvenv.sh
          python aws_tester.py regular
          cd -
          cat <<EOF > "${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh"
            export AWS_ACCESS_KEY_ID=${iam_auth_ecs_account}
            export AWS_SECRET_ACCESS_KEY=${iam_auth_ecs_secret_access_key}
            export MONGODB_URI="mongodb://localhost:27017/aws?authMechanism=MONGODB-AWS"
          EOF
    - command: shell.exec
      type: test
      params:
        env:
          MONGODB_AWS_SDK: ${MONGODB_AWS_SDK}
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          ${PROJECT_DIRECTORY}/.evergreen/run-mongodb-aws-test.sh
  run aws auth test with aws credentials and session token as environment variables:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        silent: true
        shell: bash
        script: |
          set -ex
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws
          . ./activate-authawsvenv.sh
          python aws_tester.py assume-role
          cd -
          cat <<'EOF' > "${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh"
            export AWS_ACCESS_KEY_ID=$(jq -r '.AccessKeyId' ${DRIVERS_TOOLS}/.evergreen/auth_aws/creds.json)
            export AWS_SECRET_ACCESS_KEY=$(jq -r '.SecretAccessKey' ${DRIVERS_TOOLS}/.evergreen/auth_aws/creds.json)
            export AWS_SESSION_TOKEN=$(jq -r '.SessionToken' ${DRIVERS_TOOLS}/.evergreen/auth_aws/creds.json)
            export MONGODB_URI="mongodb://localhost:27017/aws?authMechanism=MONGODB-AWS"
          EOF
    - command: shell.exec
      type: test
      params:
        add_expansions_to_env: true
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          ${PROJECT_DIRECTORY}/.evergreen/run-mongodb-aws-test.sh
  run aws auth test AssumeRoleWithWebIdentity with AWS_ROLE_SESSION_NAME set:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        silent: true
        shell: bash
        script: |
          set -ex
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws
          . ./activate-authawsvenv.sh
          python aws_tester.py web-identity
          cd -
          cat <<'EOF' > "${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh"
            export AWS_WEB_IDENTITY_TOKEN_FILE=${iam_web_identity_token_file}
            export AWS_ROLE_ARN=${iam_auth_assume_web_role_name}
            export AWS_ROLE_SESSION_NAME='test'
            export MONGODB_URI="mongodb://localhost:27017/aws?authMechanism=MONGODB-AWS"
          EOF
    - command: shell.exec
      type: test
      params:
        env:
          MONGODB_AWS_SDK: ${MONGODB_AWS_SDK}
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          ${PROJECT_DIRECTORY}/.evergreen/run-mongodb-aws-test.sh
  run aws auth test AssumeRoleWithWebIdentity with AWS_ROLE_SESSION_NAME unset:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        silent: true
        shell: bash
        script: |
          set -ex
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws
          . ./activate-authawsvenv.sh
          python aws_tester.py web-identity
          cd -
          cat <<'EOF' > "${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh"
            export AWS_WEB_IDENTITY_TOKEN_FILE=${iam_web_identity_token_file}
            export AWS_ROLE_ARN=${iam_auth_assume_web_role_name}
            export MONGODB_URI="mongodb://localhost:27017/aws?authMechanism=MONGODB-AWS"
          EOF
    - command: shell.exec
      type: test
      params:
        env:
          MONGODB_AWS_SDK: ${MONGODB_AWS_SDK}
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          ${PROJECT_DIRECTORY}/.evergreen/run-mongodb-aws-test.sh
  run aws ECS auth test:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        env:
          MONGODB_AWS_SDK: ${MONGODB_AWS_SDK}
        shell: bash
        script: >
          ${PREPARE_SHELL}

          AUTH_AWS_DIR=${DRIVERS_TOOLS}/.evergreen/auth_aws

          ECS_SRC_DIR=$AUTH_AWS_DIR/src


          # pack up project directory to ssh it to the container

          mkdir -p $ECS_SRC_DIR/.evergreen


          set -ex


          echo "export MONGODB_AWS_SDK=$MONGODB_AWS_SDK" >> $PROJECT_DIRECTORY/.evergreen/run-mongodb-aws-ecs-test.sh

          echo "if [ $MONGODB_AWS_SDK = 'false' ]; then rm -rf ./node_modules/@aws-sdk/credential-providers; fi" >>
          $PROJECT_DIRECTORY/.evergreen/run-mongodb-aws-ecs-test.sh

          echo "npm run check:aws" >> $PROJECT_DIRECTORY/.evergreen/run-mongodb-aws-ecs-test.sh


          cp $PROJECT_DIRECTORY/.evergreen/run-mongodb-aws-ecs-test.sh $ECS_SRC_DIR/.evergreen


          cd ..

          tar -czf src.tgz src drivers-tools

          mv src.tgz $ECS_SRC_DIR/src.tgz



          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws

          . ./activate-authawsvenv.sh

          export MONGODB_BINARIES="${MONGODB_BINARIES}";

          export PROJECT_DIRECTORY=$ECS_SRC_DIR;

          python aws_tester.py ecs
  run custom csfle tests:
    - command: ec2.assume_role
      params:
        role_arn: ${OIDC_AWS_ROLE_ARN}
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        add_expansions_to_env: true
        binary: bash
        args:
          - .evergreen/run-custom-csfle-tests.sh
  run lambda handler example tests:
    - command: subprocess.exec
      params:
        working_dir: src
        timeout_secs: 60
        env:
          MONGODB_URI: ${MONGODB_URI}
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
        binary: bash
        args:
          - ${PROJECT_DIRECTORY}/.evergreen/run-lambda-tests.sh
  run lambda handler example tests with aws auth:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        silent: true
        shell: bash
        script: |
          set -ex
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws
          . ./activate-authawsvenv.sh
          python aws_tester.py regular
          cd -
          cat <<EOF > "${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh"
            export AWS_ACCESS_KEY_ID=${iam_auth_ecs_account}
            export AWS_SECRET_ACCESS_KEY=${iam_auth_ecs_secret_access_key}
            export MONGODB_URI="mongodb://localhost:27017/aws?authMechanism=MONGODB-AWS"
          EOF
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          ${PROJECT_DIRECTORY}/.evergreen/run-lambda-aws-tests.sh
  upload test results:
    - command: attach.xunit_results
      params:
        file: src/xunit.xml
  upload coverage report:
    - command: shell.exec
      params:
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          npx nyc report --reporter=json
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/coverage/coverage-final.json
        optional: true
        remote_file: mongo-node-driver/${revision}/${version_id}/coverage.${build_variant}.${task_name}.json
        bucket: mciuploads
        permissions: public-read
        content_type: application/json
        display_name: Raw Coverage Report
  download and merge coverage:
    - command: shell.exec
      params:
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          export AWS_ACCESS_KEY_ID=${aws_key}
          export AWS_SECRET_ACCESS_KEY=${aws_secret}

          # Download all the task coverage files.
          # NOTE: All coverage files are too large for V8 to handle the resulting call to
          #       JSON.stringify from within nyc, so with stick to Fermiun to include the
          #       compression tests.
          aws s3 cp --recursive s3://mciuploads/mongo-node-driver/${revision}/${version_id}/ \
            coverage/ \
            --exclude "*rhel80-large*" \
            --include "*fermiun"

          # npx does not recognize the dependency so install it directly.
          npm install @istanbuljs/nyc-config-typescript
          cd coverage
          sed -i'' -e 's/\/data\/mci\/.\{32\}\/src\///g' *
          ls -la
          cd ..
          npx nyc merge coverage/ merged-coverage/coverage.json
          npx nyc report -t merged-coverage/ --reporter=html --report-dir coverage-report

          aws s3 cp coverage-report/ \
            s3://mciuploads/mongo-node-driver/${revision}/${version_id}/coverage/ \
            --recursive \
            --acl public-read \
            --region us-east-1
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/coverage-report/index.html
        remote_file: mongo-node-driver/${revision}/${version_id}/coverage/index.html
        bucket: mciuploads
        permissions: public-read
        content_type: text/html
        display_name: Coverage Report HTML
  run spec driver benchmarks:
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          MONGODB_URI: ${MONGODB_URI}
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
          MONGODB_CLIENT_OPTIONS: ${MONGODB_CLIENT_OPTIONS}
        binary: bash
        args:
          - ${PROJECT_DIRECTORY}/.evergreen/run-benchmarks.sh
  run x509 auth tests:
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          MONGODB_URI: ${MONGODB_URI}
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
        binary: bash
        args:
          - ${PROJECT_DIRECTORY}/.evergreen/run-x509-tests.sh
  install mongodb-client-encryption:
    - command: subprocess.exec
      type: setup
      params:
        working_dir: src
        env:
          INSTALL_DIR: mongodb-client-encryption
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          DRIVERS_TOOLS: ${DRIVERS_TOOLS}
        binary: bash
        args:
          - ${PROJECT_DIRECTORY}/.evergreen/install-mongodb-client-encryption.sh
tasks:
  - name: test-atlas-data-lake
    tags:
      - datalake
      - mongohouse
    commands:
      - func: install dependencies
      - func: bootstrap mongohoused
      - func: run data lake tests
  - name: test-serverless
    tags:
      - serverless
    commands:
      - func: install dependencies
      - func: bootstrap kms servers
      - func: run serverless tests
  - name: test-gcpkms-task
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NPM_VERSION, value: '9'}
      - func: install dependencies
      - command: subprocess.exec
        type: setup
        params:
          binary: bash
          env:
            DRIVERS_TOOLS: ${DRIVERS_TOOLS}
          args:
            - src/.evergreen/run-deployed-gcp-kms-tests.sh
  - name: test-gcpkms-fail-task
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NPM_VERSION, value: '9'}
            - {key: VERSION, value: latest}
            - {key: TOPOLOGY, value: server}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - command: subprocess.exec
        type: test
        params:
          binary: bash
          env:
            EXPECTED_GCPKMS_OUTCOME: failure
          args:
            - src/.evergreen/run-gcp-kms-tests.sh
  - name: test-azurekms-task
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NPM_VERSION, value: '9'}
      - func: install dependencies
      - command: subprocess.exec
        type: setup
        params:
          binary: bash
          env:
            DRIVERS_TOOLS: ${DRIVERS_TOOLS}
          args:
            - src/.evergreen/run-deployed-azure-kms-tests.sh
  - name: test-azurekms-fail-task
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NPM_VERSION, value: '9'}
            - {key: VERSION, value: latest}
            - {key: TOPOLOGY, value: server}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - command: subprocess.exec
        type: test
        params:
          binary: bash
          env:
            EXPECTED_AZUREKMS_OUTCOME: failure
          args:
            - src/.evergreen/run-azure-kms-tests.sh
  - name: oidc-auth-test-k8s-latest-eks
    commands:
      - func: install dependencies
      - command: subprocess.exec
        type: test
        params:
          working_dir: src
          binary: bash
          env:
            DRIVERS_TOOLS: ${DRIVERS_TOOLS}
            PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
            ENVIRONMENT: k8s
            K8S_VARIANT: eks
            SCRIPT: run-oidc-prose-tests.sh
          include_expansions_in_env:
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY
            - AWS_SESSION_TOKEN
          args:
            - .evergreen/run-oidc-tests-k8s.sh
  - name: oidc-auth-test-k8s-latest-gke
    commands:
      - func: install dependencies
      - command: subprocess.exec
        type: test
        params:
          working_dir: src
          binary: bash
          env:
            DRIVERS_TOOLS: ${DRIVERS_TOOLS}
            PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
            ENVIRONMENT: k8s
            K8S_VARIANT: gke
            SCRIPT: run-oidc-prose-tests.sh
          include_expansions_in_env:
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY
            - AWS_SESSION_TOKEN
          args:
            - .evergreen/run-oidc-tests-k8s.sh
  - name: oidc-auth-test-k8s-latest-aks
    commands:
      - func: install dependencies
      - command: subprocess.exec
        type: test
        params:
          working_dir: src
          binary: bash
          env:
            DRIVERS_TOOLS: ${DRIVERS_TOOLS}
            PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
            ENVIRONMENT: k8s
            K8S_VARIANT: aks
            SCRIPT: run-oidc-prose-tests.sh
          include_expansions_in_env:
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY
            - AWS_SESSION_TOKEN
          args:
            - .evergreen/run-oidc-tests-k8s.sh
  - name: oidc-auth-test-azure-latest
    commands:
      - func: install dependencies
      - command: subprocess.exec
        type: test
        params:
          working_dir: src
          binary: bash
          env:
            DRIVERS_TOOLS: ${DRIVERS_TOOLS}
            PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
            ENVIRONMENT: azure
            SCRIPT: run-oidc-prose-tests.sh
          args:
            - .evergreen/run-oidc-tests-azure.sh
      - command: subprocess.exec
        type: test
        params:
          working_dir: src
          binary: bash
          env:
            DRIVERS_TOOLS: ${DRIVERS_TOOLS}
            PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
            ENVIRONMENT: azure
            SCRIPT: run-oidc-unified-tests.sh
          args:
            - .evergreen/run-oidc-tests-azure.sh
  - name: oidc-auth-test-test-latest
    commands:
      - func: install dependencies
      - command: subprocess.exec
        type: test
        params:
          working_dir: src
          binary: bash
          env:
            DRIVERS_TOOLS: ${DRIVERS_TOOLS}
            PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
            ENVIRONMENT: test
            SCRIPT: run-oidc-prose-tests.sh
          args:
            - .evergreen/run-oidc-tests-test.sh
      - command: subprocess.exec
        type: test
        params:
          working_dir: src
          binary: bash
          env:
            DRIVERS_TOOLS: ${DRIVERS_TOOLS}
            PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
            ENVIRONMENT: test
            SCRIPT: run-oidc-unified-tests.sh
          args:
            - .evergreen/run-oidc-tests-test.sh
  - name: oidc-auth-test-gcp-latest
    commands:
      - func: install dependencies
      - command: subprocess.exec
        type: test
        params:
          working_dir: src
          binary: bash
          env:
            DRIVERS_TOOLS: ${DRIVERS_TOOLS}
            PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
            ENVIRONMENT: gcp
            SCRIPT: run-oidc-prose-tests.sh
          args:
            - .evergreen/run-oidc-tests-gcp.sh
  - name: test-aws-lambda-deployed
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NPM_VERSION, value: '9'}
      - func: install dependencies
      - command: ec2.assume_role
        params:
          role_arn: ${LAMBDA_AWS_ROLE_ARN}
          duration_seconds: 3600
      - command: subprocess.exec
        params:
          working_dir: src
          binary: bash
          add_expansions_to_env: true
          args:
            - ${DRIVERS_TOOLS}/.evergreen/aws_lambda/run-deployed-lambda-aws-tests.sh
          env:
            TEST_LAMBDA_DIRECTORY: ${PROJECT_DIRECTORY}/test/lambda
            AWS_REGION: us-east-1
  - name: test-search-index-helpers
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NODE_LTS_VERSION, value: '20'}
      - func: install dependencies
      - command: subprocess.exec
        type: test
        params:
          working_dir: src
          binary: bash
          add_expansions_to_env: true
          args:
            - .evergreen/run-search-index-management-tests.sh
  - name: test-latest-server
    tags:
      - latest
      - server
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: TOPOLOGY, value: server}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-latest-replica_set
    tags:
      - latest
      - replica_set
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: TOPOLOGY, value: replica_set}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-latest-sharded_cluster
    tags:
      - latest
      - sharded_cluster
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-rapid-server
    tags:
      - rapid
      - server
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: rapid}
            - {key: TOPOLOGY, value: server}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-rapid-replica_set
    tags:
      - rapid
      - replica_set
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: rapid}
            - {key: TOPOLOGY, value: replica_set}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-rapid-sharded_cluster
    tags:
      - rapid
      - sharded_cluster
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: rapid}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-8.0-server
    tags:
      - '8.0'
      - server
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '8.0'}
            - {key: TOPOLOGY, value: server}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-8.0-replica_set
    tags:
      - '8.0'
      - replica_set
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '8.0'}
            - {key: TOPOLOGY, value: replica_set}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-8.0-sharded_cluster
    tags:
      - '8.0'
      - sharded_cluster
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '8.0'}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-7.0-server
    tags:
      - '7.0'
      - server
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '7.0'}
            - {key: TOPOLOGY, value: server}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-7.0-replica_set
    tags:
      - '7.0'
      - replica_set
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '7.0'}
            - {key: TOPOLOGY, value: replica_set}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-7.0-sharded_cluster
    tags:
      - '7.0'
      - sharded_cluster
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '7.0'}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-6.0-server
    tags:
      - '6.0'
      - server
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '6.0'}
            - {key: TOPOLOGY, value: server}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-6.0-replica_set
    tags:
      - '6.0'
      - replica_set
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '6.0'}
            - {key: TOPOLOGY, value: replica_set}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-6.0-sharded_cluster
    tags:
      - '6.0'
      - sharded_cluster
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '6.0'}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-5.0-server
    tags:
      - '5.0'
      - server
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '5.0'}
            - {key: TOPOLOGY, value: server}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-5.0-replica_set
    tags:
      - '5.0'
      - replica_set
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '5.0'}
            - {key: TOPOLOGY, value: replica_set}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-5.0-sharded_cluster
    tags:
      - '5.0'
      - sharded_cluster
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '5.0'}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.4-server
    tags:
      - '4.4'
      - server
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.4'}
            - {key: TOPOLOGY, value: server}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.4-replica_set
    tags:
      - '4.4'
      - replica_set
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.4'}
            - {key: TOPOLOGY, value: replica_set}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.4-sharded_cluster
    tags:
      - '4.4'
      - sharded_cluster
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.4'}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.2-server
    tags:
      - '4.2'
      - server
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.2'}
            - {key: TOPOLOGY, value: server}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.2-replica_set
    tags:
      - '4.2'
      - replica_set
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.2'}
            - {key: TOPOLOGY, value: replica_set}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.2-sharded_cluster
    tags:
      - '4.2'
      - sharded_cluster
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.2'}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.0-server
    tags:
      - '4.0'
      - server
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.0'}
            - {key: TOPOLOGY, value: server}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.0-replica_set
    tags:
      - '4.0'
      - replica_set
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.0'}
            - {key: TOPOLOGY, value: replica_set}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.0-sharded_cluster
    tags:
      - '4.0'
      - sharded_cluster
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.0'}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: auth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-latest-server-v1-api
    tags:
      - latest
      - server
      - v1-api
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: TOPOLOGY, value: server}
            - {key: REQUIRE_API_VERSION, value: '1'}
            - {key: MONGODB_API_VERSION, value: '1'}
            - {key: AUTH, value: auth}
            - {key: TEST_CSFLE, value: 'true'}
            - {key: CLIENT_ENCRYPTION, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-x509-authentication
    tags:
      - latest
      - auth
      - x509
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: noauth}
            - {key: SSL, value: ssl}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: run x509 auth tests
  - name: test-atlas-connectivity
    tags:
      - atlas-connect
    commands:
      - func: install dependencies
      - func: run atlas tests
  - name: test-5.0-load-balanced
    tags:
      - latest
      - sharded_cluster
      - load_balancer
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '5.0'}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: auth}
            - {key: LOAD_BALANCER, value: 'true'}
            - {key: CLIENT_ENCRYPTION, value: 'false'}
            - {key: TEST_CSFLE, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: start-load-balancer
      - func: run-lb-tests
      - func: stop-load-balancer
  - name: test-6.0-load-balanced
    tags:
      - latest
      - sharded_cluster
      - load_balancer
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '6.0'}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: auth}
            - {key: LOAD_BALANCER, value: 'true'}
            - {key: CLIENT_ENCRYPTION, value: 'false'}
            - {key: TEST_CSFLE, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: start-load-balancer
      - func: run-lb-tests
      - func: stop-load-balancer
  - name: test-7.0-load-balanced
    tags:
      - latest
      - sharded_cluster
      - load_balancer
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '7.0'}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: auth}
            - {key: LOAD_BALANCER, value: 'true'}
            - {key: CLIENT_ENCRYPTION, value: 'false'}
            - {key: TEST_CSFLE, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: start-load-balancer
      - func: run-lb-tests
      - func: stop-load-balancer
  - name: test-8.0-load-balanced
    tags:
      - latest
      - sharded_cluster
      - load_balancer
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '8.0'}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: auth}
            - {key: LOAD_BALANCER, value: 'true'}
            - {key: CLIENT_ENCRYPTION, value: 'false'}
            - {key: TEST_CSFLE, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: start-load-balancer
      - func: run-lb-tests
      - func: stop-load-balancer
  - name: test-rapid-load-balanced
    tags:
      - latest
      - sharded_cluster
      - load_balancer
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: rapid}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: auth}
            - {key: LOAD_BALANCER, value: 'true'}
            - {key: CLIENT_ENCRYPTION, value: 'false'}
            - {key: TEST_CSFLE, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: start-load-balancer
      - func: run-lb-tests
      - func: stop-load-balancer
  - name: test-latest-load-balanced
    tags:
      - latest
      - sharded_cluster
      - load_balancer
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: auth}
            - {key: LOAD_BALANCER, value: 'true'}
            - {key: CLIENT_ENCRYPTION, value: 'false'}
            - {key: TEST_CSFLE, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: start-load-balancer
      - func: run-lb-tests
      - func: stop-load-balancer
  - name: test-auth-kerberos
    tags:
      - auth
      - kerberos
    commands:
      - func: install dependencies
      - func: run kerberos tests
  - name: test-auth-ldap
    tags:
      - auth
      - ldap
    commands:
      - func: install dependencies
      - func: run ldap tests
  - name: test-socks5
    tags: []
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: TOPOLOGY, value: replica_set}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run socks5 tests
  - name: test-socks5-csfle
    tags:
      - socks5-csfle
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: TOPOLOGY, value: replica_set}
            - {key: TEST_SOCKS5_CSFLE, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run socks5 tests
  - name: test-socks5-tls
    tags: []
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: SSL, value: ssl}
            - {key: VERSION, value: latest}
            - {key: TOPOLOGY, value: replica_set}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: run socks5 tests
  - name: test-snappy-compression
    tags:
      - latest
      - snappy
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: TOPOLOGY, value: replica_set}
            - {key: AUTH, value: auth}
            - {key: COMPRESSOR, value: snappy}
            - {key: CLIENT_ENCRYPTION, value: 'false'}
            - {key: TEST_CSFLE, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: run-compression-tests
  - name: test-zstd-1.x-compression
    tags:
      - latest
      - zstd
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: TOPOLOGY, value: replica_set}
            - {key: AUTH, value: auth}
            - {key: COMPRESSOR, value: zstd}
            - {key: CLIENT_ENCRYPTION, value: 'false'}
            - {key: TEST_CSFLE, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: install package
        vars:
          PACKAGE: '@mongodb-js/zstd@1.x'
      - func: run-compression-tests
  - name: test-zstd-2.x-compression
    tags:
      - latest
      - zstd
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: TOPOLOGY, value: replica_set}
            - {key: AUTH, value: auth}
            - {key: COMPRESSOR, value: zstd}
            - {key: CLIENT_ENCRYPTION, value: 'false'}
            - {key: TEST_CSFLE, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: run-compression-tests
  - name: test-tls-support-latest
    tags:
      - tls-support
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: SSL, value: ssl}
            - {key: TOPOLOGY, value: server}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: run tls tests
  - name: test-tls-support-8.0
    tags:
      - tls-support
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '8.0'}
            - {key: SSL, value: ssl}
            - {key: TOPOLOGY, value: server}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: run tls tests
  - name: test-tls-support-7.0
    tags:
      - tls-support
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '7.0'}
            - {key: SSL, value: ssl}
            - {key: TOPOLOGY, value: server}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: run tls tests
  - name: test-tls-support-6.0
    tags:
      - tls-support
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '6.0'}
            - {key: SSL, value: ssl}
            - {key: TOPOLOGY, value: server}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: run tls tests
  - name: test-tls-support-5.0
    tags:
      - tls-support
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '5.0'}
            - {key: SSL, value: ssl}
            - {key: TOPOLOGY, value: server}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: run tls tests
  - name: test-tls-support-4.4
    tags:
      - tls-support
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.4'}
            - {key: SSL, value: ssl}
            - {key: TOPOLOGY, value: server}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: run tls tests
  - name: test-tls-support-4.2
    tags:
      - tls-support
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.2'}
            - {key: SSL, value: ssl}
            - {key: TOPOLOGY, value: server}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: run tls tests
  - name: aws-latest-auth-test-run-aws-auth-test-with-regular-aws-credentials
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with regular aws credentials
  - name: aws-latest-auth-test-run-aws-auth-test-with-assume-role-credentials
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with assume role credentials
  - name: aws-latest-auth-test-run-aws-auth-test-with-aws-EC2-credentials
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws EC2 credentials
  - name: aws-latest-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws credentials as environment variables
  - name: aws-latest-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws credentials and session token as environment variables
  - name: aws-latest-auth-test-run-aws-ECS-auth-test
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws ECS auth test
  - name: aws-latest-auth-test-run-aws-auth-test-AssumeRoleWithWebIdentity-with-AWS_ROLE_SESSION_NAME-unset
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test AssumeRoleWithWebIdentity with AWS_ROLE_SESSION_NAME unset
  - name: aws-latest-auth-test-run-aws-auth-test-AssumeRoleWithWebIdentity-with-AWS_ROLE_SESSION_NAME-set
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test AssumeRoleWithWebIdentity with AWS_ROLE_SESSION_NAME set
  - name: aws-latest-auth-test-run-aws-auth-test-with-regular-aws-credentials-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws auth test with regular aws credentials
  - name: aws-latest-auth-test-run-aws-auth-test-with-assume-role-credentials-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws auth test with assume role credentials
  - name: aws-latest-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws auth test with aws credentials as environment variables
  - name: >-
      aws-latest-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws auth test with aws credentials and session token as environment variables
  - name: aws-latest-auth-test-run-aws-ECS-auth-test-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws ECS auth test
  - name: aws-8.0-auth-test-run-aws-auth-test-with-regular-aws-credentials
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '8.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with regular aws credentials
  - name: aws-8.0-auth-test-run-aws-auth-test-with-assume-role-credentials
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '8.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with assume role credentials
  - name: aws-8.0-auth-test-run-aws-auth-test-with-aws-EC2-credentials
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '8.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws EC2 credentials
  - name: aws-8.0-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '8.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws credentials as environment variables
  - name: aws-8.0-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '8.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws credentials and session token as environment variables
  - name: aws-8.0-auth-test-run-aws-ECS-auth-test
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '8.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws ECS auth test
  - name: aws-8.0-auth-test-run-aws-auth-test-AssumeRoleWithWebIdentity-with-AWS_ROLE_SESSION_NAME-unset
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '8.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test AssumeRoleWithWebIdentity with AWS_ROLE_SESSION_NAME unset
  - name: aws-8.0-auth-test-run-aws-auth-test-AssumeRoleWithWebIdentity-with-AWS_ROLE_SESSION_NAME-set
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '8.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test AssumeRoleWithWebIdentity with AWS_ROLE_SESSION_NAME set
  - name: aws-8.0-auth-test-run-aws-auth-test-with-regular-aws-credentials-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '8.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws auth test with regular aws credentials
  - name: aws-8.0-auth-test-run-aws-auth-test-with-assume-role-credentials-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '8.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws auth test with assume role credentials
  - name: aws-8.0-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '8.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws auth test with aws credentials as environment variables
  - name: >-
      aws-8.0-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '8.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws auth test with aws credentials and session token as environment variables
  - name: aws-8.0-auth-test-run-aws-ECS-auth-test-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '8.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws ECS auth test
  - name: aws-7.0-auth-test-run-aws-auth-test-with-regular-aws-credentials
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '7.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with regular aws credentials
  - name: aws-7.0-auth-test-run-aws-auth-test-with-assume-role-credentials
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '7.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with assume role credentials
  - name: aws-7.0-auth-test-run-aws-auth-test-with-aws-EC2-credentials
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '7.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws EC2 credentials
  - name: aws-7.0-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '7.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws credentials as environment variables
  - name: aws-7.0-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '7.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws credentials and session token as environment variables
  - name: aws-7.0-auth-test-run-aws-ECS-auth-test
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '7.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws ECS auth test
  - name: aws-7.0-auth-test-run-aws-auth-test-AssumeRoleWithWebIdentity-with-AWS_ROLE_SESSION_NAME-unset
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '7.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test AssumeRoleWithWebIdentity with AWS_ROLE_SESSION_NAME unset
  - name: aws-7.0-auth-test-run-aws-auth-test-AssumeRoleWithWebIdentity-with-AWS_ROLE_SESSION_NAME-set
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '7.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test AssumeRoleWithWebIdentity with AWS_ROLE_SESSION_NAME set
  - name: aws-7.0-auth-test-run-aws-auth-test-with-regular-aws-credentials-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '7.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws auth test with regular aws credentials
  - name: aws-7.0-auth-test-run-aws-auth-test-with-assume-role-credentials-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '7.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws auth test with assume role credentials
  - name: aws-7.0-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '7.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws auth test with aws credentials as environment variables
  - name: >-
      aws-7.0-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '7.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws auth test with aws credentials and session token as environment variables
  - name: aws-7.0-auth-test-run-aws-ECS-auth-test-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '7.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws ECS auth test
  - name: aws-6.0-auth-test-run-aws-auth-test-with-regular-aws-credentials
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '6.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with regular aws credentials
  - name: aws-6.0-auth-test-run-aws-auth-test-with-assume-role-credentials
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '6.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with assume role credentials
  - name: aws-6.0-auth-test-run-aws-auth-test-with-aws-EC2-credentials
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '6.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws EC2 credentials
  - name: aws-6.0-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '6.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws credentials as environment variables
  - name: aws-6.0-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '6.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws credentials and session token as environment variables
  - name: aws-6.0-auth-test-run-aws-ECS-auth-test
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '6.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws ECS auth test
  - name: aws-6.0-auth-test-run-aws-auth-test-AssumeRoleWithWebIdentity-with-AWS_ROLE_SESSION_NAME-unset
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '6.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test AssumeRoleWithWebIdentity with AWS_ROLE_SESSION_NAME unset
  - name: aws-6.0-auth-test-run-aws-auth-test-AssumeRoleWithWebIdentity-with-AWS_ROLE_SESSION_NAME-set
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '6.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test AssumeRoleWithWebIdentity with AWS_ROLE_SESSION_NAME set
  - name: aws-6.0-auth-test-run-aws-auth-test-with-regular-aws-credentials-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '6.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws auth test with regular aws credentials
  - name: aws-6.0-auth-test-run-aws-auth-test-with-assume-role-credentials-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '6.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws auth test with assume role credentials
  - name: aws-6.0-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '6.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws auth test with aws credentials as environment variables
  - name: >-
      aws-6.0-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '6.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws auth test with aws credentials and session token as environment variables
  - name: aws-6.0-auth-test-run-aws-ECS-auth-test-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '6.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws ECS auth test
  - name: aws-5.0-auth-test-run-aws-auth-test-with-regular-aws-credentials
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '5.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with regular aws credentials
  - name: aws-5.0-auth-test-run-aws-auth-test-with-assume-role-credentials
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '5.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with assume role credentials
  - name: aws-5.0-auth-test-run-aws-auth-test-with-aws-EC2-credentials
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '5.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws EC2 credentials
  - name: aws-5.0-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '5.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws credentials as environment variables
  - name: aws-5.0-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '5.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws credentials and session token as environment variables
  - name: aws-5.0-auth-test-run-aws-ECS-auth-test
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '5.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws ECS auth test
  - name: aws-5.0-auth-test-run-aws-auth-test-AssumeRoleWithWebIdentity-with-AWS_ROLE_SESSION_NAME-unset
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '5.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test AssumeRoleWithWebIdentity with AWS_ROLE_SESSION_NAME unset
  - name: aws-5.0-auth-test-run-aws-auth-test-AssumeRoleWithWebIdentity-with-AWS_ROLE_SESSION_NAME-set
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '5.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test AssumeRoleWithWebIdentity with AWS_ROLE_SESSION_NAME set
  - name: aws-5.0-auth-test-run-aws-auth-test-with-regular-aws-credentials-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '5.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws auth test with regular aws credentials
  - name: aws-5.0-auth-test-run-aws-auth-test-with-assume-role-credentials-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '5.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws auth test with assume role credentials
  - name: aws-5.0-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '5.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws auth test with aws credentials as environment variables
  - name: >-
      aws-5.0-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '5.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws auth test with aws credentials and session token as environment variables
  - name: aws-5.0-auth-test-run-aws-ECS-auth-test-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '5.0'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws ECS auth test
  - name: aws-4.4-auth-test-run-aws-auth-test-with-regular-aws-credentials
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.4'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with regular aws credentials
  - name: aws-4.4-auth-test-run-aws-auth-test-with-assume-role-credentials
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.4'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with assume role credentials
  - name: aws-4.4-auth-test-run-aws-auth-test-with-aws-EC2-credentials
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.4'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws EC2 credentials
  - name: aws-4.4-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.4'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws credentials as environment variables
  - name: aws-4.4-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.4'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test with aws credentials and session token as environment variables
  - name: aws-4.4-auth-test-run-aws-ECS-auth-test
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.4'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws ECS auth test
  - name: aws-4.4-auth-test-run-aws-auth-test-AssumeRoleWithWebIdentity-with-AWS_ROLE_SESSION_NAME-unset
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.4'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test AssumeRoleWithWebIdentity with AWS_ROLE_SESSION_NAME unset
  - name: aws-4.4-auth-test-run-aws-auth-test-AssumeRoleWithWebIdentity-with-AWS_ROLE_SESSION_NAME-set
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.4'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run aws auth test AssumeRoleWithWebIdentity with AWS_ROLE_SESSION_NAME set
  - name: aws-4.4-auth-test-run-aws-auth-test-with-regular-aws-credentials-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.4'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws auth test with regular aws credentials
  - name: aws-4.4-auth-test-run-aws-auth-test-with-assume-role-credentials-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.4'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws auth test with assume role credentials
  - name: aws-4.4-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.4'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws auth test with aws credentials as environment variables
  - name: >-
      aws-4.4-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.4'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws auth test with aws credentials and session token as environment variables
  - name: aws-4.4-auth-test-run-aws-ECS-auth-test-no-peer-dependencies
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.4'}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
            - {key: MONGODB_AWS_SDK, value: 'false'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: remove aws-credential-providers
      - func: run aws ECS auth test
  - name: run-spec-benchmark-tests-node-server
    tags:
      - run-spec-benchmark-tests
      - performance
    exec_timeout_secs: 3600
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NODE_LTS_VERSION, value: v22.11.0}
            - {key: VERSION, value: v6.0-perf}
            - {key: TOPOLOGY, value: server}
            - {key: AUTH, value: noauth}
            - {key: MONGODB_CLIENT_OPTIONS, value: '{}'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: run spec driver benchmarks
      - command: perf.send
        params:
          file: src/results.json
  - name: run-spec-benchmark-tests-node-server-timeoutMS-120000
    tags:
      - run-spec-benchmark-tests
      - performance
    exec_timeout_secs: 3600
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NODE_LTS_VERSION, value: v22.11.0}
            - {key: VERSION, value: v6.0-perf}
            - {key: TOPOLOGY, value: server}
            - {key: AUTH, value: noauth}
            - {key: MONGODB_CLIENT_OPTIONS, value: '{"timeoutMS":120000}'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: run spec driver benchmarks
      - command: perf.send
        params:
          file: src/results.json
  - name: run-spec-benchmark-tests-node-server-timeoutMS-0
    tags:
      - run-spec-benchmark-tests
      - performance
    exec_timeout_secs: 3600
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NODE_LTS_VERSION, value: v22.11.0}
            - {key: VERSION, value: v6.0-perf}
            - {key: TOPOLOGY, value: server}
            - {key: AUTH, value: noauth}
            - {key: MONGODB_CLIENT_OPTIONS, value: '{"timeoutMS":0}'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: run spec driver benchmarks
      - command: perf.send
        params:
          file: src/results.json
  - name: run-spec-benchmark-tests-node-server-monitorCommands-true
    tags:
      - run-spec-benchmark-tests
      - performance
    exec_timeout_secs: 3600
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NODE_LTS_VERSION, value: v22.11.0}
            - {key: VERSION, value: v6.0-perf}
            - {key: TOPOLOGY, value: server}
            - {key: AUTH, value: noauth}
            - {key: MONGODB_CLIENT_OPTIONS, value: '{"monitorCommands":true}'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: run spec driver benchmarks
      - command: perf.send
        params:
          file: src/results.json
  - name: run-spec-benchmark-tests-node-server-logging
    tags:
      - run-spec-benchmark-tests
      - performance
    exec_timeout_secs: 3600
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NODE_LTS_VERSION, value: v22.11.0}
            - {key: VERSION, value: v6.0-perf}
            - {key: TOPOLOGY, value: server}
            - {key: AUTH, value: noauth}
            - {key: MONGODB_CLIENT_OPTIONS, value: '{"mongodbLogPath":"stderr","mongodbLogComponentSeverities":{"default":"trace"}}'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: run spec driver benchmarks
      - command: perf.send
        params:
          file: src/results.json
  - name: run-unit-tests-node-16
    tags:
      - unit-tests
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NODE_LTS_VERSION, value: '16'}
            - {key: NPM_VERSION, value: '9'}
      - func: install dependencies
      - func: run unit tests
  - name: run-unit-tests-node-18
    tags:
      - unit-tests
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NODE_LTS_VERSION, value: '18'}
            - {key: NPM_VERSION, value: '10'}
      - func: install dependencies
      - func: run unit tests
  - name: run-unit-tests-node-20
    tags:
      - unit-tests
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NODE_LTS_VERSION, value: '20'}
            - {key: NPM_VERSION, value: latest}
      - func: install dependencies
      - func: run unit tests
  - name: run-unit-tests-node-22
    tags:
      - unit-tests
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NODE_LTS_VERSION, value: '22'}
            - {key: NPM_VERSION, value: latest}
      - func: install dependencies
      - func: run unit tests
  - name: run-lint-checks
    tags:
      - lint-checks
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NODE_LTS_VERSION, value: '16'}
            - {key: NPM_VERSION, value: '9'}
      - func: install dependencies
      - func: run lint checks
  - name: run-resource-management-no-async-dispose
    tags:
      - resource-management
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NODE_LTS_VERSION, value: v16.20.2}
            - {key: NPM_VERSION, value: '9'}
      - func: install dependencies
      - func: check resource management
  - name: run-resource-management-async-dispose
    tags:
      - resource-management
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NODE_LTS_VERSION, value: '22'}
            - {key: NPM_VERSION, value: '9'}
      - func: install dependencies
      - func: check resource management
  - name: test-explicit-resource-management-feature-integration
    tags:
      - resource-management
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: TOPOLOGY, value: replica_set}
            - {key: NODE_LTS_VERSION, value: '22'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: check resource management feature integration
  - name: check-types-typescript-next-node-types-22.13.0
    tags:
      - check-types-typescript-next
      - typescript-compilation
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NODE_LTS_VERSION, value: '16'}
            - {key: NPM_VERSION, value: '9'}
            - {key: TS_VERSION, value: next}
            - {key: TYPES_VERSION, value: 22.13.0}
      - func: install dependencies
      - func: check types
  - name: check-types-typescript-current-node-types-22.13.0
    tags:
      - check-types-typescript-current
      - typescript-compilation
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NODE_LTS_VERSION, value: '16'}
            - {key: NPM_VERSION, value: '9'}
            - {key: TS_VERSION, value: current}
            - {key: TYPES_VERSION, value: 22.13.0}
      - func: install dependencies
      - func: check types
  - name: check-types-typescript-next-node-types-16.x
    tags:
      - check-types-typescript-next
      - typescript-compilation
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NODE_LTS_VERSION, value: '16'}
            - {key: NPM_VERSION, value: '9'}
            - {key: TS_VERSION, value: next}
            - {key: TYPES_VERSION, value: 16.x}
      - func: install dependencies
      - func: check types
  - name: check-types-typescript-current-node-types-16.x
    tags:
      - check-types-typescript-current
      - typescript-compilation
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NODE_LTS_VERSION, value: '16'}
            - {key: NPM_VERSION, value: '9'}
            - {key: TS_VERSION, value: current}
            - {key: TYPES_VERSION, value: 16.x}
      - func: install dependencies
      - func: check types
  - name: check-types-typescript-4.4-node-types-18.11.9
    tags:
      - check-types-typescript-4.4
      - typescript-compilation
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NODE_LTS_VERSION, value: '16'}
            - {key: NPM_VERSION, value: '9'}
            - {key: TS_VERSION, value: '4.4'}
            - {key: TYPES_VERSION, value: 18.11.9}
      - func: install dependencies
      - func: check types
  - name: compile-driver-typescript-current-node-types-22.13.0
    tags:
      - compile-driver-typescript-current
      - typescript-compilation
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NODE_LTS_VERSION, value: '16'}
            - {key: NPM_VERSION, value: '9'}
            - {key: TS_VERSION, value: current}
            - {key: TYPES_VERSION, value: 22.13.0}
      - func: install dependencies
      - func: compile driver
  - name: download-and-merge-coverage
    tags: []
    commands:
      - func: download and merge coverage
    depends_on:
      - name: '*'
        variant: '*'
        status: '*'
        patch_optional: true
  - name: run-custom-csfle-tests-5.0
    tags:
      - run-custom-dependency-tests
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NODE_LTS_VERSION, value: '16'}
            - {key: NPM_VERSION, value: '9'}
            - {key: VERSION, value: '5.0'}
            - {key: TOPOLOGY, value: replica_set}
            - {key: CLIENT_ENCRYPTION, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: install mongodb-client-encryption
      - func: run custom csfle tests
  - name: run-custom-csfle-tests-rapid
    tags:
      - run-custom-dependency-tests
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NODE_LTS_VERSION, value: '16'}
            - {key: NPM_VERSION, value: '9'}
            - {key: VERSION, value: rapid}
            - {key: TOPOLOGY, value: replica_set}
            - {key: CLIENT_ENCRYPTION, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: install mongodb-client-encryption
      - func: run custom csfle tests
  - name: run-custom-csfle-tests-latest
    tags:
      - run-custom-dependency-tests
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NODE_LTS_VERSION, value: '16'}
            - {key: NPM_VERSION, value: '9'}
            - {key: VERSION, value: latest}
            - {key: TOPOLOGY, value: replica_set}
            - {key: CLIENT_ENCRYPTION, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: install mongodb-client-encryption
      - func: run custom csfle tests
  - name: test-latest-driver-mongodb-client-encryption-6.0.0
    tags:
      - run-custom-dependency-tests
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NODE_LTS_VERSION, value: '16'}
            - {key: NPM_VERSION, value: '9'}
            - {key: VERSION, value: '7.0'}
            - {key: TOPOLOGY, value: replica_set}
            - {key: CLIENT_ENCRYPTION, value: 'true'}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: install package
        vars:
          PACKAGE: mongodb-client-encryption@6.0.0
      - func: run tests
  - name: test-latest-server-noauth
    tags:
      - latest
      - server
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: TOPOLOGY, value: server}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-latest-replica_set-noauth
    tags:
      - latest
      - replica_set
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: TOPOLOGY, value: replica_set}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-latest-sharded_cluster-noauth
    tags:
      - latest
      - sharded_cluster
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-rapid-server-noauth
    tags:
      - rapid
      - server
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: rapid}
            - {key: TOPOLOGY, value: server}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-rapid-replica_set-noauth
    tags:
      - rapid
      - replica_set
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: rapid}
            - {key: TOPOLOGY, value: replica_set}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-rapid-sharded_cluster-noauth
    tags:
      - rapid
      - sharded_cluster
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: rapid}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-8.0-server-noauth
    tags:
      - '8.0'
      - server
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '8.0'}
            - {key: TOPOLOGY, value: server}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-8.0-replica_set-noauth
    tags:
      - '8.0'
      - replica_set
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '8.0'}
            - {key: TOPOLOGY, value: replica_set}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-8.0-sharded_cluster-noauth
    tags:
      - '8.0'
      - sharded_cluster
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '8.0'}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-7.0-server-noauth
    tags:
      - '7.0'
      - server
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '7.0'}
            - {key: TOPOLOGY, value: server}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-7.0-replica_set-noauth
    tags:
      - '7.0'
      - replica_set
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '7.0'}
            - {key: TOPOLOGY, value: replica_set}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-7.0-sharded_cluster-noauth
    tags:
      - '7.0'
      - sharded_cluster
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '7.0'}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-6.0-server-noauth
    tags:
      - '6.0'
      - server
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '6.0'}
            - {key: TOPOLOGY, value: server}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-6.0-replica_set-noauth
    tags:
      - '6.0'
      - replica_set
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '6.0'}
            - {key: TOPOLOGY, value: replica_set}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-6.0-sharded_cluster-noauth
    tags:
      - '6.0'
      - sharded_cluster
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '6.0'}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-5.0-server-noauth
    tags:
      - '5.0'
      - server
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '5.0'}
            - {key: TOPOLOGY, value: server}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-5.0-replica_set-noauth
    tags:
      - '5.0'
      - replica_set
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '5.0'}
            - {key: TOPOLOGY, value: replica_set}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-5.0-sharded_cluster-noauth
    tags:
      - '5.0'
      - sharded_cluster
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '5.0'}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.4-server-noauth
    tags:
      - '4.4'
      - server
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.4'}
            - {key: TOPOLOGY, value: server}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.4-replica_set-noauth
    tags:
      - '4.4'
      - replica_set
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.4'}
            - {key: TOPOLOGY, value: replica_set}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.4-sharded_cluster-noauth
    tags:
      - '4.4'
      - sharded_cluster
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.4'}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.2-server-noauth
    tags:
      - '4.2'
      - server
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.2'}
            - {key: TOPOLOGY, value: server}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.2-replica_set-noauth
    tags:
      - '4.2'
      - replica_set
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.2'}
            - {key: TOPOLOGY, value: replica_set}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.2-sharded_cluster-noauth
    tags:
      - '4.2'
      - sharded_cluster
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.2'}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.0-server-noauth
    tags:
      - '4.0'
      - server
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.0'}
            - {key: TOPOLOGY, value: server}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.0-replica_set-noauth
    tags:
      - '4.0'
      - replica_set
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.0'}
            - {key: TOPOLOGY, value: replica_set}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.0-sharded_cluster-noauth
    tags:
      - '4.0'
      - sharded_cluster
      - noauth
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.0'}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: noauth}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-lambda-example
    tags:
      - latest
      - lambda
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NPM_VERSION, value: '9'}
            - {key: VERSION, value: rapid}
            - {key: TOPOLOGY, value: server}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: run lambda handler example tests
  - name: test-lambda-aws-auth-example
    tags:
      - latest
      - lambda
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: NPM_VERSION, value: '9'}
            - {key: VERSION, value: rapid}
            - {key: AUTH, value: auth}
            - {key: ORCHESTRATION_FILE, value: auth-aws.json}
            - {key: TOPOLOGY, value: server}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: add aws auth variables to file
      - func: setup aws env
      - func: run lambda handler example tests with aws auth
  - name: test-latest-csfle-mongocryptd
    tags:
      - latest
      - sharded_cluster
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: latest}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: auth}
            - {key: TEST_NPM_SCRIPT, value: check:csfle}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-rapid-csfle-mongocryptd
    tags:
      - rapid
      - sharded_cluster
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: rapid}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: auth}
            - {key: TEST_NPM_SCRIPT, value: check:csfle}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-8.0-csfle-mongocryptd
    tags:
      - '8.0'
      - sharded_cluster
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '8.0'}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: auth}
            - {key: TEST_NPM_SCRIPT, value: check:csfle}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-7.0-csfle-mongocryptd
    tags:
      - '7.0'
      - sharded_cluster
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '7.0'}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: auth}
            - {key: TEST_NPM_SCRIPT, value: check:csfle}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-6.0-csfle-mongocryptd
    tags:
      - '6.0'
      - sharded_cluster
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '6.0'}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: auth}
            - {key: TEST_NPM_SCRIPT, value: check:csfle}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-5.0-csfle-mongocryptd
    tags:
      - '5.0'
      - sharded_cluster
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '5.0'}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: auth}
            - {key: TEST_NPM_SCRIPT, value: check:csfle}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.4-csfle-mongocryptd
    tags:
      - '4.4'
      - sharded_cluster
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.4'}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: auth}
            - {key: TEST_NPM_SCRIPT, value: check:csfle}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
  - name: test-4.2-csfle-mongocryptd
    tags:
      - '4.2'
      - sharded_cluster
    commands:
      - command: expansions.update
        type: setup
        params:
          updates:
            - {key: VERSION, value: '4.2'}
            - {key: TOPOLOGY, value: sharded_cluster}
            - {key: AUTH, value: auth}
            - {key: TEST_NPM_SCRIPT, value: check:csfle}
      - func: install dependencies
      - func: bootstrap mongo-orchestration
      - func: bootstrap kms servers
      - func: run tests
task_groups:
  - name: serverless_task_group
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    setup_group:
      - func: fetch source
      - command: subprocess.exec
        params:
          working_dir: src
          binary: bash
          env:
            DRIVERS_TOOLS: ${DRIVERS_TOOLS}
          args:
            - .evergreen/setup-serverless.sh
    teardown_group:
      - func: upload test results
      - command: subprocess.exec
        params:
          working_dir: src
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/serverless/delete-instance.sh
    tasks:
      - .serverless
  - name: test_gcpkms_task_group
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    setup_group:
      - func: fetch source
      - command: subprocess.exec
        params:
          working_dir: src
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/csfle/gcpkms/setup.sh
    teardown_group:
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/csfle/gcpkms/teardown.sh
    tasks:
      - test-gcpkms-task
  - name: test_azurekms_task_group
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    setup_group:
      - func: fetch source
      - command: subprocess.exec
        params:
          working_dir: src
          binary: bash
          env:
            AZUREKMS_VMNAME_PREFIX: NODE_DRIVER
          args:
            - ${DRIVERS_TOOLS}/.evergreen/csfle/azurekms/setup.sh
    teardown_group:
      - command: expansions.update
        params:
          file: testazurekms-expansions.yml
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/csfle/azurekms/teardown.sh
    tasks:
      - test-azurekms-task
  - name: testk8soidc_task_group_eks
    setup_group:
      - func: fetch source
      - command: ec2.assume_role
        params:
          role_arn: ${OIDC_AWS_ROLE_ARN}
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/k8s/setup.sh
    teardown_task:
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/k8s/teardown.sh
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - oidc-auth-test-k8s-latest-eks
  - name: testk8soidc_task_group_gke
    setup_group:
      - func: fetch source
      - command: ec2.assume_role
        params:
          role_arn: ${OIDC_AWS_ROLE_ARN}
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/k8s/setup.sh
    teardown_task:
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/k8s/teardown.sh
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - oidc-auth-test-k8s-latest-gke
  - name: testk8soidc_task_group_aks
    setup_group:
      - func: fetch source
      - command: ec2.assume_role
        params:
          role_arn: ${OIDC_AWS_ROLE_ARN}
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/k8s/setup.sh
    teardown_task:
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/k8s/teardown.sh
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - oidc-auth-test-k8s-latest-aks
  - name: testtestoidc_task_group
    setup_group:
      - func: fetch source
      - command: ec2.assume_role
        params:
          role_arn: ${OIDC_AWS_ROLE_ARN}
      - command: subprocess.exec
        params:
          binary: bash
          include_expansions_in_env:
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY
            - AWS_SESSION_TOKEN
          env:
            MONGODB_VERSION: '8.0'
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/setup.sh
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - oidc-auth-test-test-latest
  - name: testazureoidc_task_group
    setup_group:
      - func: fetch source
      - command: shell.exec
        params:
          shell: bash
          script: |-
            set -o errexit
            ${PREPARE_SHELL}
            export AZUREOIDC_VMNAME_PREFIX="NODE_DRIVER"
            $DRIVERS_TOOLS/.evergreen/auth_oidc/azure/setup.sh
    teardown_task:
      - command: shell.exec
        params:
          shell: bash
          script: |-
            ${PREPARE_SHELL}
            $DRIVERS_TOOLS/.evergreen/auth_oidc/azure/teardown.sh
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - oidc-auth-test-azure-latest
  - name: testgcpoidc_task_group
    setup_group:
      - func: fetch source
      - command: shell.exec
        params:
          shell: bash
          script: |-
            set -o errexit
            ${PREPARE_SHELL}
            export GCPOIDC_VMNAME_PREFIX="NODE_DRIVER"
            $DRIVERS_TOOLS/.evergreen/auth_oidc/gcp/setup.sh
    teardown_task:
      - command: shell.exec
        params:
          shell: bash
          script: |-
            ${PREPARE_SHELL}
            $DRIVERS_TOOLS/.evergreen/auth_oidc/gcp/teardown.sh
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - oidc-auth-test-gcp-latest
  - name: test_atlas_task_group
    setup_group:
      - func: fetch source
      - command: subprocess.exec
        params:
          working_dir: src
          binary: bash
          env:
            MONGODB_VERSION: '7.0'
            LAMBDA_STACK_NAME: dbx-node-lambda
            CLUSTER_PREFIX: dbx-node-lambda
          args:
            - ${DRIVERS_TOOLS}/.evergreen/atlas/setup-atlas-cluster.sh
            - atlas
      - command: expansions.update
        params:
          file: src/atlas-expansion.yml
    teardown_task:
      - command: subprocess.exec
        params:
          working_dir: src
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/atlas/teardown-atlas-cluster.sh
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - test-aws-lambda-deployed
  - name: test_atlas_task_group_search_indexes
    setup_group:
      - func: fetch source
      - command: subprocess.exec
        params:
          working_dir: src
          binary: bash
          env:
            MONGODB_VERSION: '7.0'
            CLUSTER_PREFIX: dbx-node-search-indexes
          args:
            - ${DRIVERS_TOOLS}/.evergreen/atlas/setup-atlas-cluster.sh
      - command: expansions.update
        params:
          file: src/atlas-expansion.yml
    teardown_task:
      - command: subprocess.exec
        params:
          working_dir: src
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/atlas/teardown-atlas-cluster.sh
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - test-search-index-helpers
pre:
  - func: fetch source
  - func: windows fix
  - func: fix absolute paths
  - func: make files executable
post:
  - func: reset aws instance profile
  - func: upload test results
  - func: stop mongo-orchestration
  - func: upload coverage report
  - func: cleanup
ignore:
  - '*.md'
buildvariants:
  - name: rhel80-large-gallium
    display_name: rhel8 Node16
    run_on: rhel80-large
    expansions:
      NODE_LTS_VERSION: 16
      NPM_VERSION: 9
      CLIENT_ENCRYPTION: 'true'
      TEST_CSFLE: 'true'
    tasks:
      - test-latest-server
      - test-latest-replica_set
      - test-latest-sharded_cluster
      - test-rapid-server
      - test-rapid-replica_set
      - test-rapid-sharded_cluster
      - test-8.0-server
      - test-8.0-replica_set
      - test-8.0-sharded_cluster
      - test-7.0-server
      - test-7.0-replica_set
      - test-7.0-sharded_cluster
      - test-6.0-server
      - test-6.0-replica_set
      - test-6.0-sharded_cluster
      - test-5.0-server
      - test-5.0-replica_set
      - test-5.0-sharded_cluster
      - test-4.4-server
      - test-4.4-replica_set
      - test-4.4-sharded_cluster
      - test-4.2-server
      - test-4.2-replica_set
      - test-4.2-sharded_cluster
      - test-4.0-server
      - test-4.0-replica_set
      - test-4.0-sharded_cluster
      - test-latest-server-v1-api
      - test-x509-authentication
      - test-atlas-connectivity
      - test-5.0-load-balanced
      - test-6.0-load-balanced
      - test-7.0-load-balanced
      - test-8.0-load-balanced
      - test-rapid-load-balanced
      - test-latest-load-balanced
      - test-auth-kerberos
      - test-auth-ldap
      - test-socks5
      - test-socks5-csfle
      - test-socks5-tls
      - test-snappy-compression
      - test-zstd-1.x-compression
      - test-zstd-2.x-compression
      - test-tls-support-latest
      - test-tls-support-8.0
      - test-tls-support-7.0
      - test-tls-support-6.0
      - test-tls-support-5.0
      - test-tls-support-4.4
      - test-tls-support-4.2
  - name: rhel80-large-hydrogen
    display_name: rhel8 Node18
    run_on: rhel80-large
    expansions:
      NODE_LTS_VERSION: 18
      NPM_VERSION: 10
      CLIENT_ENCRYPTION: 'true'
      TEST_CSFLE: 'true'
    tasks:
      - test-latest-server
      - test-latest-replica_set
      - test-latest-sharded_cluster
      - test-rapid-server
      - test-rapid-replica_set
      - test-rapid-sharded_cluster
      - test-8.0-server
      - test-8.0-replica_set
      - test-8.0-sharded_cluster
      - test-7.0-server
      - test-7.0-replica_set
      - test-7.0-sharded_cluster
      - test-6.0-server
      - test-6.0-replica_set
      - test-6.0-sharded_cluster
      - test-5.0-server
      - test-5.0-replica_set
      - test-5.0-sharded_cluster
      - test-4.4-server
      - test-4.4-replica_set
      - test-4.4-sharded_cluster
      - test-4.2-server
      - test-4.2-replica_set
      - test-4.2-sharded_cluster
      - test-4.0-server
      - test-4.0-replica_set
      - test-4.0-sharded_cluster
      - test-latest-server-v1-api
      - test-x509-authentication
      - test-atlas-connectivity
      - test-5.0-load-balanced
      - test-6.0-load-balanced
      - test-7.0-load-balanced
      - test-8.0-load-balanced
      - test-rapid-load-balanced
      - test-latest-load-balanced
      - test-auth-kerberos
      - test-auth-ldap
      - test-socks5
      - test-socks5-csfle
      - test-socks5-tls
      - test-snappy-compression
      - test-zstd-1.x-compression
      - test-zstd-2.x-compression
      - test-tls-support-latest
      - test-tls-support-8.0
      - test-tls-support-7.0
      - test-tls-support-6.0
      - test-tls-support-5.0
      - test-tls-support-4.4
      - test-tls-support-4.2
  - name: rhel80-large-Node20
    display_name: rhel8 Node20
    run_on: rhel80-large
    expansions:
      NODE_LTS_VERSION: 20
      NPM_VERSION: latest
      CLIENT_ENCRYPTION: 'true'
      TEST_CSFLE: 'true'
    tasks:
      - test-latest-server
      - test-latest-replica_set
      - test-latest-sharded_cluster
      - test-rapid-server
      - test-rapid-replica_set
      - test-rapid-sharded_cluster
      - test-8.0-server
      - test-8.0-replica_set
      - test-8.0-sharded_cluster
      - test-7.0-server
      - test-7.0-replica_set
      - test-7.0-sharded_cluster
      - test-6.0-server
      - test-6.0-replica_set
      - test-6.0-sharded_cluster
      - test-5.0-server
      - test-5.0-replica_set
      - test-5.0-sharded_cluster
      - test-4.4-server
      - test-4.4-replica_set
      - test-4.4-sharded_cluster
      - test-4.2-server
      - test-4.2-replica_set
      - test-4.2-sharded_cluster
      - test-4.0-server
      - test-4.0-replica_set
      - test-4.0-sharded_cluster
      - test-latest-server-v1-api
      - test-x509-authentication
      - test-atlas-connectivity
      - test-5.0-load-balanced
      - test-6.0-load-balanced
      - test-7.0-load-balanced
      - test-8.0-load-balanced
      - test-rapid-load-balanced
      - test-latest-load-balanced
      - test-auth-kerberos
      - test-auth-ldap
      - test-socks5
      - test-socks5-csfle
      - test-socks5-tls
      - test-snappy-compression
      - test-zstd-1.x-compression
      - test-zstd-2.x-compression
      - test-tls-support-latest
      - test-tls-support-8.0
      - test-tls-support-7.0
      - test-tls-support-6.0
      - test-tls-support-5.0
      - test-tls-support-4.4
      - test-tls-support-4.2
  - name: rhel80-large-Node22
    display_name: rhel8 Node22
    run_on: rhel80-large
    expansions:
      NODE_LTS_VERSION: 22
      NPM_VERSION: latest
      CLIENT_ENCRYPTION: 'true'
      TEST_CSFLE: 'true'
    tasks:
      - test-latest-server
      - test-latest-replica_set
      - test-latest-sharded_cluster
      - test-rapid-server
      - test-rapid-replica_set
      - test-rapid-sharded_cluster
      - test-8.0-server
      - test-8.0-replica_set
      - test-8.0-sharded_cluster
      - test-7.0-server
      - test-7.0-replica_set
      - test-7.0-sharded_cluster
      - test-6.0-server
      - test-6.0-replica_set
      - test-6.0-sharded_cluster
      - test-5.0-server
      - test-5.0-replica_set
      - test-5.0-sharded_cluster
      - test-4.4-server
      - test-4.4-replica_set
      - test-4.4-sharded_cluster
      - test-4.2-server
      - test-4.2-replica_set
      - test-4.2-sharded_cluster
      - test-4.0-server
      - test-4.0-replica_set
      - test-4.0-sharded_cluster
      - test-latest-server-v1-api
      - test-x509-authentication
      - test-atlas-connectivity
      - test-5.0-load-balanced
      - test-6.0-load-balanced
      - test-7.0-load-balanced
      - test-8.0-load-balanced
      - test-rapid-load-balanced
      - test-latest-load-balanced
      - test-auth-kerberos
      - test-auth-ldap
      - test-socks5
      - test-socks5-csfle
      - test-socks5-tls
      - test-snappy-compression
      - test-zstd-1.x-compression
      - test-zstd-2.x-compression
      - test-tls-support-latest
      - test-tls-support-8.0
      - test-tls-support-7.0
      - test-tls-support-6.0
      - test-tls-support-5.0
      - test-tls-support-4.4
      - test-tls-support-4.2
  - name: rhel80-large-node-latest
    display_name: rhel8 Node Latest
    run_on: rhel80-large
    expansions:
      NODE_LTS_VERSION: latest
      CLIENT_ENCRYPTION: true
    tasks:
      - test-latest-server
      - test-latest-replica_set
      - test-latest-sharded_cluster
      - test-rapid-server
      - test-rapid-replica_set
      - test-rapid-sharded_cluster
      - test-8.0-server
      - test-8.0-replica_set
      - test-8.0-sharded_cluster
      - test-7.0-server
      - test-7.0-replica_set
      - test-7.0-sharded_cluster
      - test-6.0-server
      - test-6.0-replica_set
      - test-6.0-sharded_cluster
      - test-5.0-server
      - test-5.0-replica_set
      - test-5.0-sharded_cluster
      - test-4.4-server
      - test-4.4-replica_set
      - test-4.4-sharded_cluster
      - test-4.2-server
      - test-4.2-replica_set
      - test-4.2-sharded_cluster
      - test-4.0-server
      - test-4.0-replica_set
      - test-4.0-sharded_cluster
      - test-latest-server-v1-api
      - test-x509-authentication
      - test-atlas-connectivity
      - test-5.0-load-balanced
      - test-6.0-load-balanced
      - test-7.0-load-balanced
      - test-8.0-load-balanced
      - test-rapid-load-balanced
      - test-latest-load-balanced
      - test-auth-kerberos
      - test-auth-ldap
      - test-socks5-csfle
      - test-socks5-tls
      - test-snappy-compression
      - test-zstd-1.x-compression
      - test-zstd-2.x-compression
      - test-tls-support-latest
      - test-tls-support-8.0
      - test-tls-support-7.0
      - test-tls-support-6.0
      - test-tls-support-5.0
      - test-tls-support-4.4
      - test-tls-support-4.2
    disable: true
  - name: windows-vsCurrent-large-gallium
    display_name: Windows Node16
    run_on: windows-vsCurrent-large
    expansions:
      NODE_LTS_VERSION: 16
      NPM_VERSION: 9
      CLIENT_ENCRYPTION: 'false'
      TEST_CSFLE: 'false'
    tasks:
      - test-latest-server
      - test-latest-replica_set
      - test-latest-sharded_cluster
      - test-rapid-server
      - test-rapid-replica_set
      - test-rapid-sharded_cluster
      - test-8.0-server
      - test-8.0-replica_set
      - test-8.0-sharded_cluster
      - test-7.0-server
      - test-7.0-replica_set
      - test-7.0-sharded_cluster
      - test-6.0-server
      - test-6.0-replica_set
      - test-6.0-sharded_cluster
      - test-5.0-server
      - test-5.0-replica_set
      - test-5.0-sharded_cluster
      - test-4.4-server
      - test-4.4-replica_set
      - test-4.4-sharded_cluster
      - test-4.2-server
      - test-4.2-replica_set
      - test-4.2-sharded_cluster
      - test-4.0-server
      - test-4.0-replica_set
      - test-4.0-sharded_cluster
      - test-latest-server-v1-api
      - test-socks5
      - test-socks5-tls
      - test-snappy-compression
      - test-zstd-1.x-compression
      - test-zstd-2.x-compression
      - test-tls-support-latest
      - test-tls-support-8.0
      - test-tls-support-7.0
      - test-tls-support-6.0
      - test-tls-support-5.0
      - test-tls-support-4.4
      - test-tls-support-4.2
  - name: windows-vsCurrent-large-hydrogen
    display_name: Windows Node18
    run_on: windows-vsCurrent-large
    expansions:
      NODE_LTS_VERSION: 18
      NPM_VERSION: 10
      CLIENT_ENCRYPTION: 'false'
      TEST_CSFLE: 'false'
    tasks:
      - test-latest-server
      - test-latest-replica_set
      - test-latest-sharded_cluster
      - test-rapid-server
      - test-rapid-replica_set
      - test-rapid-sharded_cluster
      - test-8.0-server
      - test-8.0-replica_set
      - test-8.0-sharded_cluster
      - test-7.0-server
      - test-7.0-replica_set
      - test-7.0-sharded_cluster
      - test-6.0-server
      - test-6.0-replica_set
      - test-6.0-sharded_cluster
      - test-5.0-server
      - test-5.0-replica_set
      - test-5.0-sharded_cluster
      - test-4.4-server
      - test-4.4-replica_set
      - test-4.4-sharded_cluster
      - test-4.2-server
      - test-4.2-replica_set
      - test-4.2-sharded_cluster
      - test-4.0-server
      - test-4.0-replica_set
      - test-4.0-sharded_cluster
      - test-latest-server-v1-api
      - test-socks5
      - test-socks5-tls
      - test-snappy-compression
      - test-zstd-1.x-compression
      - test-zstd-2.x-compression
      - test-tls-support-latest
      - test-tls-support-8.0
      - test-tls-support-7.0
      - test-tls-support-6.0
      - test-tls-support-5.0
      - test-tls-support-4.4
      - test-tls-support-4.2
  - name: windows-vsCurrent-large-Node20
    display_name: Windows Node20
    run_on: windows-vsCurrent-large
    expansions:
      NODE_LTS_VERSION: 20
      NPM_VERSION: latest
      CLIENT_ENCRYPTION: 'false'
      TEST_CSFLE: 'false'
    tasks:
      - test-latest-server
      - test-latest-replica_set
      - test-latest-sharded_cluster
      - test-rapid-server
      - test-rapid-replica_set
      - test-rapid-sharded_cluster
      - test-8.0-server
      - test-8.0-replica_set
      - test-8.0-sharded_cluster
      - test-7.0-server
      - test-7.0-replica_set
      - test-7.0-sharded_cluster
      - test-6.0-server
      - test-6.0-replica_set
      - test-6.0-sharded_cluster
      - test-5.0-server
      - test-5.0-replica_set
      - test-5.0-sharded_cluster
      - test-4.4-server
      - test-4.4-replica_set
      - test-4.4-sharded_cluster
      - test-4.2-server
      - test-4.2-replica_set
      - test-4.2-sharded_cluster
      - test-4.0-server
      - test-4.0-replica_set
      - test-4.0-sharded_cluster
      - test-latest-server-v1-api
      - test-socks5
      - test-socks5-tls
      - test-snappy-compression
      - test-zstd-1.x-compression
      - test-zstd-2.x-compression
      - test-tls-support-latest
      - test-tls-support-8.0
      - test-tls-support-7.0
      - test-tls-support-6.0
      - test-tls-support-5.0
      - test-tls-support-4.4
      - test-tls-support-4.2
  - name: windows-vsCurrent-large-Node22
    display_name: Windows Node22
    run_on: windows-vsCurrent-large
    expansions:
      NODE_LTS_VERSION: 22
      NPM_VERSION: latest
      CLIENT_ENCRYPTION: 'false'
      TEST_CSFLE: 'false'
    tasks:
      - test-latest-server
      - test-latest-replica_set
      - test-latest-sharded_cluster
      - test-rapid-server
      - test-rapid-replica_set
      - test-rapid-sharded_cluster
      - test-8.0-server
      - test-8.0-replica_set
      - test-8.0-sharded_cluster
      - test-7.0-server
      - test-7.0-replica_set
      - test-7.0-sharded_cluster
      - test-6.0-server
      - test-6.0-replica_set
      - test-6.0-sharded_cluster
      - test-5.0-server
      - test-5.0-replica_set
      - test-5.0-sharded_cluster
      - test-4.4-server
      - test-4.4-replica_set
      - test-4.4-sharded_cluster
      - test-4.2-server
      - test-4.2-replica_set
      - test-4.2-sharded_cluster
      - test-4.0-server
      - test-4.0-replica_set
      - test-4.0-sharded_cluster
      - test-latest-server-v1-api
      - test-socks5
      - test-socks5-tls
      - test-snappy-compression
      - test-zstd-1.x-compression
      - test-zstd-2.x-compression
      - test-tls-support-latest
      - test-tls-support-8.0
      - test-tls-support-7.0
      - test-tls-support-6.0
      - test-tls-support-5.0
      - test-tls-support-4.4
      - test-tls-support-4.2
  - name: rhel8-node16-test-csfle-mongocryptd
    display_name: rhel 8 Node16 test mongocryptd
    run_on: rhel80-large
    expansions:
      CLIENT_ENCRYPTION: true
      RUN_WITH_MONGOCRYPTD: true
      NODE_LTS_VERSION: 16
      NPM_VERSION: 9
    tasks:
      - test-latest-csfle-mongocryptd
      - test-rapid-csfle-mongocryptd
      - test-8.0-csfle-mongocryptd
      - test-7.0-csfle-mongocryptd
      - test-6.0-csfle-mongocryptd
      - test-5.0-csfle-mongocryptd
      - test-4.4-csfle-mongocryptd
      - test-4.2-csfle-mongocryptd
  - name: rhel8-node22-test-csfle-mongocryptd
    display_name: rhel 8 Node22 test mongocryptd
    run_on: rhel80-large
    expansions:
      CLIENT_ENCRYPTION: true
      RUN_WITH_MONGOCRYPTD: true
      NODE_LTS_VERSION: 16
      NPM_VERSION: 9
    tasks:
      - test-latest-csfle-mongocryptd
      - test-rapid-csfle-mongocryptd
      - test-8.0-csfle-mongocryptd
      - test-7.0-csfle-mongocryptd
      - test-6.0-csfle-mongocryptd
      - test-5.0-csfle-mongocryptd
      - test-4.4-csfle-mongocryptd
      - test-4.2-csfle-mongocryptd
  - name: macos-1100
    display_name: MacOS 11 Node22
    run_on: macos-1100
    expansions:
      NODE_LTS_VERSION: 22
      CLIENT_ENCRYPTION: true
    tasks:
      - test-rapid-server
  - name: lint
    display_name: lint
    run_on: rhel80-large
    tasks:
      - .unit-tests
      - .lint-checks
      - .typescript-compilation
  - name: generate-combined-coverage
    display_name: Generate Combined Coverage
    run_on: rhel80-large
    tasks:
      - download-and-merge-coverage
  - name: ubuntu2004-test-mongodb-aws
    display_name: MONGODB-AWS Auth test
    run_on: ubuntu2004-small
    expansions:
      NODE_LTS_VERSION: 22
    tasks:
      - aws-latest-auth-test-run-aws-auth-test-with-regular-aws-credentials
      - aws-latest-auth-test-run-aws-auth-test-with-assume-role-credentials
      - aws-latest-auth-test-run-aws-auth-test-with-aws-EC2-credentials
      - aws-latest-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables
      - aws-latest-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables
      - aws-latest-auth-test-run-aws-ECS-auth-test
      - aws-latest-auth-test-run-aws-auth-test-AssumeRoleWithWebIdentity-with-AWS_ROLE_SESSION_NAME-unset
      - aws-latest-auth-test-run-aws-auth-test-AssumeRoleWithWebIdentity-with-AWS_ROLE_SESSION_NAME-set
      - aws-latest-auth-test-run-aws-auth-test-with-regular-aws-credentials-no-peer-dependencies
      - aws-latest-auth-test-run-aws-auth-test-with-assume-role-credentials-no-peer-dependencies
      - aws-latest-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables-no-peer-dependencies
      - >-
        aws-latest-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables-no-peer-dependencies
      - aws-latest-auth-test-run-aws-ECS-auth-test-no-peer-dependencies
      - aws-8.0-auth-test-run-aws-auth-test-with-regular-aws-credentials
      - aws-8.0-auth-test-run-aws-auth-test-with-assume-role-credentials
      - aws-8.0-auth-test-run-aws-auth-test-with-aws-EC2-credentials
      - aws-8.0-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables
      - aws-8.0-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables
      - aws-8.0-auth-test-run-aws-ECS-auth-test
      - aws-8.0-auth-test-run-aws-auth-test-AssumeRoleWithWebIdentity-with-AWS_ROLE_SESSION_NAME-unset
      - aws-8.0-auth-test-run-aws-auth-test-AssumeRoleWithWebIdentity-with-AWS_ROLE_SESSION_NAME-set
      - aws-8.0-auth-test-run-aws-auth-test-with-regular-aws-credentials-no-peer-dependencies
      - aws-8.0-auth-test-run-aws-auth-test-with-assume-role-credentials-no-peer-dependencies
      - aws-8.0-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables-no-peer-dependencies
      - >-
        aws-8.0-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables-no-peer-dependencies
      - aws-8.0-auth-test-run-aws-ECS-auth-test-no-peer-dependencies
      - aws-7.0-auth-test-run-aws-auth-test-with-regular-aws-credentials
      - aws-7.0-auth-test-run-aws-auth-test-with-assume-role-credentials
      - aws-7.0-auth-test-run-aws-auth-test-with-aws-EC2-credentials
      - aws-7.0-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables
      - aws-7.0-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables
      - aws-7.0-auth-test-run-aws-ECS-auth-test
      - aws-7.0-auth-test-run-aws-auth-test-AssumeRoleWithWebIdentity-with-AWS_ROLE_SESSION_NAME-unset
      - aws-7.0-auth-test-run-aws-auth-test-AssumeRoleWithWebIdentity-with-AWS_ROLE_SESSION_NAME-set
      - aws-7.0-auth-test-run-aws-auth-test-with-regular-aws-credentials-no-peer-dependencies
      - aws-7.0-auth-test-run-aws-auth-test-with-assume-role-credentials-no-peer-dependencies
      - aws-7.0-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables-no-peer-dependencies
      - >-
        aws-7.0-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables-no-peer-dependencies
      - aws-7.0-auth-test-run-aws-ECS-auth-test-no-peer-dependencies
      - aws-6.0-auth-test-run-aws-auth-test-with-regular-aws-credentials
      - aws-6.0-auth-test-run-aws-auth-test-with-assume-role-credentials
      - aws-6.0-auth-test-run-aws-auth-test-with-aws-EC2-credentials
      - aws-6.0-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables
      - aws-6.0-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables
      - aws-6.0-auth-test-run-aws-ECS-auth-test
      - aws-6.0-auth-test-run-aws-auth-test-AssumeRoleWithWebIdentity-with-AWS_ROLE_SESSION_NAME-unset
      - aws-6.0-auth-test-run-aws-auth-test-AssumeRoleWithWebIdentity-with-AWS_ROLE_SESSION_NAME-set
      - aws-6.0-auth-test-run-aws-auth-test-with-regular-aws-credentials-no-peer-dependencies
      - aws-6.0-auth-test-run-aws-auth-test-with-assume-role-credentials-no-peer-dependencies
      - aws-6.0-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables-no-peer-dependencies
      - >-
        aws-6.0-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables-no-peer-dependencies
      - aws-6.0-auth-test-run-aws-ECS-auth-test-no-peer-dependencies
      - aws-5.0-auth-test-run-aws-auth-test-with-regular-aws-credentials
      - aws-5.0-auth-test-run-aws-auth-test-with-assume-role-credentials
      - aws-5.0-auth-test-run-aws-auth-test-with-aws-EC2-credentials
      - aws-5.0-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables
      - aws-5.0-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables
      - aws-5.0-auth-test-run-aws-ECS-auth-test
      - aws-5.0-auth-test-run-aws-auth-test-AssumeRoleWithWebIdentity-with-AWS_ROLE_SESSION_NAME-unset
      - aws-5.0-auth-test-run-aws-auth-test-AssumeRoleWithWebIdentity-with-AWS_ROLE_SESSION_NAME-set
      - aws-5.0-auth-test-run-aws-auth-test-with-regular-aws-credentials-no-peer-dependencies
      - aws-5.0-auth-test-run-aws-auth-test-with-assume-role-credentials-no-peer-dependencies
      - aws-5.0-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables-no-peer-dependencies
      - >-
        aws-5.0-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables-no-peer-dependencies
      - aws-5.0-auth-test-run-aws-ECS-auth-test-no-peer-dependencies
      - aws-4.4-auth-test-run-aws-auth-test-with-regular-aws-credentials
      - aws-4.4-auth-test-run-aws-auth-test-with-assume-role-credentials
      - aws-4.4-auth-test-run-aws-auth-test-with-aws-EC2-credentials
      - aws-4.4-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables
      - aws-4.4-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables
      - aws-4.4-auth-test-run-aws-ECS-auth-test
      - aws-4.4-auth-test-run-aws-auth-test-AssumeRoleWithWebIdentity-with-AWS_ROLE_SESSION_NAME-unset
      - aws-4.4-auth-test-run-aws-auth-test-AssumeRoleWithWebIdentity-with-AWS_ROLE_SESSION_NAME-set
      - aws-4.4-auth-test-run-aws-auth-test-with-regular-aws-credentials-no-peer-dependencies
      - aws-4.4-auth-test-run-aws-auth-test-with-assume-role-credentials-no-peer-dependencies
      - aws-4.4-auth-test-run-aws-auth-test-with-aws-credentials-as-environment-variables-no-peer-dependencies
      - >-
        aws-4.4-auth-test-run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables-no-peer-dependencies
      - aws-4.4-auth-test-run-aws-ECS-auth-test-no-peer-dependencies
  - name: ubuntu2204-test-atlas-data-lake
    display_name: Atlas Data Lake Tests
    run_on: ubuntu2204-large
    expansions:
      NODE_LTS_VERSION: 22
    tasks:
      - test-atlas-data-lake
  - name: performance-tests
    display_name: Performance Test
    run_on: rhel90-dbx-perf-large
    tasks:
      - run-spec-benchmark-tests-node-server
      - run-spec-benchmark-tests-node-server-timeoutMS-120000
      - run-spec-benchmark-tests-node-server-timeoutMS-0
      - run-spec-benchmark-tests-node-server-monitorCommands-true
      - run-spec-benchmark-tests-node-server-logging
  - name: rhel8-custom-dependency-tests
    display_name: Custom Dependency Version Test
    run_on: rhel80-large
    tasks:
      - run-custom-csfle-tests-5.0
      - run-custom-csfle-tests-rapid
      - run-custom-csfle-tests-latest
      - test-latest-driver-mongodb-client-encryption-6.0.0
  - name: rhel8-test-serverless
    display_name: Serverless Test
    run_on: rhel80-large
    expansions:
      NODE_LTS_VERSION: 16
      NPM_VERSION: 9
    tasks:
      - serverless_task_group
  - name: rhel8-test-gcp-kms
    display_name: GCP KMS Test
    run_on: debian11-small
    tasks:
      - test_gcpkms_task_group
      - test-gcpkms-fail-task
  - name: debian11-test-azure-kms
    display_name: Azure KMS Test
    run_on: debian11-small
    batchtime: 20160
    tasks:
      - test_azurekms_task_group
      - test-azurekms-fail-task
  - name: ubuntu20-test-all-oidc
    display_name: MONGODB-OIDC Auth Tests
    run_on: ubuntu2004-small
    expansions:
      NODE_LTS_VERSION: 22
    batchtime: 20160
    tasks:
      - testtestoidc_task_group
      - testazureoidc_task_group
      - testgcpoidc_task_group
      - testk8soidc_task_group_eks
      - testk8soidc_task_group_gke
      - testk8soidc_task_group_aks
  - name: rhel8-test-atlas
    display_name: Atlas Cluster Tests
    run_on: rhel80-large
    tasks:
      - test_atlas_task_group
  - name: rhel8-no-auth-tests
    display_name: No Auth Tests
    run_on: rhel80-large
    expansions:
      CLIENT_ENCRYPTION: true
    tasks:
      - test-latest-server-noauth
      - test-latest-replica_set-noauth
      - test-latest-sharded_cluster-noauth
      - test-rapid-server-noauth
      - test-rapid-replica_set-noauth
      - test-rapid-sharded_cluster-noauth
      - test-8.0-server-noauth
      - test-8.0-replica_set-noauth
      - test-8.0-sharded_cluster-noauth
      - test-7.0-server-noauth
      - test-7.0-replica_set-noauth
      - test-7.0-sharded_cluster-noauth
      - test-6.0-server-noauth
      - test-6.0-replica_set-noauth
      - test-6.0-sharded_cluster-noauth
      - test-5.0-server-noauth
      - test-5.0-replica_set-noauth
      - test-5.0-sharded_cluster-noauth
      - test-4.4-server-noauth
      - test-4.4-replica_set-noauth
      - test-4.4-sharded_cluster-noauth
      - test-4.2-server-noauth
      - test-4.2-replica_set-noauth
      - test-4.2-sharded_cluster-noauth
      - test-4.0-server-noauth
      - test-4.0-replica_set-noauth
      - test-4.0-sharded_cluster-noauth
  - name: rhel8-test-lambda
    display_name: AWS Lambda handler tests
    run_on: rhel80-large
    tasks:
      - test-lambda-example
      - test-lambda-aws-auth-example
  - name: rhel8-test-search-indexes
    display_name: Search Index Tests
    run_on: rhel80-large
    tasks:
      - test_atlas_task_group_search_indexes
  - name: resource management tests
    display_name: resource management tests
    run_on: rhel80-large
    tasks:
      - .resource-management
