{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2019
  },
  "plugins": [
    "simple-import-sort",
    "import",
    "@typescript-eslint",
    "prettier",
    "tsdoc"
  ],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:prettier/recommended"
  ],
  "env": {
    "node": true,
    "mocha": true,
    "es6": true
  },
  "rules": {
    "no-restricted-properties": [
      "error",
      {
        "object": "describe",
        "property": "only"
      },
      {
        "object": "it",
        "property": "only"
      },
      {
        "object": "context",
        "property": "only"
      }
    ],
    "prettier/prettier": "error",
    "tsdoc/syntax": "warn",
    "no-console": "error",
    "valid-typeof": "error",
    "eqeqeq": [
      "error",
      "always",
      {
        "null": "ignore"
      }
    ],
    "simple-import-sort/imports": "error",
    "simple-import-sort/exports": "error",
    "import/first": "error",
    "import/newline-after-import": "error",
    "import/no-duplicates": "error",
    "strict": [
      "error",
      "global"
    ],
    "@typescript-eslint/no-explicit-any": "off",
    "no-restricted-imports": [
      "error",
      {
        "paths": [
          {
            "name": ".",
            "message": "Please import directly from the relevant file instead."
          }
        ]
      }
    ],
    "no-restricted-syntax": [
      "error",
      {
        "selector": "TSEnumDeclaration",
        "message": "Do not declare enums"
      },
      {
        "selector": "BinaryExpression[operator=/[=!]==/] Identifier[name='undefined']",
        "message": "Do not strictly check undefined"
      },
      {
        "selector": "BinaryExpression[operator=/[=!]==/] Literal[raw='null']",
        "message": "Do not strictly check null"
      },
      {
        "selector": "BinaryExpression[operator=/[=!]==?/] Literal[value='undefined']",
        "message": "Do not strictly check typeof undefined (NOTE: currently this rule only detects the usage of 'undefined' string literal so this could be a misfire)"
      }
    ]
  },
  "overrides": [
    {
      "files": [
        "*.d.ts"
      ],
      "parser": "@typescript-eslint/parser",
      "rules": {
        "prettier/prettier": "off",
        "@typescript-eslint/no-empty-interface": "off",
        "@typescript-eslint/no-misused-new": "off",
        "@typescript-eslint/ban-types": "off",
        "@typescript-eslint/no-unused-vars": "off"
      }
    },
    {
      "files": [
        "*.mjs"
      ],
      "parserOptions": {
        "sourceType": "module"
      }
    },
    {
      // Settings for javascript test files
      "files": [
        "test/**/*.js"
      ],
      "parser": "espree",
      "plugins": [
        "prettier"
      ],
      "extends": [
        "eslint:recommended",
        "plugin:prettier/recommended"
      ],
      "rules": {
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-this-alias": "off",
        "@typescript-eslint/no-unused-vars": "off",
        // Since we use ts-node we should always require the TS code
        // Also we have patches to apply to the mock server, so we should always import from there
        "no-restricted-modules": [
          "error",
          {
            "patterns": [
              "**/../lib/**",
              "mongodb-mock-server"
            ]
          }
        ],
        "no-console": "off",
        "tsdoc/syntax": "off",
        "strict": [
          "off",
          "global"
        ],
        "no-restricted-syntax": "off"
      }
    },
    {
      // Settings for typescript test files
      "files": [
        "test/**/*.ts"
      ],
      "parser": "@typescript-eslint/parser",
      "rules": {
        "no-console": "off",
        "no-restricted-syntax": "off"
      }
    },
    {
      // Settings for typescript type test files
      "files": [
        "*.test-d.ts"
      ],
      "parser": "@typescript-eslint/parser",
      "rules": {
        "prettier/prettier": "error",
        "tsdoc/syntax": "warn",
        "no-console": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-unused-vars": "error",
        "@typescript-eslint/ban-ts-comment": "off",
        "@typescript-eslint/no-empty-function": "off"
      }
    }
  ]
}
