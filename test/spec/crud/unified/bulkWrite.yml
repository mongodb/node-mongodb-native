description: bulkWrite

schemaVersion: '1.0'

runOnRequirements:
  -
    minServerVersion: '2.6'

createEntities:
  -
    client:
      id: &client0 client0
  -
    database:
      id: &database0 database0
      client: client0
      databaseName: &database_name crud-v1
  -
    collection:
      id: &collection0 collection0
      database: database0
      collectionName: &collection_name coll

initialData:
  -
    collectionName: *collection_name
    databaseName: *database_name
    documents:
      - { _id: 1, x: 11 }
      - { _id: 2, x: 22 }

tests:
  -
    description: 'BulkWrite with deleteOne operations'
    operations:
      -
        object: *collection0
        name: bulkWrite
        arguments:
          # Note: as in the "DeleteOne when many documents match" test in
          # deleteOne.yml, we omit a deleteOne operation that might match
          # multiple documents as that would hinder our ability to assert the
          # final state of the collection under test.
          requests:
            -
              # does not match an existing document
              deleteOne:
                filter: { _id: 3 }
            -
              # deletes the matched document
              deleteOne:
                filter: { _id: 2 }
          ordered: true
        expectResult:
          deletedCount: 1
          insertedCount: 0
          insertedIds:
            $$unsetOrMatches: {  }
          matchedCount: 0
          modifiedCount: 0
          upsertedCount: 0
          upsertedIds: {  }
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 1, x: 11 }
  -
    description: 'BulkWrite with deleteMany operations'
    operations:
      -
        object: *collection0
        name: bulkWrite
        arguments:
          requests:
            -
              # does not match any existing documents
              deleteMany:
                filter: { x: { $lt: 11 } }
            -
              # deletes the matched documents
              deleteMany:
                filter: { x: { $lte: 22 } }
          ordered: true
        expectResult:
          deletedCount: 2
          insertedCount: 0
          insertedIds:
            $$unsetOrMatches: {  }
          matchedCount: 0
          modifiedCount: 0
          upsertedCount: 0
          upsertedIds: {  }
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents: []
  -
    description: 'BulkWrite with insertOne operations'
    operations:
      -
        object: *collection0
        name: bulkWrite
        arguments:
          requests:
            -
              insertOne:
                document: { _id: 3, x: 33 }
            -
              insertOne:
                document: { _id: 4, x: 44 }
          ordered: true
        expectResult:
          deletedCount: 0
          insertedCount: 2
          insertedIds:
            $$unsetOrMatches:
              '0': 3
              '1': 4
          matchedCount: 0
          modifiedCount: 0
          upsertedCount: 0
          upsertedIds: {  }
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 1, x: 11 }
          - { _id: 2, x: 22 }
          - { _id: 3, x: 33 }
          - { _id: 4, x: 44 }
  -
    description: 'BulkWrite with replaceOne operations'
    operations:
      -
        object: *collection0
        name: bulkWrite
        arguments:
          # Note: as in the "ReplaceOne when many documents match" test in
          # replaceOne.yml, we omit a replaceOne operation that might match
          # multiple documents as that would hinder our ability to assert the
          # final state of the collection under test.
          requests:
            -
              # does not match an existing document
              replaceOne:
                filter: { _id: 3 }
                replacement: { x: 33 }
            -
              # modifies the matched document
              replaceOne:
                filter: { _id: 1 }
                replacement: { x: 12 }
            -
              # does not match an existing document and upserts
              replaceOne:
                filter: { _id: 3 }
                replacement: { x: 33 }
                upsert: true
          ordered: true
        expectResult:
          deletedCount: 0
          insertedCount: 0
          insertedIds:
            $$unsetOrMatches: {  }
          matchedCount: 1
          modifiedCount: 1
          upsertedCount: 1
          upsertedIds: { '2': 3 }
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 1, x: 12 }
          - { _id: 2, x: 22 }
          - { _id: 3, x: 33 }
  -
    description: 'BulkWrite with updateOne operations'
    operations:
      -
        object: *collection0
        name: bulkWrite
        arguments:
          # Note: as in the "UpdateOne when many documents match" test in
          # updateOne.yml, we omit an updateOne operation that might match
          # multiple documents as that would hinder our ability to assert the
          # final state of the collection under test.
          requests:
            -
              # does not match an existing document
              updateOne:
                filter: { _id: 0 }
                update: { $set: { x: 0 } }
            -
              # does not modify the matched document
              updateOne:
                filter: { _id: 1 }
                update: { $set: { x: 11 } }
            -
              # modifies the matched document
              updateOne:
                filter: { _id: 2 }
                update: { $inc: { x: 1 } }
            -
              # does not match an existing document and upserts
              updateOne:
                filter: { _id: 3 }
                update: { $set: { x: 33 } }
                upsert: true
          ordered: true
        expectResult:
          deletedCount: 0
          insertedCount: 0
          insertedIds:
            $$unsetOrMatches: {  }
          matchedCount: 2
          modifiedCount: 1
          upsertedCount: 1
          upsertedIds: { '3': 3 }
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 1, x: 11 }
          - { _id: 2, x: 23 }
          - { _id: 3, x: 33 }
  -
    description: 'BulkWrite with updateMany operations'
    operations:
      -
        object: *collection0
        name: bulkWrite
        arguments:
          requests:
            -
              # does not match any existing documents
              updateMany:
                filter: { x: { $lt: 11 } }
                update: { $set: { x: 0 } }
            -
              # does not modify the matched documents
              updateMany:
                filter: { x: { $lte: 22 } }
                update: { $unset: { y: 1 } }
            -
              # modifies the matched documents
              updateMany:
                filter: { x: { $lte: 22 } }
                update: { $inc: { x: 1 } }
            -
              # does not match any existing documents and upserts
              updateMany:
                filter: { _id: 3 }
                update: { $set: { x: 33 } }
                upsert: true
          ordered: true
        expectResult:
          deletedCount: 0
          insertedCount: 0
          insertedIds:
            $$unsetOrMatches: {  }
          matchedCount: 4
          modifiedCount: 2
          upsertedCount: 1
          upsertedIds: { '3': 3 }
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 1, x: 12 }
          - { _id: 2, x: 23 }
          - { _id: 3, x: 33 }
  -
    description: 'BulkWrite with mixed ordered operations'
    operations:
      -
        object: *collection0
        name: bulkWrite
        arguments:
          requests:
            -
              insertOne:
                document: { _id: 3, x: 33 }
            -
              updateOne:
                filter: { _id: 2 }
                update: { $inc: { x: 1 } }
            -
              updateMany:
                filter: { _id: { $gt: 1 } }
                update: { $inc: { x: 1 } }
            -
              insertOne:
                document: { _id: 4, x: 44 }
            -
              deleteMany:
                filter: { x: { $nin: [ 24, 34 ] } }
            -
              replaceOne:
                filter: { _id: 4 }
                replacement: { _id: 4, x: 44 }
                upsert: true
          ordered: true
        expectResult:
          deletedCount: 2
          insertedCount: 2
          insertedIds:
            $$unsetOrMatches:
              '0': 3
              '3': 4
          matchedCount: 3
          modifiedCount: 3
          upsertedCount: 1
          upsertedIds: { '5': 4 }
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 2, x: 24 }
          - { _id: 3, x: 34 }
          - { _id: 4, x: 44 }
  -
    description: 'BulkWrite with mixed unordered operations'
    operations:
      -
        object: *collection0
        name: bulkWrite
        arguments:
          # We omit inserting multiple documents and updating documents that may
          # not exist at the start of this test as we cannot assume the order in
          # which the operations will execute.
          requests:
            -
              replaceOne:
                filter: { _id: 3 }
                replacement: { _id: 3, x: 33 }
                upsert: true
            -
              deleteOne:
                filter: { _id: 1 }
            -
              updateOne:
                filter: { _id: 2 }
                update: { $inc: { x: 1 } }
          ordered: false
        expectResult:
          deletedCount: 1
          insertedCount: 0
          insertedIds:
            $$unsetOrMatches: {  }
          matchedCount: 1
          modifiedCount: 1
          upsertedCount: 1
          upsertedIds: { '0': 3 }
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 2, x: 23 }
          - { _id: 3, x: 33 }
  -
    description: 'BulkWrite continue-on-error behavior with unordered (preexisting duplicate key)'
    operations:
      -
        object: *collection0
        name: bulkWrite
        arguments:
          requests:
            -
              insertOne:
                document: { _id: 2, x: 22 }
            -
              insertOne:
                document: { _id: 3, x: 33 }
            -
              insertOne:
                document: { _id: 4, x: 44 }
          ordered: false
        expectError:
          isError: true
          expectResult:
            deletedCount: 0
            insertedCount: 2
            # Since the map of insertedIds is generated before execution it
            # could indicate inserts that did not actually succeed. We omit this
            # field rather than expect drivers to provide an accurate map
            # filtered by write errors.
            matchedCount: 0
            modifiedCount: 0
            upsertedCount: 0
            upsertedIds: {  }
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 1, x: 11 }
          - { _id: 2, x: 22 }
          - { _id: 3, x: 33 }
          - { _id: 4, x: 44 }
  -
    description: 'BulkWrite continue-on-error behavior with unordered (duplicate key in requests)'
    operations:
      -
        object: *collection0
        name: bulkWrite
        arguments:
          requests:
            -
              insertOne:
                document: { _id: 3, x: 33 }
            -
              insertOne:
                document: { _id: 3, x: 33 }
            -
              insertOne:
                document: { _id: 4, x: 44 }
          ordered: false
        expectError:
          isError: true
          expectResult:
            deletedCount: 0
            insertedCount: 2
            # Since the map of insertedIds is generated before execution it
            # could indicate inserts that did not actually succeed. We omit this
            # field rather than expect drivers to provide an accurate map
            # filtered by write errors.
            matchedCount: 0
            modifiedCount: 0
            upsertedCount: 0
            upsertedIds: {  }
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 1, x: 11 }
          - { _id: 2, x: 22 }
          - { _id: 3, x: 33 }
          - { _id: 4, x: 44 }
