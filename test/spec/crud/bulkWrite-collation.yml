description: bulkWrite-collation

schemaVersion: '1.4'

runOnRequirements:
  -
    minServerVersion: '3.4'
    serverless: forbid

createEntities:
  -
    client:
      id: &client0 client0
  -
    database:
      id: &database0 database0
      client: client0
      databaseName: &database_name crud-v1
  -
    collection:
      id: &collection0 collection0
      database: database0
      collectionName: &collection_name coll

initialData:
  -
    collectionName: *collection_name
    databaseName: *database_name
    documents:
      - { _id: 1, x: 11 }
      - { _id: 2, x: ping }
      - { _id: 3, x: pINg }
      - { _id: 4, x: pong }
      - { _id: 5, x: pONg }

# See: https://www.mongodb.com/docs/manual/reference/collation/#collation-document
tests:
  -
    description: 'BulkWrite with delete operations and collation'
    operations:
      -
        object: *collection0
        name: bulkWrite
        arguments:
          requests:
            -
              # matches two documents but deletes one
              deleteOne:
                filter: { x: "PING" }
                collation: { locale: "en_US", strength: 2 }
            -
              # matches the remaining document and deletes it
              deleteOne:
                filter: { x: "PING" }
                collation: { locale: "en_US", strength: 2 }
            -
              # matches two documents and deletes them
              deleteMany:
                filter: { x: "PONG" }
                collation: { locale: "en_US", strength: 2 }
          ordered: true
        expectResult:
          deletedCount: 4
          insertedCount: 0
          insertedIds:
            $$unsetOrMatches: {  }
          matchedCount: 0
          modifiedCount: 0
          upsertedCount: 0
          upsertedIds: {  }
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 1, x: 11 }
  -
    description: 'BulkWrite with update operations and collation'
    operations:
      -
        object: *collection0
        name: bulkWrite
        arguments:
          requests:
            -
              # matches only one document due to strength and updates
              updateMany:
                filter: { x: "ping" }
                update: { $set: { x: "PONG" } }
                collation: { locale: "en_US", strength: 3 }
            -
              # matches one document and updates
              updateOne:
                filter: { x: "ping" }
                update: { $set: { x: "PONG" } }
                collation: { locale: "en_US", strength: 2 }
            -
              # matches no document due to strength and upserts
              replaceOne:
                filter: { x: "ping" }
                replacement: { _id: 6, x: "ping" }
                upsert: true
                collation: { locale: "en_US", strength: 3 }
            -
              # matches two documents and updates
              updateMany:
                filter: { x: "pong" }
                update: { $set: { x: "PONG" } }
                collation: { locale: "en_US", strength: 2 }
          ordered: true
        expectResult:
          deletedCount: 0
          insertedCount: 0
          insertedIds:
            $$unsetOrMatches: {  }
          matchedCount: 6
          modifiedCount: 4
          upsertedCount: 1
          upsertedIds: { '2': 6 }
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - {_id: 1, x: 11 }
          - {_id: 2, x: "PONG" }
          - {_id: 3, x: "PONG" }
          - {_id: 4, x: "PONG" }
          - {_id: 5, x: "PONG" }
          - {_id: 6, x: "ping" }
