description: commit

schemaVersion: '1.3'

runOnRequirements:
  -
    minServerVersion: '4.0'
    topologies:
      - replicaset
  -
    minServerVersion: 4.1.8
    topologies:
      - sharded
      - load-balanced

createEntities:
  -
    client:
      id: &client0 client0
      useMultipleMongoses: false
      observeEvents:
        - commandStartedEvent
  -
    database:
      id: &database0 database0
      client: *client0
      databaseName: &database_name transaction-tests
  -
    collection:
      id: &collection0 collection0
      database: *database0
      collectionName: &collection_name test
  -
    session:
      id: &session0 session0
      client: *client0
  # Define a second set of entities for a retryWrites=false client
  -
    client:
      id: &client1 client1
      useMultipleMongoses: false
      uriOptions:
        retryWrites: false
      observeEvents:
        - commandStartedEvent
  -
    database:
      id: &database1 database1
      client: *client1
      databaseName: *database_name
  -
    collection:
      id: &collection1 collection1
      database: *database1
      collectionName: *collection_name
  -
    session:
      id: &session1 session1
      client: *client1

initialData:
  -
    collectionName: *collection_name
    databaseName: *database_name
    documents: []

tests:
  -
    description: commit
    operations:
      -
        object: *session0
        name: startTransaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: commitTransaction
      # Again, to verify that txnNumber is incremented
      -
        object: *session0
        name: startTransaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 2 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 2 } }
      -
        object: *session0
        name: commitTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: commitTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 2 }
                ordered: true
                readConcern:
                  afterClusterTime: { $$exists: true }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '2' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '2' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: commitTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 1 }
          - { _id: 2 }
  -
    description: 'rerun commit after empty transaction'
    operations:
      -
        object: *session0
        name: startTransaction
      -
        object: *session0
        name: commitTransaction
      # Rerun the commit (which does not increment the txnNumber)
      -
        object: *session0
        name: commitTransaction
      -
        object: *session0
        name: startTransaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: commitTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '2' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '2' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: commitTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 1 }
  -
    description: 'multiple commits in a row'
    operations:
      -
        object: *session0
        name: startTransaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: commitTransaction
      -
        object: *session0
        name: commitTransaction
      -
        object: *session0
        name: commitTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: commitTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                # commitTransaction applies w:majority on retries
                writeConcern:
                  w: majority
                  wtimeout: 10000
              commandName: commitTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern:
                  w: majority
                  wtimeout: 10000
              commandName: commitTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 1 }
  -
    description: 'write concern error on commit'
    operations:
      -
        object: *session0
        name: startTransaction
        arguments:
          writeConcern:
            w: 10
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: commitTransaction
        expectError:
          # {
          #   'ok': 1.0,
          #   'writeConcernError': {
          #     'code': 100,
          #     'codeName': 'UnsatisfiableWriteConcern',
          #     'errmsg': 'Not enough data-bearing nodes'
          #   }
          # }
          errorLabelsOmit:
            - TransientTransactionError
            - UnknownTransactionCommitResult
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 1 }
  -
    description: 'commit without start'
    operations:
      -
        object: *session0
        name: commitTransaction
        expectError:
          errorContains: 'no transaction started'
    expectEvents:
      -
        client: *client0
        events: []
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents: []
  -
    description: 'commit after no-op abort'
    operations:
      -
        object: *session0
        name: startTransaction
      -
        object: *session0
        name: abortTransaction
      -
        object: *session0
        name: commitTransaction
        expectError:
          errorContains: 'Cannot call commitTransaction after calling abortTransaction'
    expectEvents:
      -
        client: *client0
        events: []
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents: []
  -
    description: 'commit after abort'
    operations:
      -
        object: *session0
        name: startTransaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: abortTransaction
      -
        object: *session0
        name: commitTransaction
        expectError:
          errorContains: 'Cannot call commitTransaction after calling abortTransaction'
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
  -
    description: 'multiple commits after empty transaction'
    operations:
      -
        object: *session0
        name: startTransaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: abortTransaction
      # Increments txnNumber
      -
        object: *session0
        name: startTransaction
      # These commits aren't sent to server, transaction is empty
      -
        object: *session0
        name: commitTransaction
      -
        object: *session0
        name: commitTransaction
      # Verify that previous, empty transaction incremented txnNumber
      -
        object: *session0
        name: startTransaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: abortTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern:
                  afterClusterTime: { $$exists: true }
                lsid: { $$sessionLsid: *session0 }
                # txnNumber 2 was skipped
                txnNumber: { $numberLong: '3' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '3' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents: []
  -
    description: 'reset session state commit'
    operations:
      -
        object: *session1
        name: startTransaction
      -
        object: *collection1
        name: insertOne
        arguments:
          session: *session1
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session1
        name: commitTransaction
      # Running any operation after an ended transaction resets the session state to "no transaction"
      -
        object: *collection1
        name: insertOne
        arguments:
          session: *session1
          document: { _id: 2 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 2 } }
      # Calling commit again should error instead of re-running the commit
      -
        object: *session1
        name: commitTransaction
        expectError:
          errorContains: 'no transaction started'
    expectEvents:
      -
        client: *client1
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session1 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session1 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: commitTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 2 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session1 }
                txnNumber: { $$exists: false }
                startTransaction: { $$exists: false }
                autocommit: { $$exists: false }
              commandName: insert
              databaseName: *database_name
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 1 }
          - { _id: 2 }
  -
    description: 'reset session state abort'
    operations:
      -
        object: *session1
        name: startTransaction
      -
        object: *collection1
        name: insertOne
        arguments:
          session: *session1
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session1
        name: abortTransaction
      # Running any operation after an ended transaction resets the session state to "no transaction"
      -
        object: *collection1
        name: insertOne
        arguments:
          session: *session1
          document: { _id: 2 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 2 } }
      # Calling abort should error with "no transaction started" instead of "cannot call abortTransaction twice"
      -
        object: *session1
        name: abortTransaction
        expectError:
          errorContains: 'no transaction started'
    expectEvents:
      -
        client: *client1
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session1 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session1 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 2 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session1 }
                txnNumber: { $$exists: false }
                startTransaction: { $$exists: false }
                autocommit: { $$exists: false }
              commandName: insert
              databaseName: *database_name
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 2 }
