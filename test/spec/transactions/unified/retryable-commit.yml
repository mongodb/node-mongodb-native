description: retryable-commit

schemaVersion: '1.4'

runOnRequirements:
  -
    minServerVersion: '4.0'
    topologies:
      - replicaset
  -
    minServerVersion: 4.1.8
    topologies:
      - sharded
      - load-balanced

createEntities:
  -
    client:
      id: &client0 client0
      useMultipleMongoses: false
      observeEvents:
        - commandStartedEvent
  -
    database:
      id: &database0 database0
      client: *client0
      databaseName: &database_name transaction-tests
  -
    collection:
      id: &collection0 collection0
      database: *database0
      collectionName: &collection_name test
  -
    session:
      id: &session0 session0
      client: *client0
  # Define a second set of entities for a retryWrites=false client
  -
    client:
      id: &client1 client1
      useMultipleMongoses: false
      uriOptions:
        retryWrites: false
      observeEvents:
        - commandStartedEvent
  -
    database:
      id: &database1 database1
      client: *client1
      databaseName: *database_name
  -
    collection:
      id: &collection1 collection1
      database: *database1
      collectionName: *collection_name
  -
    session:
      id: &session1 session1
      client: *client1

initialData:
  -
    collectionName: *collection_name
    databaseName: *database_name
    documents: []

tests:
  -
    description: 'commitTransaction fails after Interrupted'
    runOnRequirements:
      # Serverless sets empty `codeName` on failpoint errors. Remove once CLOUDP-280424 is fixed.
      - serverless: forbid
    operations:
      -
        object: testRunner
        name: failPoint
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
              failCommands:
                - commitTransaction
              errorCode: 11601
              closeConnection: false
      -
        object: *session0
        name: startTransaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: commitTransaction
        expectError:
          errorCodeName: Interrupted
          errorLabelsOmit:
            - RetryableWriteError
            - TransientTransactionError
            - UnknownTransactionCommitResult
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: commitTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents: []
  -
    description: 'commitTransaction is not retried after UnsatisfiableWriteConcern error'
    operations:
      -
        object: testRunner
        name: failPoint
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
              failCommands:
                - commitTransaction
              writeConcernError:
                code: 100
                errmsg: 'Not enough data-bearing nodes'
      -
        object: *session0
        name: startTransaction
        arguments:
          writeConcern:
            w: majority
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: commitTransaction
        expectError:
          errorLabelsOmit:
            - RetryableWriteError
            - TransientTransactionError
            - UnknownTransactionCommitResult
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern:
                  w: majority
              commandName: commitTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 1 }
  -
    description: 'commitTransaction fails after two errors'
    # Failing commitTransaction with closeConnection:true may abort the
    # transaction (CLOUDP-202309).
    runOnRequirements:
      - serverless: forbid
    operations:
      -
        object: testRunner
        name: failPoint
        arguments:
          client: *client1
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 2 }
            data:
              failCommands:
                - commitTransaction
              closeConnection: true
      -
        object: *session1
        name: startTransaction
      -
        object: *collection1
        name: insertOne
        arguments:
          session: *session1
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      # First call to commit fails after a single retry attempt.
      -
        object: *session1
        name: commitTransaction
        expectError:
          errorLabelsContain:
            - RetryableWriteError
            - UnknownTransactionCommitResult
          errorLabelsOmit:
            - TransientTransactionError
      # Second call to commit succeeds because the failpoint was disabled.
      -
        object: *session1
        name: commitTransaction
    expectEvents:
      -
        client: *client1
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session1 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session1 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: commitTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session1 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                # commitTransaction applies w:majority on retries
                writeConcern:
                  w: majority
                  wtimeout: 10000
              commandName: commitTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session1 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern:
                  w: majority
                  wtimeout: 10000
              commandName: commitTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 1 }
  -
    description: 'commitTransaction applies majority write concern on retries'
    # Failing commitTransaction with closeConnection:true may abort the
    # transaction (CLOUDP-202309).
    runOnRequirements:
      - serverless: forbid
    operations:
      -
        object: testRunner
        name: failPoint
        arguments:
          client: *client1
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 2 }
            data:
              failCommands:
                - commitTransaction
              closeConnection: true
      -
        object: *session1
        name: startTransaction
        arguments:
          writeConcern:
            w: 2
            journal: true
            wtimeoutMS: 5000
      -
        object: *collection1
        name: insertOne
        arguments:
          session: *session1
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      # First call to commit fails after a single retry attempt.
      -
        object: *session1
        name: commitTransaction
        expectError:
          errorLabelsContain:
            - RetryableWriteError
            - UnknownTransactionCommitResult
          errorLabelsOmit:
            - TransientTransactionError
      # Second call to commit succeeds because the failpoint was disabled.
      -
        object: *session1
        name: commitTransaction
    expectEvents:
      -
        client: *client1
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session1 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session1 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern:
                  w: 2
                  j: true
                  wtimeout: 5000
              commandName: commitTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session1 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                # commitTransaction applies w:majority on retries
                writeConcern:
                  w: majority
                  j: true
                  wtimeout: 5000
              commandName: commitTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session1 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern:
                  w: majority
                  j: true
                  wtimeout: 5000
              commandName: commitTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 1 }
  -
    description: 'commitTransaction succeeds after connection error'
    # Failing commitTransaction with closeConnection:true may abort the
    # transaction (CLOUDP-202309).
    runOnRequirements:
      - serverless: forbid
    operations:
      -
        object: testRunner
        name: failPoint
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
              failCommands:
                - commitTransaction
              closeConnection: true
      -
        object: *session0
        name: startTransaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: commitTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: commitTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                # commitTransaction applies w:majority on retries
                writeConcern:
                  w: majority
                  wtimeout: 10000
              commandName: commitTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 1 }
