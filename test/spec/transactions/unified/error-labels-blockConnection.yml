# This file contains a single test that should be in error-labels.yml. The test
# was moved from error-labels.yml during the spec work for client-side
# operations timeout because it uses the blockConnection parameter in
# failCommand, which is only available in server versions 4.2+. It should be
# merged back into error-labels.yml when that test file is ported to the
# unified test format as the format allows for per-test runOn requirements.
description: error-labels-blockConnection

schemaVersion: '1.3'

runOnRequirements:
  -
    minServerVersion: '4.2'
    topologies:
      - replicaset
      - sharded
      - load-balanced

createEntities:
  -
    client:
      id: &client0 client0
      useMultipleMongoses: false
      uriOptions:
        socketTimeoutMS: 100
      observeEvents:
        - commandStartedEvent
  -
    database:
      id: &database0 database0
      client: *client0
      databaseName: &database_name transaction-tests
  -
    collection:
      id: &collection0 collection0
      database: *database0
      collectionName: &collection_name test
  -
    session:
      id: &session0 session0
      client: *client0

initialData:
  -
    collectionName: *collection_name
    databaseName: *database_name
    documents: []

tests:
  # This test previously used failCommand with closeConnection=true to force a
  # network error, but this does not work after CSOT is implemented because
  # network errors are retried indefinitely. It has been changed to use
  # socketTimeoutMS with blockConnection to force a network error because
  # drivers only retry socketTimeoutMS-related errors once rather than
  # indefinitely.
  -
    description: 'add RetryableWriteError and UnknownTransactionCommitResult labels to connection errors'
    operations:
      -
        object: testRunner
        name: failPoint
        arguments:
          client: *client0
          failPoint:
            # Drivers stop retrying after two socket timeouts that occur due to the use of socketTimeoutMS
            configureFailPoint: failCommand
            mode: { times: 2 }
            data:
              failCommands:
                - commitTransaction
              blockConnection: true
              blockTimeMS: 150
      -
        object: *session0
        name: startTransaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: commitTransaction
        expectError:
          errorLabelsContain:
            - RetryableWriteError
            - UnknownTransactionCommitResult
          errorLabelsOmit:
            - TransientTransactionError
      -
        object: *session0
        name: commitTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: commitTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                # commitTransaction applies w:majority on retries
                writeConcern:
                  w: majority
                  wtimeout: 10000
              commandName: commitTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern:
                  w: majority
                  wtimeout: 10000
              commandName: commitTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 1 }
