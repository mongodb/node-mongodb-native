description: mongos-recovery-token

schemaVersion: '1.9'

runOnRequirements:
  -
    minServerVersion: 4.1.8
    # serverless proxy doesn't use recovery tokens
    serverless: forbid
    topologies:
      - sharded
      - load-balanced

createEntities:
  -
    client:
      id: &client0 client0
      useMultipleMongoses: true
      observeEvents:
        - commandStartedEvent
  -
    database:
      id: &database0 database0
      client: *client0
      databaseName: &database_name transaction-tests
  -
    collection:
      id: &collection0 collection0
      database: *database0
      collectionName: &collection_name test
  -
    session:
      id: &session0 session0
      client: *client0

initialData:
  -
    collectionName: *collection_name
    databaseName: *database_name
    documents: []

tests:
  -
    description: 'commitTransaction explicit retries include recoveryToken'
    operations:
      -
        object: *session0
        name: startTransaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: commitTransaction
      -
        object: *session0
        name: commitTransaction
      -
        object: *session0
        name: commitTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
                recoveryToken: { $$exists: true }
              commandName: commitTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                # commitTransaction applies w:majority on retries
                writeConcern:
                  w: majority
                  wtimeout: 10000
                recoveryToken: { $$exists: true }
              commandName: commitTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                # commitTransaction applies w:majority on retries
                writeConcern:
                  w: majority
                  wtimeout: 10000
                recoveryToken: { $$exists: true }
              commandName: commitTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 1 }
  -
    description: 'commitTransaction retry fails on new mongos'
    # Note: test utilizes targetedFailPoint, which is incompatible with
    # load-balanced and useMultipleMongoses:true
    runOnRequirements:
      - topologies: [ sharded ]
    operations:
      -
        object: testRunner
        name: createEntities
        arguments:
          entities:
            - client:
                id: &client1 client1
                useMultipleMongoses: true
                uriOptions:
                  # Increase heartbeatFrequencyMS to avoid the race condition where an in
                  # flight heartbeat refreshes the first mongoes' SDAM state in between
                  # the initial commitTransaction and the retry attempt.
                  heartbeatFrequencyMS: 30000
                observeEvents:
                  - commandStartedEvent
            - database:
                id: &database1 database1
                client: *client1
                databaseName: *database_name
            - collection:
                id: &collection1 collection1
                database: *database1
                collectionName: *collection_name
            - session:
                id: &session1 session1
                client: *client1
      -
        object: *session1
        name: startTransaction
      -
        object: *collection1
        name: insertOne
        arguments:
          session: *session1
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      # Enable the fail point only on the Mongos that session0 is pinned to.
      # Fail hello/legacy hello to prevent the heartbeat requested directly after the
      # retryable commit error from racing with server selection for the retry.
      # Note: times: 7 is slightly artbitrary but it accounts for one failed
      # commit and some SDAM heartbeats. A test runner will have multiple
      # clients connected to this server so this fail point configuration
      # is also racy.
      -
        object: testRunner
        name: targetedFailPoint
        arguments:
          session: *session1
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 7 }
            data:
              failCommands:
                - commitTransaction
                - isMaster
                - hello
              closeConnection: true
      # The first commitTransaction sees a retryable connection error due to
      # the fail point and also fails on the server. The retry attempt on a
      # new mongos will wait for the transaction to timeout and will fail
      # because the transaction was aborted. Note that the retry attempt should
      # not select the original mongos because that server's SDAM state is
      # reset by the connection error, heartbeatFrequencyMS is high, and
      # subsequent heartbeats should fail.
      -
        object: *session1
        name: commitTransaction
        expectError:
          errorLabelsContain:
            - TransientTransactionError
          errorLabelsOmit:
            - UnknownTransactionCommitResult
          errorCodeName: NoSuchTransaction
    expectEvents:
      -
        client: *client1
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session1 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session1 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
                recoveryToken: { $$exists: true }
              commandName: commitTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session1 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                # commitTransaction applies w:majority on retries
                writeConcern:
                  w: majority
                  wtimeout: 10000
                recoveryToken: { $$exists: true }
              commandName: commitTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents: []
  -
    description: 'abortTransaction sends recoveryToken'
    # Note: test utilizes targetedFailPoint, which is incompatible with
    # load-balanced and useMultipleMongoses:true
    runOnRequirements:
      - topologies: [ sharded ]
    operations:
      -
        object: *session0
        name: startTransaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      # Enable the fail point only on the mongos that session0 is pinned to
      -
        object: testRunner
        name: targetedFailPoint
        arguments:
          session: *session0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
              failCommands:
                - abortTransaction
              closeConnection: true
      # The first abortTransaction sees a retryable connection error due to
      # the fail point. The retry attempt on a new mongos will send the
      # recoveryToken. Note that the retry attempt will also fail because the
      # server does not yet support aborting from a new mongos, however this
      # operation should "succeed" since abortTransaction ignores errors.
      -
        object: *session0
        name: abortTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
                recoveryToken: { $$exists: true }
              commandName: abortTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
                recoveryToken: { $$exists: true }
              commandName: abortTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents: []
