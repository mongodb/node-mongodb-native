description: causal-consistency

schemaVersion: '1.3'

runOnRequirements:
  -
    minServerVersion: '4.0'
    topologies:
      - replicaset
  -
    minServerVersion: 4.1.8
    topologies:
      - sharded
      - load-balanced

createEntities:
  -
    client:
      id: &client0 client0
      useMultipleMongoses: false
      uriOptions:
        retryWrites: false
      observeEvents:
        - commandStartedEvent
  -
    database:
      id: &database0 database0
      client: *client0
      databaseName: &database_name transaction-tests
  -
    collection:
      id: &collection0 collection0
      database: *database0
      collectionName: &collection_name test
  -
    session:
      id: &session0 session0
      client: *client0
  -
    session:
      id: &session_no_cc session_no_cc
      client: *client0
      sessionOptions:
        causalConsistency: false

initialData:
  -
    collectionName: *collection_name
    databaseName: *database_name
    documents:
      - { _id: 1, count: 0 }

tests:
  -
    description: 'causal consistency'
    operations:
      # Update a document without a transaction
      - &updateOne
        object: *collection0
        name: updateOne
        arguments:
          session: *session0
          filter: { _id: 1 }
          update: { $inc: { count: 1 } }
        expectResult:
          matchedCount: 1
          modifiedCount: 1
          upsertedCount: 0
      # Updating the same document inside a transaction.
      # Casual consistency ensures that the transaction snapshot is causally after the first updateOne.
      -
        object: *session0
        name: startTransaction
      - *updateOne
      -
        object: *session0
        name: commitTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                update: *collection_name
                updates:
                  -
                    q: { _id: 1 }
                    u: { $inc: { count: 1 } }
                    multi: { $$unsetOrMatches: false }
                    upsert: { $$unsetOrMatches: false }
                ordered: true
                lsid: { $$sessionLsid: *session0 }
                readConcern: { $$exists: false }
                txnNumber: { $$exists: false }
                startTransaction: { $$exists: false }
                autocommit: { $$exists: false }
                writeConcern: { $$exists: false }
              commandName: update
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                update: *collection_name
                updates:
                  -
                    q: { _id: 1 }
                    u: { $inc: { count: 1 } }
                    multi: { $$unsetOrMatches: false }
                    upsert: { $$unsetOrMatches: false }
                ordered: true
                readConcern:
                  afterClusterTime: { $$exists: true }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: update
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: commitTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 1, count: 2 }
  -
    description: 'causal consistency disabled'
    operations:
      # Insert a document without a transaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session_no_cc
          document: { _id: 2 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 2 } }
      -
        object: *session_no_cc
        name: startTransaction
      -
        object: *collection0
        name: updateOne
        arguments:
          session: *session_no_cc
          filter: { _id: 1 }
          update: { $inc: { count: 1 } }
        expectResult:
          matchedCount: 1
          modifiedCount: 1
          upsertedCount: 0
      -
        object: *session_no_cc
        name: commitTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 2 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session_no_cc }
                txnNumber: { $$exists: false }
                autocommit: { $$exists: false }
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                update: *collection_name
                updates:
                  -
                    q: { _id: 1 }
                    u: { $inc: { count: 1 } }
                    multi: { $$unsetOrMatches: false }
                    upsert: { $$unsetOrMatches: false }
                ordered: true
                # No afterClusterTime
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session_no_cc }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: update
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session_no_cc }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: commitTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 1, count: 1 }
          - { _id: 2 }
