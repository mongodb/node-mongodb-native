description: retryable-abort-errorLabels

schemaVersion: '1.3'

runOnRequirements:
  -
    minServerVersion: 4.3.1 # failCommand errorLabels option
    topologies:
      - replicaset
      - sharded
      - load-balanced

createEntities:
  -
    client:
      id: &client0 client0
      useMultipleMongoses: false
      observeEvents:
        - commandStartedEvent
  -
    database:
      id: &database0 database0
      client: *client0
      databaseName: &database_name transaction-tests
  -
    collection:
      id: &collection0 collection0
      database: *database0
      collectionName: &collection_name test
  -
    session:
      id: &session0 session0
      client: *client0

initialData:
  -
    collectionName: *collection_name
    databaseName: *database_name
    documents: []

tests:
  -
    description: 'abortTransaction only retries once with RetryableWriteError from server'
    operations:
      -
        object: testRunner
        name: failPoint
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 2 }
            data:
              failCommands:
                - abortTransaction
              errorCode: 112 # WriteConflict, not a retryable error code
              # Override server behavior: send RetryableWriteError label with non-retryable error code
              errorLabels:
                - RetryableWriteError
      -
        object: *session0
        name: startTransaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: abortTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
          # Driver retries abort once
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents: []
  -
    description: 'abortTransaction does not retry without RetryableWriteError label'
    operations:
      -
        object: testRunner
        name: failPoint
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
              failCommands:
                - abortTransaction
              errorCode: 11600 # InterruptedAtShutdown, normally a retryable error code
              # Override server behavior: do not send RetryableWriteError label with retryable code
              errorLabels: []
      -
        object: *session0
        name: startTransaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: abortTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
    # Driver does not retry abort
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents: []
  -
    description: 'abortTransaction succeeds after NotWritablePrimary'
    operations:
      -
        object: testRunner
        name: failPoint
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
              failCommands:
                - abortTransaction
              errorCode: 10107
              errorLabels:
                - RetryableWriteError
              closeConnection: false
      -
        object: *session0
        name: startTransaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: abortTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents: []
  -
    description: 'abortTransaction succeeds after NotPrimaryOrSecondary'
    operations:
      -
        object: testRunner
        name: failPoint
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
              failCommands:
                - abortTransaction
              errorCode: 13436
              errorLabels:
                - RetryableWriteError
              closeConnection: false
      -
        object: *session0
        name: startTransaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: abortTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents: []
  -
    description: 'abortTransaction succeeds after NotPrimaryNoSecondaryOk'
    operations:
      -
        object: testRunner
        name: failPoint
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
              failCommands:
                - abortTransaction
              errorCode: 13435
              errorLabels:
                - RetryableWriteError
              closeConnection: false
      -
        object: *session0
        name: startTransaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: abortTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents: []
  -
    description: 'abortTransaction succeeds after InterruptedDueToReplStateChange'
    operations:
      -
        object: testRunner
        name: failPoint
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
              failCommands:
                - abortTransaction
              errorCode: 11602
              errorLabels:
                - RetryableWriteError
              closeConnection: false
      -
        object: *session0
        name: startTransaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: abortTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents: []
  -
    description: 'abortTransaction succeeds after InterruptedAtShutdown'
    operations:
      -
        object: testRunner
        name: failPoint
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
              failCommands:
                - abortTransaction
              errorCode: 11600
              errorLabels:
                - RetryableWriteError
              closeConnection: false
      -
        object: *session0
        name: startTransaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: abortTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents: []
  -
    description: 'abortTransaction succeeds after PrimarySteppedDown'
    operations:
      -
        object: testRunner
        name: failPoint
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
              failCommands:
                - abortTransaction
              errorCode: 189
              errorLabels:
                - RetryableWriteError
              closeConnection: false
      -
        object: *session0
        name: startTransaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: abortTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents: []
  -
    description: 'abortTransaction succeeds after ShutdownInProgress'
    operations:
      -
        object: testRunner
        name: failPoint
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
              failCommands:
                - abortTransaction
              errorCode: 91
              errorLabels:
                - RetryableWriteError
              closeConnection: false
      -
        object: *session0
        name: startTransaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: abortTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents: []
  -
    description: 'abortTransaction succeeds after HostNotFound'
    operations:
      -
        object: testRunner
        name: failPoint
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
              failCommands:
                - abortTransaction
              errorCode: 7
              errorLabels:
                - RetryableWriteError
              closeConnection: false
      -
        object: *session0
        name: startTransaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: abortTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents: []
  -
    description: 'abortTransaction succeeds after HostUnreachable'
    operations:
      -
        object: testRunner
        name: failPoint
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
              failCommands:
                - abortTransaction
              errorCode: 6
              errorLabels:
                - RetryableWriteError
              closeConnection: false
      -
        object: *session0
        name: startTransaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: abortTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents: []
  -
    description: 'abortTransaction succeeds after SocketException'
    operations:
      -
        object: testRunner
        name: failPoint
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
              failCommands:
                - abortTransaction
              errorCode: 9001
              errorLabels:
                - RetryableWriteError
              closeConnection: false
      -
        object: *session0
        name: startTransaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: abortTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents: []
  -
    description: 'abortTransaction succeeds after NetworkTimeout'
    operations:
      -
        object: testRunner
        name: failPoint
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
              failCommands:
                - abortTransaction
              errorCode: 89
              errorLabels:
                - RetryableWriteError
              closeConnection: false
      -
        object: *session0
        name: startTransaction
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: abortTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents: []
  -
    description: 'abortTransaction succeeds after WriteConcernError InterruptedAtShutdown'
    operations:
      -
        object: testRunner
        name: failPoint
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
              failCommands:
                - abortTransaction
              errorLabels:
                - RetryableWriteError
              writeConcernError:
                code: 11600
                errmsg: 'Replication is being shut down'
      -
        object: *session0
        name: startTransaction
        arguments:
          writeConcern:
            w: majority
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: abortTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern:
                  w: majority
              commandName: abortTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern:
                  w: majority
              commandName: abortTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents: []
  -
    description: 'abortTransaction succeeds after WriteConcernError InterruptedDueToReplStateChange'
    operations:
      -
        object: testRunner
        name: failPoint
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
              failCommands:
                - abortTransaction
              errorLabels:
                - RetryableWriteError
              writeConcernError:
                code: 11602
                errmsg: 'Replication is being shut down'
      -
        object: *session0
        name: startTransaction
        arguments:
          writeConcern:
            w: majority
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: abortTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern:
                  w: majority
              commandName: abortTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern:
                  w: majority
              commandName: abortTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents: []
  -
    description: 'abortTransaction succeeds after WriteConcernError PrimarySteppedDown'
    operations:
      -
        object: testRunner
        name: failPoint
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
              failCommands:
                - abortTransaction
              errorLabels:
                - RetryableWriteError
              writeConcernError:
                code: 189
                errmsg: 'Replication is being shut down'
      -
        object: *session0
        name: startTransaction
        arguments:
          writeConcern:
            w: majority
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: abortTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern:
                  w: majority
              commandName: abortTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern:
                  w: majority
              commandName: abortTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents: []
  -
    description: 'abortTransaction succeeds after WriteConcernError ShutdownInProgress'
    operations:
      -
        object: testRunner
        name: failPoint
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
              failCommands:
                - abortTransaction
              errorLabels:
                - RetryableWriteError
              writeConcernError:
                code: 91
                errmsg: 'Replication is being shut down'
      -
        object: *session0
        name: startTransaction
        arguments:
          writeConcern:
            w: majority
      -
        object: *collection0
        name: insertOne
        arguments:
          session: *session0
          document: { _id: 1 }
        expectResult:
          $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
      -
        object: *session0
        name: abortTransaction
    expectEvents:
      -
        client: *client0
        events:
          -
            commandStartedEvent:
              command:
                insert: *collection_name
                documents:
                  - { _id: 1 }
                ordered: true
                readConcern: { $$exists: false }
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: true
                autocommit: false
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *database_name
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern:
                  w: majority
              commandName: abortTransaction
              databaseName: admin
          -
            commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: '1' }
                startTransaction: { $$exists: false }
                autocommit: false
                writeConcern:
                  w: majority
              commandName: abortTransaction
              databaseName: admin
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents: []
