description: insertMany

schemaVersion: '1.0'

runOnRequirements:
  -
    minServerVersion: '3.6'
    topologies: [ replicaset ]

createEntities:
  -
    client:
      id: &client0 client0
      useMultipleMongoses: false
  -
    database:
      id: &database0 database0
      client: *client0
      databaseName: &database_name retryable-writes-tests
  -
    collection:
      id: &collection0 collection0
      database: *database0
      collectionName: &collection_name coll

initialData:
  -
    collectionName: *collection_name
    databaseName: *database_name
    documents:
      - { _id: 1, x: 11 }

tests:
  -
    description: 'InsertMany succeeds after one network error'
    operations:
      -
        name: failPoint
        object: testRunner
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: onPrimaryTransactionalWrite
            mode: { times: 1 }
      -
        object: *collection0
        name: insertMany
        arguments:
          documents:
            - { _id: 2, x: 22 }
            - { _id: 3, x: 33 }
          ordered: true
        expectResult:
          $$unsetOrMatches:
            insertedIds:
              $$unsetOrMatches:
                '0': 2
                '1': 3
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 1, x: 11 }
          - { _id: 2, x: 22 }
          - { _id: 3, x: 33 }
  -
    description: 'InsertMany with unordered execution'
    operations:
      -
        name: failPoint
        object: testRunner
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: onPrimaryTransactionalWrite
            mode: { times: 1 }
      -
        object: *collection0
        name: insertMany
        arguments:
          documents:
            - { _id: 2, x: 22 }
            - { _id: 3, x: 33 }
          ordered: false
        expectResult:
          $$unsetOrMatches:
            insertedIds:
              $$unsetOrMatches:
                '0': 2
                '1': 3
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 1, x: 11 }
          - { _id: 2, x: 22 }
          - { _id: 3, x: 33 }
  -
    description: 'InsertMany fails after multiple network errors'
    operations:
      -
        # Normally, a mongod will insert the documents as a batch with a single
        # commit. If this fails, mongod may try to insert each document one at a
        # time depending on the failure. Therefore our single insert command may
        # trigger the failpoint twice on each driver attempt. This test
        # permanently enables the fail point to ensure the retry attempt always
        # fails.
        name: failPoint
        object: testRunner
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: onPrimaryTransactionalWrite
            mode: alwaysOn
            data:
              failBeforeCommitExceptionCode: 1
      -
        object: *collection0
        name: insertMany
        arguments:
          documents:
            - { _id: 2, x: 22 }
            - { _id: 3, x: 33 }
            - { _id: 4, x: 44 }
          ordered: true
        expectError:
          isError: true
    outcome:
      -
        collectionName: *collection_name
        databaseName: *database_name
        documents:
          - { _id: 1, x: 11 }
