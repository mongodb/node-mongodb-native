description: commit-transienttransactionerror

schemaVersion: '1.3'

runOnRequirements:
  - minServerVersion: '4.0'
    topologies: [ replicaset ]
  - minServerVersion: 4.1.8
    topologies: [ sharded, load-balanced ]
    # serverless proxy doesn't append error labels to errors in transactions
    # caused by failpoints (CLOUDP-88216)
    serverless: forbid

createEntities:
  - client:
      id: &client0 client0
      useMultipleMongoses: false
      observeEvents: [ commandStartedEvent ]
  - database:
      id: &database0 database0
      client: *client0
      databaseName: &databaseName withTransaction-tests
  - collection:
      id: &collection0 collection0
      database: *database0
      collectionName: &collectionName test
  - session:
      id: &session0 session0
      client: *client0

initialData:
  - collectionName: *collectionName
    databaseName: *databaseName
    documents: []

# These tests use error codes where the TransientTransactionError label will be
# applied to the error response for commitTransaction. This will cause the
# entire transaction to be retried instead of commitTransaction.
#
# See: https://github.com/mongodb/mongo/blob/r4.1.6/src/mongo/db/handle_request_response.cpp
tests:
  -
    description: transaction is retried after commitTransaction TransientTransactionError (LockTimeout)
    operations:
      - name: failPoint
        object: testRunner
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 2 }
            data:
              failCommands: [ commitTransaction ]
              errorCode: 24 # LockTimeout
              closeConnection: false
      - &withTransaction
        name: withTransaction
        object: *session0
        arguments:
          callback:
            -
              name: insertOne
              object: *collection0
              arguments:
                session: *session0
                document: { _id: 1 }
              expectResult:
                $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
    expectEvents: &expectEvents
      - client: *client0
        events:
          - commandStartedEvent:
              command:
                insert: *collectionName
                documents:
                  - { _id: 1 }
                ordered: true
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: "1" }
                startTransaction: true
                autocommit: false
                # omitted fields
                readConcern: { $$exists: false }
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *databaseName
          - commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: "1" }
                autocommit: false
                # omitted fields
                readConcern: { $$exists: false }
                startTransaction: { $$exists: false }
                writeConcern: { $$exists: false }
              commandName: commitTransaction
              databaseName: admin
          - commandStartedEvent:
              command:
                insert: *collectionName
                documents:
                  - { _id: 1 }
                ordered: true
                lsid: { $$sessionLsid: *session0 }
                # second transaction will be causally consistent with the first
                readConcern: { afterClusterTime: { $$exists: true } }
                # txnNumber is incremented when retrying the transaction
                txnNumber: { $numberLong: "2" }
                startTransaction: true
                autocommit: false
                # omitted fields
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *databaseName
          - commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: "2" }
                autocommit: false
                # omitted fields
                readConcern: { $$exists: false }
                startTransaction: { $$exists: false }
                writeConcern: { $$exists: false }
              commandName: commitTransaction
              databaseName: admin
          - commandStartedEvent:
              command:
                insert: *collectionName
                documents:
                  - { _id: 1 }
                ordered: true
                lsid: { $$sessionLsid: *session0 }
                # third transaction will be causally consistent with the second
                readConcern: { afterClusterTime: { $$exists: true } }
                # txnNumber is incremented when retrying the transaction
                txnNumber: { $numberLong: "3" }
                startTransaction: true
                autocommit: false
                # omitted fields
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *databaseName
          - commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: "3" }
                autocommit: false
                # omitted fields
                readConcern: { $$exists: false }
                startTransaction: { $$exists: false }
                writeConcern: { $$exists: false }
              commandName: commitTransaction
              databaseName: admin
    outcome: &outcome
      - collectionName: *collectionName
        databaseName: *databaseName
        documents:
          - { _id: 1 }
  -
    description: transaction is retried after commitTransaction TransientTransactionError (WriteConflict)
    operations:
      - name: failPoint
        object: testRunner
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 2 }
            data:
              failCommands: [ commitTransaction ]
              errorCode: 112 # WriteConflict
              closeConnection: false
      - *withTransaction
    expectEvents: *expectEvents
    outcome: *outcome
  -
    description: transaction is retried after commitTransaction TransientTransactionError (SnapshotUnavailable)
    operations:
      - name: failPoint
        object: testRunner
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 2 }
            data:
              failCommands: [ commitTransaction ]
              errorCode: 246 # SnapshotUnavailable
              closeConnection: false
      - *withTransaction
    expectEvents: *expectEvents
    outcome: *outcome
  -
    description: transaction is retried after commitTransaction TransientTransactionError (NoSuchTransaction)
    operations:
      - name: failPoint
        object: testRunner
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 2 }
            data:
              failCommands: [ commitTransaction ]
              errorCode: 251 # NoSuchTransaction
              closeConnection: false
      - *withTransaction
    expectEvents: *expectEvents
    outcome: *outcome
