description: callback-retry

schemaVersion: '1.3'

runOnRequirements:
  - minServerVersion: '4.0'
    topologies: [ replicaset ]
  - minServerVersion: 4.1.8
    topologies: [ sharded, load-balanced ]

createEntities:
  - client:
      id: &client0 client0
      useMultipleMongoses: false
      observeEvents: [ commandStartedEvent ]
  - database:
      id: &database0 database0
      client: *client0
      databaseName: &databaseName withTransaction-tests
  - collection:
      id: &collection0 collection0
      database: *database0
      collectionName: &collectionName test
  - session:
      id: &session0 session0
      client: *client0
  # Define a second set of entities for useMultipleMongoses:true
  - client:
      id: &client1 client1
      useMultipleMongoses: true
      observeEvents: [ commandStartedEvent ]
  - database:
      id: &database1 database1
      client: *client1
      databaseName: *databaseName
  - collection:
      id: &collection1 collection1
      database: *database1
      collectionName: *collectionName
  - session:
      id: &session1 session1
      client: *client1

initialData:
  - collectionName: *collectionName
    databaseName: *databaseName
    documents: []

tests:
  -
    description: callback succeeds after multiple connection errors
    # Failing commitTransaction with closeConnection:true may abort the
    # transaction (CLOUDP-202309)
    runOnRequirements:
      - serverless: forbid
    operations:
      - name: failPoint
        object: testRunner
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 2 }
            data:
              failCommands: [ insert ]
              closeConnection: true
      - name: withTransaction
        object: *session0
        arguments:
          callback:
            -
              # We do not assert the result here, as insertOne will fail for
              # the first two executions of the callback before ultimately
              # succeeding and returning a result. Asserting the state of the
              # output collection after the test is sufficient.
              name: insertOne
              object: *collection0
              arguments:
                session: *session0
                document: { _id: 1 }
              ignoreResultAndError: true
    expectEvents:
      - client: *client0
        events:
          - commandStartedEvent:
              command:
                insert: *collectionName
                documents:
                  - { _id: 1 }
                ordered: true
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: "1" }
                startTransaction: true
                autocommit: false
                # omitted fields
                readConcern: { $$exists: false }
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *databaseName
          - commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: "1" }
                autocommit: false
                # omitted fields
                readConcern: { $$exists: false }
                startTransaction: { $$exists: false }
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
          - commandStartedEvent:
              command:
                insert: *collectionName
                documents:
                  - { _id: 1 }
                ordered: true
                lsid: { $$sessionLsid: *session0 }
                # second transaction will be causally consistent with the first
                readConcern: { afterClusterTime: { $$exists: true } }
                # txnNumber is incremented when retrying the transaction
                txnNumber: { $numberLong: "2" }
                startTransaction: true
                autocommit: false
                # omitted fields
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *databaseName
          - commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: "2" }
                autocommit: false
                # omitted fields
                readConcern: { $$exists: false }
                startTransaction: { $$exists: false }
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
          - commandStartedEvent:
              command:
                insert: *collectionName
                documents:
                  - { _id: 1 }
                ordered: true
                lsid: { $$sessionLsid: *session0 }
                # third transaction will be causally consistent with the second
                readConcern: { afterClusterTime: { $$exists: true } }
                # txnNumber is incremented when retrying the transaction
                txnNumber: { $numberLong: "3" }
                startTransaction: true
                autocommit: false
                # omitted fields
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *databaseName
          - commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: "3" }
                autocommit: false
                # omitted fields
                readConcern: { $$exists: false }
                startTransaction: { $$exists: false }
                writeConcern: { $$exists: false }
              commandName: commitTransaction
              databaseName: admin
    outcome:
      - collectionName: *collectionName
        databaseName: *databaseName
        documents:
          - { _id: 1 }
  -
    description: callback is not retried after non-transient error (DuplicateKeyError)
    operations:
      - name: withTransaction
        object: *session1
        arguments:
          callback:
            - name: insertOne
              object: *collection1
              arguments:
                session: *session1
                document: { _id: 1 }
              expectResult:
                $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
            - name: insertOne
              object: *collection1
              arguments:
                session: *session1
                document: { _id: 1 }
              expectError:
                errorLabelsOmit: ["TransientTransactionError", "UnknownTransactionCommitResult"]
        expectError:
          errorLabelsOmit: ["TransientTransactionError", "UnknownTransactionCommitResult"]
          # DuplicateKey error code included in the bulk write error message
          # returned by the server
          errorContains: E11000
    expectEvents:
      - client: *client1
        events:
          - commandStartedEvent:
              command:
                insert: *collectionName
                documents:
                  - { _id: 1 }
                ordered: true
                lsid: { $$sessionLsid: *session1 }
                txnNumber: { $numberLong: "1" }
                startTransaction: true
                autocommit: false
                # omitted fields
                readConcern: { $$exists: false }
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *databaseName
          - commandStartedEvent:
              command:
                insert: *collectionName
                documents:
                  - { _id: 1 }
                ordered: true
                lsid: { $$sessionLsid: *session1 }
                txnNumber: { $numberLong: "1" }
                autocommit: false
                # omitted fields
                readConcern: { $$exists: false }
                startTransaction: { $$exists: false }
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *databaseName
          - commandStartedEvent:
              command:
                abortTransaction: 1
                lsid: { $$sessionLsid: *session1 }
                txnNumber: { $numberLong: "1" }
                autocommit: false
                # omitted fields
                readConcern: { $$exists: false }
                startTransaction: { $$exists: false }
                writeConcern: { $$exists: false }
              commandName: abortTransaction
              databaseName: admin
    outcome:
      - collectionName: *collectionName
        databaseName: *databaseName
        documents: []
