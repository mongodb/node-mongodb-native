description: commit-writeconcernerror

schemaVersion: '1.4' # For `serverless` in `runOnRequirements`

runOnRequirements:
  - minServerVersion: '4.0'
    topologies: [ replicaset ]
  - minServerVersion: 4.1.8
    topologies: [ sharded, load-balanced ]

createEntities:
  - client:
      id: &client0 client0
      useMultipleMongoses: false
      observeEvents: [ commandStartedEvent ]
  - database:
      id: &database0 database0
      client: *client0
      databaseName: &databaseName withTransaction-tests
  - collection:
      id: &collection0 collection0
      database: *database0
      collectionName: &collectionName test
  - session:
      id: &session0 session0
      client: *client0

initialData:
  - collectionName: *collectionName
    databaseName: *databaseName
    documents: []

tests:
  -
    description: commitTransaction is retried after WriteConcernFailed timeout error
    operations:
      - name: failPoint
        object: testRunner
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 2 }
            data:
              failCommands: [ commitTransaction ]
              # Do not specify closeConnection: false, since that would conflict
              # with writeConcernError (see: SERVER-39292)
              writeConcernError:
                code: 64
                codeName: WriteConcernFailed
                errmsg: "waiting for replication timed out"
                errInfo: { wtimeout: true }
      - &operation
        name: withTransaction
        object: *session0
        arguments:
          callback:
            - name: insertOne
              object: *collection0
              arguments:
                session: *session0
                document: { _id: 1 }
              expectResult:
                $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } }
    expectEvents: &expectEvents_with_retries
      - client: *client0
        events:
          - commandStartedEvent:
              command:
                insert: *collectionName
                documents:
                  - { _id: 1 }
                ordered: true
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: "1" }
                startTransaction: true
                autocommit: false
                # omitted fields
                readConcern: { $$exists: false }
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *databaseName
          - commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: "1" }
                autocommit: false
                # omitted fields
                readConcern: { $$exists: false }
                startTransaction: { $$exists: false }
                writeConcern: { $$exists: false }
              commandName: commitTransaction
              databaseName: admin
          - commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: "1" }
                autocommit: false
                # commitTransaction applies w:majority on retries (SPEC-1185)
                writeConcern: { w: majority, wtimeout: 10000 }
                # omitted fields
                readConcern: { $$exists: false }
                startTransaction: { $$exists: false }
              commandName: commitTransaction
              databaseName: admin
          - commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: "1" }
                autocommit: false
                # commitTransaction applies w:majority on retries (SPEC-1185)
                writeConcern: { w: majority, wtimeout: 10000 }
                # omitted fields
                readConcern: { $$exists: false }
                startTransaction: { $$exists: false }
              commandName: commitTransaction
              databaseName: admin
    # The write operation is still applied despite the write concern error
    outcome: &outcome
      - collectionName: *collectionName
        databaseName: *databaseName
        documents:
          - { _id: 1 }
  -
    # This test configures the fail point to return an error with the
    # WriteConcernFailed code but without errInfo that would identify it as a
    # wtimeout error. This tests that drivers do not assume that all
    # WriteConcernFailed errors are due to a replication timeout.
    description: commitTransaction is retried after WriteConcernFailed non-timeout error
    operations:
      - name: failPoint
        object: testRunner
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 2 }
            data:
              failCommands: [ commitTransaction ]
              # Do not specify closeConnection: false, since that would conflict
              # with writeConcernError (see: SERVER-39292)
              writeConcernError:
                code: 64
                codeName: WriteConcernFailed
                errmsg: "multiple errors reported"
      - *operation
    expectEvents: *expectEvents_with_retries
    outcome: *outcome
  -
    description: commitTransaction is not retried after UnknownReplWriteConcern error
    runOnRequirements:
      # Serverless sets empty `codeName` on failpoint errors. Remove once CLOUDP-280424 is fixed.
      - serverless: forbid
    operations:
      - name: failPoint
        object: testRunner
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
              failCommands: [ commitTransaction ]
              writeConcernError:
                code: 79
                codeName: UnknownReplWriteConcern
                errmsg: "No write concern mode named 'foo' found in replica set configuration"
      - <<: *operation
        expectError:
          errorCodeName: UnknownReplWriteConcern
          errorLabelsOmit: ["TransientTransactionError", "UnknownTransactionCommitResult"]
    expectEvents: &expectEvents_without_retries
      - client: *client0
        events:
          - commandStartedEvent:
              command:
                insert: *collectionName
                documents:
                  - { _id: 1 }
                ordered: true
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: "1" }
                startTransaction: true
                autocommit: false
                # omitted fields
                readConcern: { $$exists: false }
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *databaseName
          - commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session0 }
                txnNumber: { $numberLong: "1" }
                autocommit: false
                # omitted fields
                readConcern: { $$exists: false }
                startTransaction: { $$exists: false }
                writeConcern: { $$exists: false }
              commandName: commitTransaction
              databaseName: admin
    # failCommand with writeConcernError still applies the write operation(s)
    outcome: *outcome
  -
    description: commitTransaction is not retried after UnsatisfiableWriteConcern error
    runOnRequirements:
      # Serverless sets empty `codeName` on failpoint errors. Remove once CLOUDP-280424 is fixed.
      - serverless: forbid
    operations:
      - name: failPoint
        object: testRunner
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
              failCommands: [ commitTransaction ]
              writeConcernError:
                code: 100
                codeName: UnsatisfiableWriteConcern
                errmsg: "Not enough data-bearing nodes"
      - <<: *operation
        expectError:
          errorCodeName: UnsatisfiableWriteConcern
          errorLabelsOmit: ["TransientTransactionError", "UnknownTransactionCommitResult"]
    expectEvents: *expectEvents_without_retries
    # failCommand with writeConcernError still applies the write operation(s)
    outcome: *outcome
  -
    description: commitTransaction is not retried after MaxTimeMSExpired error
    runOnRequirements:
      # Serverless sets empty `codeName` on failpoint errors. Remove once CLOUDP-280424 is fixed.
      - serverless: forbid
    operations:
      - name: failPoint
        object: testRunner
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
              failCommands: [ commitTransaction ]
              writeConcernError:
                code: 50
                codeName: MaxTimeMSExpired
                errmsg: "operation exceeded time limit"
      - <<: *operation
        expectError:
          errorCodeName: MaxTimeMSExpired
          errorLabelsContain: ["UnknownTransactionCommitResult"]
          errorLabelsOmit: ["TransientTransactionError"]
    expectEvents: *expectEvents_without_retries
    # failCommand with writeConcernError still applies the write operation(s)
    outcome: *outcome
