---
description: find-network-timeout-error

schemaVersion: "1.10"

runOnRequirements:
    # failCommand appName requirements
  - minServerVersion: "4.4"
    serverless: forbid
    topologies: [ single, replicaset, sharded ]

createEntities:
  - client:
      id: &setupClient setupClient
      useMultipleMongoses: false

initialData: &initialData
  - collectionName: &collectionName find-network-timeout-error
    databaseName: &databaseName sdam-tests
    documents:
      - _id: 1
      - _id: 2

tests:
  - description: Ignore network timeout error on find
    operations:
      - name: failPoint
        object: testRunner
        arguments:
          client: *setupClient
          failPoint:
            configureFailPoint: failCommand
            mode:
              times: 1
            data:
              failCommands:
                - find
              blockConnection: true
              blockTimeMS: 500
              appName: findNetworkTimeoutErrorTest
      - name: createEntities
        object: testRunner
        arguments:
          entities:
            - client:
                id: &client client
                useMultipleMongoses: false
                observeEvents:
                  - commandStartedEvent
                  - serverDescriptionChangedEvent
                  - poolClearedEvent
                uriOptions:
                  retryWrites: false
                  retryReads: false
                  appname: findNetworkTimeoutErrorTest
                  # Set a short socket timeout to ensure the find command times out.
                  socketTimeoutMS: 250
            - database:
                id: &database database
                client: *client
                databaseName: *databaseName
            - collection:
                id: &collection collection
                database: *database
                collectionName: *collectionName
      - name: find
        object: *collection
        arguments:
          filter:
            _id: 1
        expectError:
          isError: true
      # Perform another operation to ensure the node is still usable.
      - name: insertOne
        object: *collection
        arguments:
          document:
            _id: 3
      # Assert the server was not marked Unknown and the pool was not cleared.
      - name: assertEventCount
        object: testRunner
        arguments:
          client: *client
          event:
            serverDescriptionChangedEvent:
              newDescription:
                type: Unknown
          count: 0
      - name: assertEventCount
        object: testRunner
        arguments:
          client: *client
          event:
            poolClearedEvent: {}
          count: 0
    expectEvents:
      - client: *client
        eventType: command
        events:
          - commandStartedEvent:
              command:
                find: find-network-timeout-error
              commandName: find
              databaseName: *databaseName
          - commandStartedEvent:
              command:
                insert: find-network-timeout-error
                documents:
                  - _id: 3
              commandName: insert
              databaseName: *databaseName

    outcome:
      - collectionName: *collectionName
        databaseName: *databaseName
        documents:
          - _id: 1
          - _id: 2
          - _id: 3
