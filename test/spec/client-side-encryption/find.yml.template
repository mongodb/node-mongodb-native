runOn:
  - minServerVersion: "4.1.10"
database_name: &database_name "default"
collection_name: &collection_name "default"

data:
  - &doc0_encrypted { _id: 1, encrypted_string: {{ciphertext("string0", field="encrypted_string")}} }
  - &doc1_encrypted { _id: 2, encrypted_string: {{ciphertext("string1", field="encrypted_string")}} , random: {{ciphertext("abc", field="random")}} }
json_schema: {{schema()}}
key_vault_data: [{{key()}}]

tests:
  - description: "Find with deterministic encryption"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: find
        arguments:
          filter:
            { encrypted_string: "string0" }
        result:
          - &doc0 { _id: 1, encrypted_string: "string0" }
    expectations:
      # Auto encryption will request the collection info.
      - command_started_event:
          command:
            listCollections: 1
            cursor: {}
            filter:
              name: *collection_name
          command_name: listCollections
      - command_started_event:
          command:
            listCollections: 1
            cursor: {}
            filter:
              name: "datakeys"
            $db: admin
          command_name: listCollections
      # Then key is fetched from the key vault.
      - command_started_event:
          command:
            find: datakeys
            filter: {"$or": [{"_id": {"$in": [ {{key()["_id"]}} ] }}, {"keyAltNames": {"$in": []}}]}
            $db: admin
          command_name: find
      - command_started_event:
          command:
            find: *collection_name
            filter:
              { encrypted_string: { $eq: {{ciphertext("string0", field="encrypted_string")}} } }
          command_name: find
    outcome:
      collection:
        # Outcome is checked using a separate MongoClient without auto encryption.
        data:
          - *doc0_encrypted
          - *doc1_encrypted
  - description: "Find with $in with deterministic encryption"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: find
        arguments:
          filter:
            { encrypted_string: { $in: [ "string0", "string1" ] } }
        result:
          - { _id: 1, encrypted_string: "string0" }
          - &doc1 { _id: 2, encrypted_string: "string1", random: "abc" }
    expectations:
      # Auto encryption will request the collection info.
      - command_started_event:
          command:
            listCollections: 1
            cursor: {}
            filter:
              name: *collection_name
          command_name: listCollections
      - command_started_event:
          command:
            listCollections: 1
            cursor: {}
            filter:
              name: "datakeys"
            $db: admin
          command_name: listCollections
      # Then key is fetched from the key vault.
      - command_started_event:
          command:
            find: datakeys
            filter: {"$or": [{"_id": {"$in": [ {{key()["_id"]}} ] }}, {"keyAltNames": {"$in": []}}]}
            $db: admin
          command_name: find
      - command_started_event:
          command:
            find: *collection_name
            filter:
              # Note, the values are re-ordered, but this is logically equivalent.
              { encrypted_string: { $in: [ {{ciphertext("string0", field="encrypted_string")}}, {{ciphertext("string1", field="encrypted_string")}} ] } }
          command_name: find
    outcome:
      collection:
        # Outcome is checked using a separate MongoClient without auto encryption.
        data:
          - *doc0_encrypted
          - *doc1_encrypted
  - description: "Find fails when filtering on a random encrypted field"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          aws: {} # Credentials filled in from environment
    operations:
      - name: find
        arguments:
          filter: { random: "abc" }
        result:
          errorContains: "Cannot query on fields encrypted with the randomized encryption"