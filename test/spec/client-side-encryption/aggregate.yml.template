runOn:
  - minServerVersion: "4.1.10"
database_name: &database_name "default"
collection_name: &collection_name "default"

data:
  - &doc0_encrypted { _id: 1, encrypted_string: {{ciphertext("string0", field="encrypted_string")}} }
json_schema: {{schema()}}
key_vault_data: [{{key()}}]

tests:
  - description: "Aggregate with deterministic encryption"
    skipReason: "SERVER-39395"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: aggregate
        arguments:
          pipeline:
            - { $match: { encrypted_string: "457-55-5642" } }
        result:
          - &doc0 { _id: 1, encrypted_string: "string0" }
    expectations:
      # Auto encryption will request the collection info.
      - command_started_event:
          command:
            listCollections: 1
            cursor: {}
            filter:
              name: *collection_name
          command_name: listCollections
      - command_started_event:
          command:
            listCollections: 1
            cursor: {}
            filter:
              name: "datakeys"
            $db: admin
          command_name: listCollections
      # Then key is fetched from the key vault.
      - command_started_event:
          command:
            find: datakeys
            filter: {"$or": [{"_id": {"$in": [ {{key()["_id"]}} ] }}, {"keyAltNames": {"$in": []}}]}
            $db: admin
          command_name: find
      - command_started_event:
          command:
            aggregate: *collection_name
            pipeline:
              - { $match: { encrypted_string: "457-55-5642" } }
          command_name: aggregate
    outcome:
      collection:
        # Outcome is checked using a separate MongoClient without auto encryption.
        data:
          - *doc0_encrypted
  - description: "Aggregate with empty pipeline"
    skipReason: "SERVER-40829 hides agg support behind enableTestCommands flag."
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: aggregate
        arguments:
          pipeline: []
        result:
          - { _id: 1, encrypted_string: "string0" }
    expectations:
      # Auto encryption will request the collection info.
      - command_started_event:
          command:
            listCollections: 1
            cursor: {}
            filter:
              name: *collection_name
          command_name: listCollections
      - command_started_event:
          command:
            aggregate: *collection_name
            pipeline: []
            cursor: {}
          command_name: aggregate
      # Needs to fetch key when decrypting results
      - command_started_event:
          command:
            listCollections: 1
            cursor: {}
            filter:
              name: "datakeys"
            $db: admin
          command_name: listCollections
      # Then key is fetched from the key vault.
      - command_started_event:
          command:
            find: datakeys
            filter: {"$or": [{"_id": {"$in": [ {{key()["_id"]}} ] }}, {"keyAltNames": {"$in": []}}]}
            $db: admin
          command_name: find
    outcome:
      collection:
        # Outcome is checked using a separate MongoClient without auto encryption.
        data:
          - *doc0_encrypted
  - description: "Aggregate should fail with random encryption"
    skipReason: "SERVER-39395"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: aggregate
        arguments:
          pipeline:
            - { $match: { random: "abc" } }
        result:
          errorContains: "Cannot query on fields encrypted with the randomized encryption"
  - description: "Database aggregate should fail"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: aggregate
        object: database
        arguments:
          pipeline:
            - $currentOp: { allUsers: false, idleConnections: false, localOps: true }
            - $match: { command.aggregate: { $eq: 1 } }
            - $project: { command: 1 }
            - $project: { command.lsid: 0 }
        result:
          errorContains: "non-collection command not supported for auto encryption: aggregate"