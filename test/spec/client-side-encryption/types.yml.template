# Attempt to round trip some BSON types.
# Note: db pointer is excluded since it is deprecated and numberlong is excluded due to different driver interpretations of { $numberLong: '123' } in relaxed JSON parsing.

runOn:
  - minServerVersion: "4.1.10"
database_name: &database_name "default"
collection_name: &collection_name "default"

data: []
json_schema: {}
key_vault_data: [{{key()}}]

tests:
  - description: "type=objectId"
    clientOptions:
      autoEncryptOpts:
        schemaMap:
          "default.default": {{schema_w_type("objectId")}}
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: insertOne
        arguments:
          document: &doc0 { _id: 1, encrypted_objectId: {"$oid": "AAAAAAAAAAAAAAAAAAAAAAAA"} }
      - name: findOne
        arguments:
          filter: { _id: 1 }
          result: *doc0
    expectations:
      - command_started_event:
          command:
            listCollections: 1
            cursor: {}
            filter:
              name: "datakeys"
            $db: admin
          command_name: listCollections
      # Then key is fetched from the key vault.
      - command_started_event:
          command:
            find: datakeys
            filter: {"$or": [{"_id": {"$in": [ {{key()["_id"]}} ] }}, {"keyAltNames": {"$in": []}}]}
            $db: admin
          command_name: find
      - command_started_event:
          command:
            insert: *collection_name
            documents:
              - &doc0_encrypted { _id: 1, encrypted_objectId: {{ciphertext("test", field="encrypted_objectId")}} }
            ordered: true
          command_name: insert
      - command_started_event:
          command:
            find: *collection_name
            filter: {_id: 1}
          command_name: find
    outcome:
      collection:
        # Outcome is checked using a separate MongoClient without auto encryption.
        data:
          - *doc0_encrypted
  - description: "type=symbol"
    clientOptions:
      autoEncryptOpts:
        schemaMap:
          "default.default": {{schema_w_type("symbol")}}
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: insertOne
        arguments:
          document: &doc1 { _id: 1, encrypted_symbol: {"$symbol": "test"} }
      - name: findOne
        arguments:
          filter: { _id: 1 }
          result: *doc1
    expectations:
      - command_started_event:
          command:
            listCollections: 1
            cursor: {}
            filter:
              name: "datakeys"
            $db: admin
          command_name: listCollections
      # Then key is fetched from the key vault.
      - command_started_event:
          command:
            find: datakeys
            filter: {"$or": [{"_id": {"$in": [ {{key()["_id"]}} ] }}, {"keyAltNames": {"$in": []}}]}
            $db: admin
          command_name: find
      - command_started_event:
          command:
            insert: *collection_name
            documents:
              - &doc1_encrypted { _id: 1, encrypted_symbol: {{ciphertext("test", field="encrypted_symbol")}} }
            ordered: true
          command_name: insert
      - command_started_event:
          command:
            find: *collection_name
            filter: {_id: 1}
          command_name: find
    outcome:
      collection:
        # Outcome is checked using a separate MongoClient without auto encryption.
        data:
          - *doc1_encrypted
  - description: "type=int"
    clientOptions:
      autoEncryptOpts:
        schemaMap:
          "default.default": {{schema_w_type("int")}}
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: insertOne
        arguments:
          document: &doc2 { _id: 1, encrypted_int: {"$numberInt": "123"} }
      - name: findOne
        arguments:
          filter: { _id: 1 }
          result: *doc2
    expectations:
      - command_started_event:
          command:
            listCollections: 1
            cursor: {}
            filter:
              name: "datakeys"
            $db: admin
          command_name: listCollections
      # Then key is fetched from the key vault.
      - command_started_event:
          command:
            find: datakeys
            filter: {"$or": [{"_id": {"$in": [ {{key()["_id"]}} ] }}, {"keyAltNames": {"$in": []}}]}
            $db: admin
          command_name: find
      - command_started_event:
          command:
            insert: *collection_name
            documents:
              - &doc2_encrypted { _id: 1, encrypted_int: {{ciphertext("test", field="encrypted_int32")}} }
            ordered: true
          command_name: insert
      - command_started_event:
          command:
            find: *collection_name
            filter: {_id: 1}
          command_name: find
    outcome:
      collection:
        # Outcome is checked using a separate MongoClient without auto encryption.
        data:
          - *doc2_encrypted
  - description: "type=double"
    clientOptions:
      autoEncryptOpts:
        schemaMap:
          "default.default": {{schema_w_type("double")}}
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: insertOne
        arguments:
          document: &doc4 { _id: 1, encrypted_double: {"$numberDouble": "1.23"} }
        result:
            errorContains: "Cannot use deterministic encryption for element of type: double"
  - description: "type=decimal"
    clientOptions:
      autoEncryptOpts:
        schemaMap:
          "default.default": {{schema_w_type("decimal")}}
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: insertOne
        arguments:
          document: &doc5 { _id: 1, encrypted_decimal: {"$numberDecimal": "1.23"} }
        result:
            errorContains: "Cannot use deterministic encryption for element of type: decimal"
  - description: "type=binData"
    clientOptions:
      autoEncryptOpts:
        schemaMap:
          "default.default": {{schema_w_type("binData")}}
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: insertOne
        arguments:
          document: &doc6 { _id: 1, encrypted_binData: {"$binary": { base64: "AAAA", subType: "00" } } }
      - name: findOne
        arguments:
          filter: { _id: 1 }
          result: *doc6
    expectations:
      - command_started_event:
          command:
            listCollections: 1
            cursor: {}
            filter:
              name: "datakeys"
            $db: admin
          command_name: listCollections
      # Then key is fetched from the key vault.
      - command_started_event:
          command:
            find: datakeys
            filter: {"$or": [{"_id": {"$in": [ {{key()["_id"]}} ] }}, {"keyAltNames": {"$in": []}}]}
            $db: admin
          command_name: find
      - command_started_event:
          command:
            insert: *collection_name
            documents:
              - &doc6_encrypted { _id: 1, encrypted_binData: {{ciphertext("test", field="encrypted_binData")}} }
            ordered: true
          command_name: insert
      - command_started_event:
          command:
            find: *collection_name
            filter: {_id: 1}
          command_name: find
    outcome:
      collection:
        # Outcome is checked using a separate MongoClient without auto encryption.
        data:
          - *doc6_encrypted
  - description: "type=javascript"
    clientOptions:
      autoEncryptOpts:
        schemaMap:
          "default.default": {{schema_w_type("javascript")}}
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: insertOne
        arguments:
          document: &doc7 { _id: 1, encrypted_javascript: {"$code": "var x = 1;" } }
      - name: findOne
        arguments:
          filter: { _id: 1 }
          result: *doc7
    expectations:
      - command_started_event:
          command:
            listCollections: 1
            cursor: {}
            filter:
              name: "datakeys"
            $db: admin
          command_name: listCollections
      # Then key is fetched from the key vault.
      - command_started_event:
          command:
            find: datakeys
            filter: {"$or": [{"_id": {"$in": [ {{key()["_id"]}} ] }}, {"keyAltNames": {"$in": []}}]}
            $db: admin
          command_name: find
      - command_started_event:
          command:
            insert: *collection_name
            documents:
              - &doc7_encrypted { _id: 1, encrypted_javascript: {{ciphertext("test", field="encrypted_javascript")}} }
            ordered: true
          command_name: insert
      - command_started_event:
          command:
            find: *collection_name
            filter: {_id: 1}
          command_name: find
    outcome:
      collection:
        # Outcome is checked using a separate MongoClient without auto encryption.
        data:
          - *doc7_encrypted
  - description: "type=javascriptWithScope"
    clientOptions:
      autoEncryptOpts:
        schemaMap:
          "default.default": {{schema_w_type("javascriptWithScope")}}
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: insertOne
        arguments:
          document: &doc8 { _id: 1, encrypted_javascriptWithScope: {"$code": "var x = 1;", "$scope": {} } }
        result:
          errorContains: "Cannot use deterministic encryption for element of type: javascriptWithScope"
  - description: "type=object"
    clientOptions:
      autoEncryptOpts:
        schemaMap:
          "default.default": {{schema_w_type("object")}}
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: insertOne
        arguments:
          document: &doc9 { _id: 1, encrypted_object: {} }
        result:
          errorContains: "Cannot use deterministic encryption for element of type: object"
  - description: "type=timestamp"
    clientOptions:
      autoEncryptOpts:
        schemaMap:
          "default.default": {{schema_w_type("timestamp")}}
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: insertOne
        arguments:
          document: &doc10 { _id: 1, encrypted_timestamp: {$timestamp: {t: 123, i: 456}} }
      - name: findOne
        arguments:
          filter: { _id: 1 }
          result: *doc10
    expectations:
      - command_started_event:
          command:
            listCollections: 1
            cursor: {}
            filter:
              name: "datakeys"
            $db: admin
          command_name: listCollections
      # Then key is fetched from the key vault.
      - command_started_event:
          command:
            find: datakeys
            filter: {"$or": [{"_id": {"$in": [ {{key()["_id"]}} ] }}, {"keyAltNames": {"$in": []}}]}
            $db: admin
          command_name: find
      - command_started_event:
          command:
            insert: *collection_name
            documents:
              - &doc10_encrypted { _id: 1, encrypted_timestamp: {{ciphertext("test", field="encrypted_timestamp")}} }
            ordered: true
          command_name: insert
      - command_started_event:
          command:
            find: *collection_name
            filter: {_id: 1}
          command_name: find
    outcome:
      collection:
        # Outcome is checked using a separate MongoClient without auto encryption.
        data:
          - *doc10_encrypted
  - description: "type=regex"
    clientOptions:
      autoEncryptOpts:
        schemaMap:
          "default.default": {{schema_w_type("regex")}}
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: insertOne
        arguments:
          document: &doc11 { _id: 1, encrypted_regex: {$regularExpression: { pattern: "test", options: ""}} }
      - name: findOne
        arguments:
          filter: { _id: 1 }
          result: *doc11
    expectations:
      - command_started_event:
          command:
            listCollections: 1
            cursor: {}
            filter:
              name: "datakeys"
            $db: admin
          command_name: listCollections
      # Then key is fetched from the key vault.
      - command_started_event:
          command:
            find: datakeys
            filter: {"$or": [{"_id": {"$in": [ {{key()["_id"]}} ] }}, {"keyAltNames": {"$in": []}}]}
            $db: admin
          command_name: find
      - command_started_event:
          command:
            insert: *collection_name
            documents:
              - &doc11_encrypted { _id: 1, encrypted_regex: {{ciphertext("test", field="encrypted_regex")}} }
            ordered: true
          command_name: insert
      - command_started_event:
          command:
            find: *collection_name
            filter: {_id: 1}
          command_name: find
    outcome:
      collection:
        # Outcome is checked using a separate MongoClient without auto encryption.
        data:
          - *doc11_encrypted
  - description: "type=date"
    clientOptions:
      autoEncryptOpts:
        schemaMap:
          "default.default": {{schema_w_type("date")}}
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: insertOne
        arguments:
          document: &doc13 { _id: 1, encrypted_date: {$date: { $numberLong: "123" }} }
      - name: findOne
        arguments:
          filter: { _id: 1 }
          result: *doc13
    expectations:
      - command_started_event:
          command:
            listCollections: 1
            cursor: {}
            filter:
              name: "datakeys"
            $db: admin
          command_name: listCollections
      # Then key is fetched from the key vault.
      - command_started_event:
          command:
            find: datakeys
            filter: {"$or": [{"_id": {"$in": [ {{key()["_id"]}} ] }}, {"keyAltNames": {"$in": []}}]}
            $db: admin
          command_name: find
      - command_started_event:
          command:
            insert: *collection_name
            documents:
              - &doc13_encrypted { _id: 1, encrypted_date: {{ciphertext("test", field="encrypted_date")}} }
            ordered: true
          command_name: insert
      - command_started_event:
          command:
            find: *collection_name
            filter: {_id: 1}
          command_name: find
    outcome:
      collection:
        # Outcome is checked using a separate MongoClient without auto encryption.
        data:
          - *doc13_encrypted
  - description: "type=minKey"
    clientOptions:
      autoEncryptOpts:
        schemaMap:
          "default.default": {{schema_w_type("minKey")}}
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: insertOne
        arguments:
          document: &doc14 { _id: 1, encrypted_minKey: {$minKey: 1} }
        result:
          errorContains: "Cannot encrypt element of type: minKey"
  - description: "type=maxKey"
    clientOptions:
      autoEncryptOpts:
        schemaMap:
          "default.default": {{schema_w_type("maxKey")}}
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: insertOne
        arguments:
          document: &doc15 { _id: 1, encrypted_maxKey: {$maxKey: 1} }
        result:
          errorContains: "Cannot encrypt element of type: maxKey"
  - description: "type=undefined"
    clientOptions:
      autoEncryptOpts:
        schemaMap:
          "default.default": {{schema_w_type("undefined")}}
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: insertOne
        arguments:
          document: &doc16 { _id: 1, encrypted_undefined: {$undefined: true} }
        result:
          errorContains: "Cannot encrypt element of type: undefined"
  - description: "type=array"
    clientOptions:
      autoEncryptOpts:
        schemaMap:
          "default.default": {{schema_w_type("array")}}
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: insertOne
        arguments:
          document: &doc17 { _id: 1, encrypted_array: [] }
        result:
          errorContains: "Cannot use deterministic encryption for element of type: array"
  - description: "type=bool"
    clientOptions:
      autoEncryptOpts:
        schemaMap:
          "default.default": {{schema_w_type("bool")}}
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: insertOne
        arguments:
          document: &doc18 { _id: 1, encrypted_bool: true }
        result:
          errorContains: "Cannot use deterministic encryption for element of type: bool"
  - description: "type=null"
    clientOptions:
      autoEncryptOpts:
        schemaMap:
          "default.default": {{schema_w_type("null")}}
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: insertOne
        arguments:
          document: &doc19 { _id: 1, encrypted_null: true }
        result:
          errorContains: "Cannot encrypt element of type: null"