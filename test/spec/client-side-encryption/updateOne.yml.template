runOn:
  - minServerVersion: "4.1.10"
database_name: &database_name "default"
collection_name: &collection_name "default"

data:
  - &doc0_encrypted { _id: 1, encrypted_string: {{ciphertext("string0", field="encrypted_string")}} }
json_schema: {{schema()}}
key_vault_data: [{{key()}}]

tests:
  - description: "updateOne with deterministic encryption"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: updateOne
        arguments:
          filter: { encrypted_string: "string0" }
          update: { $set: { encrypted_string: "string1", random: "abc" } }
        result:
          matchedCount: 1
          modifiedCount: 1
          upsertedCount: 0
    expectations:
      # Auto encryption will request the collection info.
      - command_started_event:
          command:
            listCollections: 1
            cursor: {}
            filter:
              name: *collection_name
          command_name: listCollections
      - command_started_event:
          command:
            listCollections: 1
            cursor: {}
            filter:
              name: "datakeys"
            $db: admin
          command_name: listCollections
      # Then key is fetched from the key vault.
      - command_started_event:
          command:
            find: datakeys
            filter: {"$or": [{"_id": {"$in": [ {{key()["_id"]}} ] }}, {"keyAltNames": {"$in": []}}]}
            $db: admin
          command_name: find
      - command_started_event:
          command:
            update: *collection_name
            updates:
              - q: { encrypted_string: { $eq: {{ciphertext("string0", field="encrypted_string")}} } }
                u: { $set: {encrypted_string: {{ciphertext("string1", field="encrypted_string")}}, random: { $$type: "binData" } } }
                multi: false
                upsert: false
            ordered: true
          command_name: update
    outcome:
      collection:
        # Outcome is checked using a separate MongoClient without auto encryption.
        data:
          - { _id: 1, encrypted_string: {{ciphertext("string1", field="encrypted_string")}}, random: { $$type: "binData"} }
  - description: "updateOne fails when filtering on a random field"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: updateOne
        arguments:
          filter: { random: "abc" }
          update: { $set: { encrypted_string: "string1" } }
        result:
          errorContains: "Cannot query on fields encrypted with the randomized encryption"
  - description: "$unset works with an encrypted field"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: updateOne
        arguments:
          filter: { }
          update: { $unset: { encrypted_string: "" } }
        result:
          matchedCount: 1
          modifiedCount: 1
          upsertedCount: 0
    expectations:
      # Auto encryption will request the collection info.
      - command_started_event:
          command:
            listCollections: 1
            cursor: {}
            filter:
              name: *collection_name
          command_name: listCollections
      - command_started_event:
          command:
            update: *collection_name
            updates:
              - q: { }
                u: { $unset: {encrypted_string: "" } }
                multi: false
                upsert: false
            ordered: true
          command_name: update
    outcome:
      collection:
        # Outcome is checked using a separate MongoClient without auto encryption.
        data:
          - { _id: 1 }
  - description: "$rename works if target value has same encryption options"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: updateOne
        arguments:
          filter: { }
          update: { $rename: { encrypted_string: "encrypted_string_equivalent" } }
        result:
          matchedCount: 1
          modifiedCount: 1
          upsertedCount: 0
    expectations:
      # Auto encryption will request the collection info.
      - command_started_event:
          command:
            listCollections: 1
            cursor: {}
            filter:
              name: *collection_name
          command_name: listCollections
      - command_started_event:
          command:
            update: *collection_name
            updates:
              - q: { }
                u: { $rename: {encrypted_string: "encrypted_string_equivalent" } }
                multi: false
                upsert: false
            ordered: true
          command_name: update
    outcome:
      collection:
        # Outcome is checked using a separate MongoClient without auto encryption.
        data:
          - { _id: 1, encrypted_string_equivalent: {{ciphertext("string0", field="encrypted_string")}} }
  - description: "$rename fails if target value has different encryption options"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: updateOne
        arguments:
          filter: { }
          update: { $rename: { encrypted_string: "random" } }
        result:
          errorContains: "$rename between two encrypted fields must have the same metadata or both be unencrypted"
  - description: "an invalid update (no $ operators) is validated and errors"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          aws: {} # Credentials filled in from environment.
    operations:
      - name: updateOne
        arguments:
          filter: { }
          update: { encrypted_string: "random" }
        result:
          errorContains: "" # Note, drivers differ in the error message. Just ensure an error is thrown.